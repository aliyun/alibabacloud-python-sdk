# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import BinaryIO, Dict, List, Any


class ConfigureDtsJobRequest(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        data_check_configure: str = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        db_list: str = None,
        dedicated_cluster_id: str = None,
        delay_notice: bool = None,
        delay_phone: str = None,
        delay_rule_time: int = None,
        dest_ca_certificate_oss_url: str = None,
        dest_ca_certificate_password: str = None,
        dest_client_cert_oss_url: str = None,
        dest_client_key_oss_url: str = None,
        dest_client_password: str = None,
        dest_primary_vsw_id: str = None,
        dest_secondary_vsw_id: str = None,
        destination_endpoint_data_base_name: str = None,
        destination_endpoint_engine_name: str = None,
        destination_endpoint_ip: str = None,
        destination_endpoint_instance_id: str = None,
        destination_endpoint_instance_type: str = None,
        destination_endpoint_oracle_sid: str = None,
        destination_endpoint_owner_id: str = None,
        destination_endpoint_password: str = None,
        destination_endpoint_port: str = None,
        destination_endpoint_region: str = None,
        destination_endpoint_role: str = None,
        destination_endpoint_user_name: str = None,
        disaster_recovery_job: bool = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        error_notice: bool = None,
        error_phone: str = None,
        file_oss_url: str = None,
        job_type: str = None,
        max_du: float = None,
        min_du: float = None,
        owner_id: str = None,
        region_id: str = None,
        reserve: str = None,
        resource_group_id: str = None,
        source_endpoint_database_name: str = None,
        source_endpoint_engine_name: str = None,
        source_endpoint_ip: str = None,
        source_endpoint_instance_id: str = None,
        source_endpoint_instance_type: str = None,
        source_endpoint_oracle_sid: str = None,
        source_endpoint_owner_id: str = None,
        source_endpoint_password: str = None,
        source_endpoint_port: str = None,
        source_endpoint_region: str = None,
        source_endpoint_role: str = None,
        source_endpoint_user_name: str = None,
        source_endpoint_vswitch_id: str = None,
        src_ca_certificate_oss_url: str = None,
        src_ca_certificate_password: str = None,
        src_client_cert_oss_url: str = None,
        src_client_key_oss_url: str = None,
        src_client_password: str = None,
        src_primary_vsw_id: str = None,
        src_secondary_vsw_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
    ):
        # The start offset of incremental data migration or incremental data synchronization. The value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The parameters for data verification, including the configurations for data verification and alerts. The value is a JSON string. For more information, see [DataCheckConfigure parameter description](https://help.aliyun.com/document_detail/459023.html).
        self.data_check_configure = data_check_configure
        # Specifies whether to perform full data migration or full data synchronization. Valid values:
        # 
        # *   **true** (default)
        # *   **false**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.data_initialization = data_initialization
        # Specifies whether to perform incremental data migration or incremental data synchronization. Valid values:
        # 
        # *   **false** (default)
        # *   **true**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.data_synchronization = data_synchronization
        # The objects that you want to migrate or synchronize. The value is a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_list = db_list
        # The ID of the DTS dedicated cluster on which the task runs.
        # 
        # > If this parameter is specified, the task is scheduled to the specified DTS dedicated cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # Specifies whether to monitor task latency. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.delay_notice = delay_notice
        # The mobile phone numbers to which latency-related alerts are sent. Separate multiple mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile phone numbers in the Chinese mainland are supported. You can specify up to 10 mobile phone numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phone numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_phone = delay_phone
        # The threshold for latency alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business requirements. To prevent unstable latency caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # > If **DelayNotice** is set to **true**, this parameter is required.
        self.delay_rule_time = delay_rule_time
        # The path of the CA certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_ca_certificate_oss_url = dest_ca_certificate_oss_url
        # The key of the CA certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_ca_certificate_password = dest_ca_certificate_password
        # The path to the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_cert_oss_url = dest_client_cert_oss_url
        # The path to the private key of the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_key_oss_url = dest_client_key_oss_url
        # The password of the private key of the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_password = dest_client_password
        # VPCNAT destination main VSW
        self.dest_primary_vsw_id = dest_primary_vsw_id
        # VPCNAT destination backup VSW
        self.dest_secondary_vsw_id = dest_secondary_vsw_id
        # The name of the database to which the objects are migrated or synchronized in the destination instance.
        # 
        # > 
        # 
        # *   This parameter is valid and required only if the destination database is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, an AnalyticDB for PostgreSQL instance, a PostgreSQL database, a MaxCompute project, or a MongoDB database.
        # *   If the destination instance is a MaxCompute project, you must specify the MaxCompute project ID.
        self.destination_endpoint_data_base_name = destination_endpoint_data_base_name
        # The type of the destination database. Valid values:
        # 
        # *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database.
        # *   **MARIADB**: ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **POLARDB_O**: PolarDB for PostgreSQL (Compatible with Oracle) cluster.
        # *   **POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **ORACLE**: self-managed Oracle database.
        # *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database.
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database.
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster.
        # *   **ADB30**: AnalyticDB for MySQL V3.0 cluster.
        # *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database.
        # *   **GREENPLUM**: AnalyticDB for PostgreSQL instance.
        # *   **KAFKA**: ApsaraMQ for Kafka instance or self-managed Kafka cluster.
        # *   **DATAHUB**: DataHub project.
        # *   **DB2**: self-managed Db2 for LUW database.
        # *   **AS400**: Db2 for i database.
        # *   **ODPS**: MaxCompute project.
        # *   **Tablestore**: Tablestore instance.
        # *   **ELK**: Elasticsearch cluster.
        # *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database.
        # 
        # > 
        # 
        # *   Default value: **MYSQL**.
        # *   If this parameter is set to **KAFKA**, **MONGODB**, or **PolarDB**, you must also specify the database information in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.destination_endpoint_engine_name = destination_endpoint_engine_name
        # The IP address of the destination instance.
        # 
        # > This parameter is valid and required only if **DestinationEndpointInstanceType** is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**.
        self.destination_endpoint_ip = destination_endpoint_ip
        # The destination instance ID.
        # 
        # If the destination instance is an Alibaba Cloud database instance, you must specify the database instance ID. For example, if the destination instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
        # 
        # If the destination instance is a self-managed database, the value of this parameter varies with the value of **DestinationEndpointInstanceType**.****\
        # 
        # *   If DestinationEndpointInstanceType is set to **ECS**, you must specify the ECS instance ID.
        # *   If DestinationEndpointInstanceType is set to **DG**, you must specify the database gateway ID.
        # *   If DestinationEndpointInstanceType is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
        # 
        # > If DestinationEndpointInstanceType is set to **CEN**, you must also specify the ID of the CEN instance in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.destination_endpoint_instance_id = destination_endpoint_instance_id
        # The type of the destination instance. Valid values:
        # 
        # **Alibaba Cloud database instance**\
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **DISTRIBUTED_POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **REDIS**: ApsaraDB for Redis instance.
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster or AnalyticDB for MySQL V3.0 cluster.
        # *   **MONGODB**: ApsaraDB for MongoDB instance.
        # *   **GREENPLUM**: AnalyticDB for PostgreSQL instance.
        # *   **DATAHUB**: DataHub project.
        # *   **ELK**: Elasticsearch cluster.
        # *   **Tablestore**: Tablestore instance.
        # *   **ODPS**: MaxCompute project.
        # 
        # **Self-managed database**\
        # 
        # *   **OTHER**: self-managed database with a public IP address.
        # *   **ECS**: self-managed database hosted on an ECS instance.
        # *   **EXPRESS**: self-managed database connected over Express Connect.
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN).
        # *   **DG**: self-managed database connected over Database Gateway.
        # 
        # > 
        # 
        # *   If the destination instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, you must connect the cluster to DTS as a self-managed database by using a public IP address or Express Connect and set this parameter to **OTHER** or **EXPRESS**.
        # *   If the destination instance is an ApsaraMQ for Kafka instance, you must connect the instance to DTS as a self-managed database by using ECS or Express Connect and set this parameter to **ECS** or **EXPRESS**.
        # *   For more information, see [Supported source and destination databases](https://help.aliyun.com/document_detail/176064.html).
        # *   If the destination instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](https://help.aliyun.com/document_detail/146958.html).
        # 
        # This parameter is required.
        self.destination_endpoint_instance_type = destination_endpoint_instance_type
        # The SID of the Oracle database.
        # 
        # > This parameter is valid and required only if **DestinationEndpointEngineName** is set to **ORACLE** and the **Oracle** database is deployed in a non-RAC architecture.
        self.destination_endpoint_oracle_sid = destination_endpoint_oracle_sid
        # The ID of the Alibaba Cloud account to which the destination ApsaraDB RDS for MySQL instance belongs.
        # 
        # > 
        # 
        # *   This parameter is available only if the destination instance is an ApsaraDB RDS for MySQL instance.
        # *   You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify **DestinationEndpointRole**.
        self.destination_endpoint_owner_id = destination_endpoint_owner_id
        # The password of the account that is used to log on to the destination database.
        # 
        # > If the destination database is a MaxCompute project, you must specify the AccessKey secret of your Alibaba Cloud account. For information about how to obtain an AccessKey pair, see [Create an AccessKey pair](https://help.aliyun.com/document_detail/116401.html).
        self.destination_endpoint_password = destination_endpoint_password
        # The port number of the destination instance.
        # 
        # > This parameter is valid and required only if the destination instance is a self-managed database.
        self.destination_endpoint_port = destination_endpoint_port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # > If the destination instance is an Alibaba Cloud database instance, this parameter is required.
        self.destination_endpoint_region = destination_endpoint_region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        # 
        # > This parameter is required if you migrate or synchronize data across Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account DTS tasks](https://help.aliyun.com/document_detail/48468.html).
        self.destination_endpoint_role = destination_endpoint_role
        # The username of the account that is used to log on to the destination database.
        # 
        # > 
        # 
        # *   In most cases, this parameter is required.
        # *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](https://help.aliyun.com/document_detail/175878.html) or [Prepare the database accounts for data synchronization](https://help.aliyun.com/document_detail/213152.html).
        # *   If the destination database is a MaxCompute project, you must specify the AccessKey ID of your Alibaba Cloud account. For information about how to obtain an AccessKey pair, see [Create an AccessKey pair](https://help.aliyun.com/document_detail/116401.html).
        self.destination_endpoint_user_name = destination_endpoint_user_name
        # Specifies whether the instance is a disaster recovery instance. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.disaster_recovery_job = disaster_recovery_job
        # The environment tag of the DTS instance. Valid values:
        # 
        # *   **normal******\
        # *   **online******\
        self.dts_bis_label = dts_bis_label
        # The ID of the data migration or synchronization instance.
        # 
        # > You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration or synchronization task.
        # 
        # > You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The name of the DTS instance.
        # 
        # This parameter is required.
        self.dts_job_name = dts_job_name
        # Specifies whether to monitor task status. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.error_notice = error_notice
        # The mobile phone numbers to which status-related alerts are sent. Separate multiple mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile phone numbers in the Chinese mainland are supported. You can specify up to 10 mobile phone numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phone numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_phone = error_phone
        # The URL of the Object Storage Service (OSS) bucket that stores the files related to the DTS task.
        self.file_oss_url = file_oss_url
        # The type of the task. Valid values:
        # 
        # *   **MIGRATION**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **CHECK**: data verification task. You must separately purchase a data verification instance.
        # 
        # > If you set this parameter to **MIGRATION** or **SYNC**, you can also enable data verification in the data migration or synchronization task.
        # 
        # This parameter is required.
        self.job_type = job_type
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The minimum number of DTS Units (DUs).
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        self.owner_id = owner_id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to add more configurations of the source or destination instance to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the CEN instance ID. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.reserve = reserve
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the database from which the objects are migrated or synchronized in the source instance.
        # 
        # > This parameter is valid and required only if the source instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, a PostgreSQL database, or a MongoDB database.
        self.source_endpoint_database_name = source_endpoint_database_name
        # The database type of the source instance.
        # 
        # *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database.
        # *   **MARIADB**: ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **POLARDB_O**: PolarDB for PostgreSQL (Compatible with Oracle) cluster.
        # *   **POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **ORACLE**: self-managed Oracle database.
        # *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database.
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database.
        # *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database.
        # *   **DB2**: self-managed Db2 for LUW database.
        # *   **AS400**: self-managed Db2 for i database.
        # *   **DMSPOLARDB**: DMS logical database.
        # *   **HBASE**: self-managed HBase database.
        # *   **TERADATA**: Teradata database.
        # *   **TiDB**: TiDB database.
        # *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database.
        # 
        # > 
        # 
        # *   Default value: **MYSQL**.
        # *   If this parameter is set to **MONGODB**, you must also specify the architecture type of the MongoDB database in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.source_endpoint_engine_name = source_endpoint_engine_name
        # The IP address of the source instance.
        # 
        # > This parameter is valid and required only if **SourceEndpointInstanceType** is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**.
        self.source_endpoint_ip = source_endpoint_ip
        # The source instance ID.
        # 
        # If the source instance is an Alibaba Cloud database instance, you must specify the database instance ID. For example, if the source instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
        # 
        # If the source instance is a self-managed database, the value of this parameter varies with the value of **SourceEndpointInstanceType**.****\
        # 
        # *   If SourceEndpointInstanceType is set to **ECS**, you must specify the ECS instance ID.
        # *   If SourceEndpointInstanceType is set to **DG**, you must specify the database gateway ID.
        # *   If SourceEndpointInstanceType is set to **EXPRESS** or **CEN**, you must specify the ID of the virtual private cloud (VPC) that is connected to the source instance.
        # 
        # > If SourceEndpointInstanceType is set to **CEN**, you must also specify the ID of the CEN instance in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.source_endpoint_instance_id = source_endpoint_instance_id
        # The type of the source instance. Valid values:
        # 
        # **Alibaba Cloud database instance**\
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **REDIS**: ApsaraDB for Redis instance.
        # *   **DISTRIBUTED_POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **MONGODB**: ApsaraDB for MongoDB instance.
        # *   **DISTRIBUTED_DMSLOGICDB**: Data Management (DMS) logical database
        # 
        # **Self-managed database**\
        # 
        # *   **OTHER**: self-managed database with a public IP address.
        # *   **ECS**: self-managed database hosted on an ECS instance.
        # *   **EXPRESS**: self-managed database connected over Express Connect.
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN).
        # *   **DG**: self-managed database connected over Database Gateway.
        # 
        # > 
        # 
        # *   If the source instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, you must connect the cluster to DTS as a self-managed database by using a public IP address or Express Connect and set this parameter to **OTHER** or **EXPRESS**.
        # *   For more information, see [Supported sources and targets](https://help.aliyun.com/document_detail/176064.html).
        # *   If the source instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](https://help.aliyun.com/document_detail/146958.html).
        # 
        # This parameter is required.
        self.source_endpoint_instance_type = source_endpoint_instance_type
        # The SID of the Oracle database.
        # 
        # > This parameter is valid and required only if **SourceEndpointEngineName** is set to **ORACLE** and the **Oracle** database is deployed in a non-Real Application Cluster (RAC) architecture.
        self.source_endpoint_oracle_sid = source_endpoint_oracle_sid
        # The ID of the Alibaba Cloud account to which the source database belongs.
        # 
        # > You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify **SourceEndpointRole**.
        self.source_endpoint_owner_id = source_endpoint_owner_id
        # The password of the account that is used to log on to the source database.
        self.source_endpoint_password = source_endpoint_password
        # The port number of the source instance.
        # 
        # > This parameter is required only if the source instance is a self-managed database.
        self.source_endpoint_port = source_endpoint_port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # > If the source instance is an Alibaba Cloud database instance, this parameter is required.
        self.source_endpoint_region = source_endpoint_region
        # The name of the Resource Access Management (RAM) role configured for the Alibaba Cloud account to which the source instance belongs.
        # 
        # > This parameter is required if you migrate or synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account DTS tasks](https://help.aliyun.com/document_detail/48468.html).
        self.source_endpoint_role = source_endpoint_role
        # The username of the account that is used to log on to the source database.
        # 
        # > 
        # 
        # *   In most cases, this parameter is required.
        # *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](https://help.aliyun.com/document_detail/175878.html) or [Prepare the database accounts for data synchronization](https://help.aliyun.com/document_detail/213152.html).
        self.source_endpoint_user_name = source_endpoint_user_name
        # The ID of the vSwitch that is used for data shipping.
        self.source_endpoint_vswitch_id = source_endpoint_vswitch_id
        # The path of the certificate authority (CA) certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_oss_url = src_ca_certificate_oss_url
        # The key of the CA certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_password = src_ca_certificate_password
        # The path to the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_cert_oss_url = src_client_cert_oss_url
        # The path to the private key of the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_key_oss_url = src_client_key_oss_url
        # The password of the private key of the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_password = src_client_password
        # VPCNAT source end main VSW
        self.src_primary_vsw_id = src_primary_vsw_id
        # VPCNAT source backup VSW
        self.src_secondary_vsw_id = src_secondary_vsw_id
        # Specifies whether to perform schema migration or schema synchronization. Valid values:
        # 
        # *   **true** (default)
        # *   **false**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization task is two-way synchronization.
        self.synchronization_direction = synchronization_direction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.data_check_configure is not None:
            result['DataCheckConfigure'] = self.data_check_configure
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay_notice is not None:
            result['DelayNotice'] = self.delay_notice
        if self.delay_phone is not None:
            result['DelayPhone'] = self.delay_phone
        if self.delay_rule_time is not None:
            result['DelayRuleTime'] = self.delay_rule_time
        if self.dest_ca_certificate_oss_url is not None:
            result['DestCaCertificateOssUrl'] = self.dest_ca_certificate_oss_url
        if self.dest_ca_certificate_password is not None:
            result['DestCaCertificatePassword'] = self.dest_ca_certificate_password
        if self.dest_client_cert_oss_url is not None:
            result['DestClientCertOssUrl'] = self.dest_client_cert_oss_url
        if self.dest_client_key_oss_url is not None:
            result['DestClientKeyOssUrl'] = self.dest_client_key_oss_url
        if self.dest_client_password is not None:
            result['DestClientPassword'] = self.dest_client_password
        if self.dest_primary_vsw_id is not None:
            result['DestPrimaryVswId'] = self.dest_primary_vsw_id
        if self.dest_secondary_vsw_id is not None:
            result['DestSecondaryVswId'] = self.dest_secondary_vsw_id
        if self.destination_endpoint_data_base_name is not None:
            result['DestinationEndpointDataBaseName'] = self.destination_endpoint_data_base_name
        if self.destination_endpoint_engine_name is not None:
            result['DestinationEndpointEngineName'] = self.destination_endpoint_engine_name
        if self.destination_endpoint_ip is not None:
            result['DestinationEndpointIP'] = self.destination_endpoint_ip
        if self.destination_endpoint_instance_id is not None:
            result['DestinationEndpointInstanceID'] = self.destination_endpoint_instance_id
        if self.destination_endpoint_instance_type is not None:
            result['DestinationEndpointInstanceType'] = self.destination_endpoint_instance_type
        if self.destination_endpoint_oracle_sid is not None:
            result['DestinationEndpointOracleSID'] = self.destination_endpoint_oracle_sid
        if self.destination_endpoint_owner_id is not None:
            result['DestinationEndpointOwnerID'] = self.destination_endpoint_owner_id
        if self.destination_endpoint_password is not None:
            result['DestinationEndpointPassword'] = self.destination_endpoint_password
        if self.destination_endpoint_port is not None:
            result['DestinationEndpointPort'] = self.destination_endpoint_port
        if self.destination_endpoint_region is not None:
            result['DestinationEndpointRegion'] = self.destination_endpoint_region
        if self.destination_endpoint_role is not None:
            result['DestinationEndpointRole'] = self.destination_endpoint_role
        if self.destination_endpoint_user_name is not None:
            result['DestinationEndpointUserName'] = self.destination_endpoint_user_name
        if self.disaster_recovery_job is not None:
            result['DisasterRecoveryJob'] = self.disaster_recovery_job
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.error_notice is not None:
            result['ErrorNotice'] = self.error_notice
        if self.error_phone is not None:
            result['ErrorPhone'] = self.error_phone
        if self.file_oss_url is not None:
            result['FileOssUrl'] = self.file_oss_url
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserve is not None:
            result['Reserve'] = self.reserve
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_database_name is not None:
            result['SourceEndpointDatabaseName'] = self.source_endpoint_database_name
        if self.source_endpoint_engine_name is not None:
            result['SourceEndpointEngineName'] = self.source_endpoint_engine_name
        if self.source_endpoint_ip is not None:
            result['SourceEndpointIP'] = self.source_endpoint_ip
        if self.source_endpoint_instance_id is not None:
            result['SourceEndpointInstanceID'] = self.source_endpoint_instance_id
        if self.source_endpoint_instance_type is not None:
            result['SourceEndpointInstanceType'] = self.source_endpoint_instance_type
        if self.source_endpoint_oracle_sid is not None:
            result['SourceEndpointOracleSID'] = self.source_endpoint_oracle_sid
        if self.source_endpoint_owner_id is not None:
            result['SourceEndpointOwnerID'] = self.source_endpoint_owner_id
        if self.source_endpoint_password is not None:
            result['SourceEndpointPassword'] = self.source_endpoint_password
        if self.source_endpoint_port is not None:
            result['SourceEndpointPort'] = self.source_endpoint_port
        if self.source_endpoint_region is not None:
            result['SourceEndpointRegion'] = self.source_endpoint_region
        if self.source_endpoint_role is not None:
            result['SourceEndpointRole'] = self.source_endpoint_role
        if self.source_endpoint_user_name is not None:
            result['SourceEndpointUserName'] = self.source_endpoint_user_name
        if self.source_endpoint_vswitch_id is not None:
            result['SourceEndpointVSwitchID'] = self.source_endpoint_vswitch_id
        if self.src_ca_certificate_oss_url is not None:
            result['SrcCaCertificateOssUrl'] = self.src_ca_certificate_oss_url
        if self.src_ca_certificate_password is not None:
            result['SrcCaCertificatePassword'] = self.src_ca_certificate_password
        if self.src_client_cert_oss_url is not None:
            result['SrcClientCertOssUrl'] = self.src_client_cert_oss_url
        if self.src_client_key_oss_url is not None:
            result['SrcClientKeyOssUrl'] = self.src_client_key_oss_url
        if self.src_client_password is not None:
            result['SrcClientPassword'] = self.src_client_password
        if self.src_primary_vsw_id is not None:
            result['SrcPrimaryVswId'] = self.src_primary_vsw_id
        if self.src_secondary_vsw_id is not None:
            result['SrcSecondaryVswId'] = self.src_secondary_vsw_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DataCheckConfigure') is not None:
            self.data_check_configure = m.get('DataCheckConfigure')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DelayNotice') is not None:
            self.delay_notice = m.get('DelayNotice')
        if m.get('DelayPhone') is not None:
            self.delay_phone = m.get('DelayPhone')
        if m.get('DelayRuleTime') is not None:
            self.delay_rule_time = m.get('DelayRuleTime')
        if m.get('DestCaCertificateOssUrl') is not None:
            self.dest_ca_certificate_oss_url = m.get('DestCaCertificateOssUrl')
        if m.get('DestCaCertificatePassword') is not None:
            self.dest_ca_certificate_password = m.get('DestCaCertificatePassword')
        if m.get('DestClientCertOssUrl') is not None:
            self.dest_client_cert_oss_url = m.get('DestClientCertOssUrl')
        if m.get('DestClientKeyOssUrl') is not None:
            self.dest_client_key_oss_url = m.get('DestClientKeyOssUrl')
        if m.get('DestClientPassword') is not None:
            self.dest_client_password = m.get('DestClientPassword')
        if m.get('DestPrimaryVswId') is not None:
            self.dest_primary_vsw_id = m.get('DestPrimaryVswId')
        if m.get('DestSecondaryVswId') is not None:
            self.dest_secondary_vsw_id = m.get('DestSecondaryVswId')
        if m.get('DestinationEndpointDataBaseName') is not None:
            self.destination_endpoint_data_base_name = m.get('DestinationEndpointDataBaseName')
        if m.get('DestinationEndpointEngineName') is not None:
            self.destination_endpoint_engine_name = m.get('DestinationEndpointEngineName')
        if m.get('DestinationEndpointIP') is not None:
            self.destination_endpoint_ip = m.get('DestinationEndpointIP')
        if m.get('DestinationEndpointInstanceID') is not None:
            self.destination_endpoint_instance_id = m.get('DestinationEndpointInstanceID')
        if m.get('DestinationEndpointInstanceType') is not None:
            self.destination_endpoint_instance_type = m.get('DestinationEndpointInstanceType')
        if m.get('DestinationEndpointOracleSID') is not None:
            self.destination_endpoint_oracle_sid = m.get('DestinationEndpointOracleSID')
        if m.get('DestinationEndpointOwnerID') is not None:
            self.destination_endpoint_owner_id = m.get('DestinationEndpointOwnerID')
        if m.get('DestinationEndpointPassword') is not None:
            self.destination_endpoint_password = m.get('DestinationEndpointPassword')
        if m.get('DestinationEndpointPort') is not None:
            self.destination_endpoint_port = m.get('DestinationEndpointPort')
        if m.get('DestinationEndpointRegion') is not None:
            self.destination_endpoint_region = m.get('DestinationEndpointRegion')
        if m.get('DestinationEndpointRole') is not None:
            self.destination_endpoint_role = m.get('DestinationEndpointRole')
        if m.get('DestinationEndpointUserName') is not None:
            self.destination_endpoint_user_name = m.get('DestinationEndpointUserName')
        if m.get('DisasterRecoveryJob') is not None:
            self.disaster_recovery_job = m.get('DisasterRecoveryJob')
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('ErrorNotice') is not None:
            self.error_notice = m.get('ErrorNotice')
        if m.get('ErrorPhone') is not None:
            self.error_phone = m.get('ErrorPhone')
        if m.get('FileOssUrl') is not None:
            self.file_oss_url = m.get('FileOssUrl')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserve') is not None:
            self.reserve = m.get('Reserve')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointDatabaseName') is not None:
            self.source_endpoint_database_name = m.get('SourceEndpointDatabaseName')
        if m.get('SourceEndpointEngineName') is not None:
            self.source_endpoint_engine_name = m.get('SourceEndpointEngineName')
        if m.get('SourceEndpointIP') is not None:
            self.source_endpoint_ip = m.get('SourceEndpointIP')
        if m.get('SourceEndpointInstanceID') is not None:
            self.source_endpoint_instance_id = m.get('SourceEndpointInstanceID')
        if m.get('SourceEndpointInstanceType') is not None:
            self.source_endpoint_instance_type = m.get('SourceEndpointInstanceType')
        if m.get('SourceEndpointOracleSID') is not None:
            self.source_endpoint_oracle_sid = m.get('SourceEndpointOracleSID')
        if m.get('SourceEndpointOwnerID') is not None:
            self.source_endpoint_owner_id = m.get('SourceEndpointOwnerID')
        if m.get('SourceEndpointPassword') is not None:
            self.source_endpoint_password = m.get('SourceEndpointPassword')
        if m.get('SourceEndpointPort') is not None:
            self.source_endpoint_port = m.get('SourceEndpointPort')
        if m.get('SourceEndpointRegion') is not None:
            self.source_endpoint_region = m.get('SourceEndpointRegion')
        if m.get('SourceEndpointRole') is not None:
            self.source_endpoint_role = m.get('SourceEndpointRole')
        if m.get('SourceEndpointUserName') is not None:
            self.source_endpoint_user_name = m.get('SourceEndpointUserName')
        if m.get('SourceEndpointVSwitchID') is not None:
            self.source_endpoint_vswitch_id = m.get('SourceEndpointVSwitchID')
        if m.get('SrcCaCertificateOssUrl') is not None:
            self.src_ca_certificate_oss_url = m.get('SrcCaCertificateOssUrl')
        if m.get('SrcCaCertificatePassword') is not None:
            self.src_ca_certificate_password = m.get('SrcCaCertificatePassword')
        if m.get('SrcClientCertOssUrl') is not None:
            self.src_client_cert_oss_url = m.get('SrcClientCertOssUrl')
        if m.get('SrcClientKeyOssUrl') is not None:
            self.src_client_key_oss_url = m.get('SrcClientKeyOssUrl')
        if m.get('SrcClientPassword') is not None:
            self.src_client_password = m.get('SrcClientPassword')
        if m.get('SrcPrimaryVswId') is not None:
            self.src_primary_vsw_id = m.get('SrcPrimaryVswId')
        if m.get('SrcSecondaryVswId') is not None:
            self.src_secondary_vsw_id = m.get('SrcSecondaryVswId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        return self


class ConfigureDtsJobAdvanceRequest(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        data_check_configure: str = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        db_list: str = None,
        dedicated_cluster_id: str = None,
        delay_notice: bool = None,
        delay_phone: str = None,
        delay_rule_time: int = None,
        dest_ca_certificate_oss_url: str = None,
        dest_ca_certificate_password: str = None,
        dest_client_cert_oss_url: str = None,
        dest_client_key_oss_url: str = None,
        dest_client_password: str = None,
        dest_primary_vsw_id: str = None,
        dest_secondary_vsw_id: str = None,
        destination_endpoint_data_base_name: str = None,
        destination_endpoint_engine_name: str = None,
        destination_endpoint_ip: str = None,
        destination_endpoint_instance_id: str = None,
        destination_endpoint_instance_type: str = None,
        destination_endpoint_oracle_sid: str = None,
        destination_endpoint_owner_id: str = None,
        destination_endpoint_password: str = None,
        destination_endpoint_port: str = None,
        destination_endpoint_region: str = None,
        destination_endpoint_role: str = None,
        destination_endpoint_user_name: str = None,
        disaster_recovery_job: bool = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        error_notice: bool = None,
        error_phone: str = None,
        file_oss_url_object: BinaryIO = None,
        job_type: str = None,
        max_du: float = None,
        min_du: float = None,
        owner_id: str = None,
        region_id: str = None,
        reserve: str = None,
        resource_group_id: str = None,
        source_endpoint_database_name: str = None,
        source_endpoint_engine_name: str = None,
        source_endpoint_ip: str = None,
        source_endpoint_instance_id: str = None,
        source_endpoint_instance_type: str = None,
        source_endpoint_oracle_sid: str = None,
        source_endpoint_owner_id: str = None,
        source_endpoint_password: str = None,
        source_endpoint_port: str = None,
        source_endpoint_region: str = None,
        source_endpoint_role: str = None,
        source_endpoint_user_name: str = None,
        source_endpoint_vswitch_id: str = None,
        src_ca_certificate_oss_url: str = None,
        src_ca_certificate_password: str = None,
        src_client_cert_oss_url: str = None,
        src_client_key_oss_url: str = None,
        src_client_password: str = None,
        src_primary_vsw_id: str = None,
        src_secondary_vsw_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
    ):
        # The start offset of incremental data migration or incremental data synchronization. The value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The parameters for data verification, including the configurations for data verification and alerts. The value is a JSON string. For more information, see [DataCheckConfigure parameter description](https://help.aliyun.com/document_detail/459023.html).
        self.data_check_configure = data_check_configure
        # Specifies whether to perform full data migration or full data synchronization. Valid values:
        # 
        # *   **true** (default)
        # *   **false**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.data_initialization = data_initialization
        # Specifies whether to perform incremental data migration or incremental data synchronization. Valid values:
        # 
        # *   **false** (default)
        # *   **true**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.data_synchronization = data_synchronization
        # The objects that you want to migrate or synchronize. The value is a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_list = db_list
        # The ID of the DTS dedicated cluster on which the task runs.
        # 
        # > If this parameter is specified, the task is scheduled to the specified DTS dedicated cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # Specifies whether to monitor task latency. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.delay_notice = delay_notice
        # The mobile phone numbers to which latency-related alerts are sent. Separate multiple mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile phone numbers in the Chinese mainland are supported. You can specify up to 10 mobile phone numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phone numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_phone = delay_phone
        # The threshold for latency alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business requirements. To prevent unstable latency caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # > If **DelayNotice** is set to **true**, this parameter is required.
        self.delay_rule_time = delay_rule_time
        # The path of the CA certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_ca_certificate_oss_url = dest_ca_certificate_oss_url
        # The key of the CA certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_ca_certificate_password = dest_ca_certificate_password
        # The path to the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_cert_oss_url = dest_client_cert_oss_url
        # The path to the private key of the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_key_oss_url = dest_client_key_oss_url
        # The password of the private key of the client certificate that is used if the connection to the destination database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.dest_client_password = dest_client_password
        # VPCNAT destination main VSW
        self.dest_primary_vsw_id = dest_primary_vsw_id
        # VPCNAT destination backup VSW
        self.dest_secondary_vsw_id = dest_secondary_vsw_id
        # The name of the database to which the objects are migrated or synchronized in the destination instance.
        # 
        # > 
        # 
        # *   This parameter is valid and required only if the destination database is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, an AnalyticDB for PostgreSQL instance, a PostgreSQL database, a MaxCompute project, or a MongoDB database.
        # *   If the destination instance is a MaxCompute project, you must specify the MaxCompute project ID.
        self.destination_endpoint_data_base_name = destination_endpoint_data_base_name
        # The type of the destination database. Valid values:
        # 
        # *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database.
        # *   **MARIADB**: ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **POLARDB_O**: PolarDB for PostgreSQL (Compatible with Oracle) cluster.
        # *   **POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **ORACLE**: self-managed Oracle database.
        # *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database.
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database.
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster.
        # *   **ADB30**: AnalyticDB for MySQL V3.0 cluster.
        # *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database.
        # *   **GREENPLUM**: AnalyticDB for PostgreSQL instance.
        # *   **KAFKA**: ApsaraMQ for Kafka instance or self-managed Kafka cluster.
        # *   **DATAHUB**: DataHub project.
        # *   **DB2**: self-managed Db2 for LUW database.
        # *   **AS400**: Db2 for i database.
        # *   **ODPS**: MaxCompute project.
        # *   **Tablestore**: Tablestore instance.
        # *   **ELK**: Elasticsearch cluster.
        # *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database.
        # 
        # > 
        # 
        # *   Default value: **MYSQL**.
        # *   If this parameter is set to **KAFKA**, **MONGODB**, or **PolarDB**, you must also specify the database information in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.destination_endpoint_engine_name = destination_endpoint_engine_name
        # The IP address of the destination instance.
        # 
        # > This parameter is valid and required only if **DestinationEndpointInstanceType** is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**.
        self.destination_endpoint_ip = destination_endpoint_ip
        # The destination instance ID.
        # 
        # If the destination instance is an Alibaba Cloud database instance, you must specify the database instance ID. For example, if the destination instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
        # 
        # If the destination instance is a self-managed database, the value of this parameter varies with the value of **DestinationEndpointInstanceType**.****\
        # 
        # *   If DestinationEndpointInstanceType is set to **ECS**, you must specify the ECS instance ID.
        # *   If DestinationEndpointInstanceType is set to **DG**, you must specify the database gateway ID.
        # *   If DestinationEndpointInstanceType is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
        # 
        # > If DestinationEndpointInstanceType is set to **CEN**, you must also specify the ID of the CEN instance in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.destination_endpoint_instance_id = destination_endpoint_instance_id
        # The type of the destination instance. Valid values:
        # 
        # **Alibaba Cloud database instance**\
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **DISTRIBUTED_POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **REDIS**: ApsaraDB for Redis instance.
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster or AnalyticDB for MySQL V3.0 cluster.
        # *   **MONGODB**: ApsaraDB for MongoDB instance.
        # *   **GREENPLUM**: AnalyticDB for PostgreSQL instance.
        # *   **DATAHUB**: DataHub project.
        # *   **ELK**: Elasticsearch cluster.
        # *   **Tablestore**: Tablestore instance.
        # *   **ODPS**: MaxCompute project.
        # 
        # **Self-managed database**\
        # 
        # *   **OTHER**: self-managed database with a public IP address.
        # *   **ECS**: self-managed database hosted on an ECS instance.
        # *   **EXPRESS**: self-managed database connected over Express Connect.
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN).
        # *   **DG**: self-managed database connected over Database Gateway.
        # 
        # > 
        # 
        # *   If the destination instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, you must connect the cluster to DTS as a self-managed database by using a public IP address or Express Connect and set this parameter to **OTHER** or **EXPRESS**.
        # *   If the destination instance is an ApsaraMQ for Kafka instance, you must connect the instance to DTS as a self-managed database by using ECS or Express Connect and set this parameter to **ECS** or **EXPRESS**.
        # *   For more information, see [Supported source and destination databases](https://help.aliyun.com/document_detail/176064.html).
        # *   If the destination instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](https://help.aliyun.com/document_detail/146958.html).
        # 
        # This parameter is required.
        self.destination_endpoint_instance_type = destination_endpoint_instance_type
        # The SID of the Oracle database.
        # 
        # > This parameter is valid and required only if **DestinationEndpointEngineName** is set to **ORACLE** and the **Oracle** database is deployed in a non-RAC architecture.
        self.destination_endpoint_oracle_sid = destination_endpoint_oracle_sid
        # The ID of the Alibaba Cloud account to which the destination ApsaraDB RDS for MySQL instance belongs.
        # 
        # > 
        # 
        # *   This parameter is available only if the destination instance is an ApsaraDB RDS for MySQL instance.
        # *   You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify **DestinationEndpointRole**.
        self.destination_endpoint_owner_id = destination_endpoint_owner_id
        # The password of the account that is used to log on to the destination database.
        # 
        # > If the destination database is a MaxCompute project, you must specify the AccessKey secret of your Alibaba Cloud account. For information about how to obtain an AccessKey pair, see [Create an AccessKey pair](https://help.aliyun.com/document_detail/116401.html).
        self.destination_endpoint_password = destination_endpoint_password
        # The port number of the destination instance.
        # 
        # > This parameter is valid and required only if the destination instance is a self-managed database.
        self.destination_endpoint_port = destination_endpoint_port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # > If the destination instance is an Alibaba Cloud database instance, this parameter is required.
        self.destination_endpoint_region = destination_endpoint_region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        # 
        # > This parameter is required if you migrate or synchronize data across Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account DTS tasks](https://help.aliyun.com/document_detail/48468.html).
        self.destination_endpoint_role = destination_endpoint_role
        # The username of the account that is used to log on to the destination database.
        # 
        # > 
        # 
        # *   In most cases, this parameter is required.
        # *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](https://help.aliyun.com/document_detail/175878.html) or [Prepare the database accounts for data synchronization](https://help.aliyun.com/document_detail/213152.html).
        # *   If the destination database is a MaxCompute project, you must specify the AccessKey ID of your Alibaba Cloud account. For information about how to obtain an AccessKey pair, see [Create an AccessKey pair](https://help.aliyun.com/document_detail/116401.html).
        self.destination_endpoint_user_name = destination_endpoint_user_name
        # Specifies whether the instance is a disaster recovery instance. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.disaster_recovery_job = disaster_recovery_job
        # The environment tag of the DTS instance. Valid values:
        # 
        # *   **normal******\
        # *   **online******\
        self.dts_bis_label = dts_bis_label
        # The ID of the data migration or synchronization instance.
        # 
        # > You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration or synchronization task.
        # 
        # > You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The name of the DTS instance.
        # 
        # This parameter is required.
        self.dts_job_name = dts_job_name
        # Specifies whether to monitor task status. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.error_notice = error_notice
        # The mobile phone numbers to which status-related alerts are sent. Separate multiple mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile phone numbers in the Chinese mainland are supported. You can specify up to 10 mobile phone numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phone numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_phone = error_phone
        # The URL of the Object Storage Service (OSS) bucket that stores the files related to the DTS task.
        self.file_oss_url_object = file_oss_url_object
        # The type of the task. Valid values:
        # 
        # *   **MIGRATION**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **CHECK**: data verification task. You must separately purchase a data verification instance.
        # 
        # > If you set this parameter to **MIGRATION** or **SYNC**, you can also enable data verification in the data migration or synchronization task.
        # 
        # This parameter is required.
        self.job_type = job_type
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The minimum number of DTS Units (DUs).
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        self.owner_id = owner_id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to add more configurations of the source or destination instance to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the CEN instance ID. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.reserve = reserve
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the database from which the objects are migrated or synchronized in the source instance.
        # 
        # > This parameter is valid and required only if the source instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, a PostgreSQL database, or a MongoDB database.
        self.source_endpoint_database_name = source_endpoint_database_name
        # The database type of the source instance.
        # 
        # *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database.
        # *   **MARIADB**: ApsaraDB RDS for MariaDB instance.
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **POLARDB_O**: PolarDB for PostgreSQL (Compatible with Oracle) cluster.
        # *   **POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **ORACLE**: self-managed Oracle database.
        # *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database.
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database.
        # *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database.
        # *   **DB2**: self-managed Db2 for LUW database.
        # *   **AS400**: self-managed Db2 for i database.
        # *   **DMSPOLARDB**: DMS logical database.
        # *   **HBASE**: self-managed HBase database.
        # *   **TERADATA**: Teradata database.
        # *   **TiDB**: TiDB database.
        # *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database.
        # 
        # > 
        # 
        # *   Default value: **MYSQL**.
        # *   If this parameter is set to **MONGODB**, you must also specify the architecture type of the MongoDB database in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.source_endpoint_engine_name = source_endpoint_engine_name
        # The IP address of the source instance.
        # 
        # > This parameter is valid and required only if **SourceEndpointInstanceType** is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**.
        self.source_endpoint_ip = source_endpoint_ip
        # The source instance ID.
        # 
        # If the source instance is an Alibaba Cloud database instance, you must specify the database instance ID. For example, if the source instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
        # 
        # If the source instance is a self-managed database, the value of this parameter varies with the value of **SourceEndpointInstanceType**.****\
        # 
        # *   If SourceEndpointInstanceType is set to **ECS**, you must specify the ECS instance ID.
        # *   If SourceEndpointInstanceType is set to **DG**, you must specify the database gateway ID.
        # *   If SourceEndpointInstanceType is set to **EXPRESS** or **CEN**, you must specify the ID of the virtual private cloud (VPC) that is connected to the source instance.
        # 
        # > If SourceEndpointInstanceType is set to **CEN**, you must also specify the ID of the CEN instance in Reserve. For more information, see [Reserve parameter](https://help.aliyun.com/document_detail/273111.html).
        self.source_endpoint_instance_id = source_endpoint_instance_id
        # The type of the source instance. Valid values:
        # 
        # **Alibaba Cloud database instance**\
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **REDIS**: ApsaraDB for Redis instance.
        # *   **DISTRIBUTED_POLARDBX10**: PolarDB-X 1.0 instance (formerly DRDS).
        # *   **POLARDBX20**: PolarDB-X 2.0 instance.
        # *   **MONGODB**: ApsaraDB for MongoDB instance.
        # *   **DISTRIBUTED_DMSLOGICDB**: Data Management (DMS) logical database
        # 
        # **Self-managed database**\
        # 
        # *   **OTHER**: self-managed database with a public IP address.
        # *   **ECS**: self-managed database hosted on an ECS instance.
        # *   **EXPRESS**: self-managed database connected over Express Connect.
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN).
        # *   **DG**: self-managed database connected over Database Gateway.
        # 
        # > 
        # 
        # *   If the source instance is a PolarDB for PostgreSQL (Compatible with Oracle) cluster, you must connect the cluster to DTS as a self-managed database by using a public IP address or Express Connect and set this parameter to **OTHER** or **EXPRESS**.
        # *   For more information, see [Supported sources and targets](https://help.aliyun.com/document_detail/176064.html).
        # *   If the source instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](https://help.aliyun.com/document_detail/146958.html).
        # 
        # This parameter is required.
        self.source_endpoint_instance_type = source_endpoint_instance_type
        # The SID of the Oracle database.
        # 
        # > This parameter is valid and required only if **SourceEndpointEngineName** is set to **ORACLE** and the **Oracle** database is deployed in a non-Real Application Cluster (RAC) architecture.
        self.source_endpoint_oracle_sid = source_endpoint_oracle_sid
        # The ID of the Alibaba Cloud account to which the source database belongs.
        # 
        # > You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify **SourceEndpointRole**.
        self.source_endpoint_owner_id = source_endpoint_owner_id
        # The password of the account that is used to log on to the source database.
        self.source_endpoint_password = source_endpoint_password
        # The port number of the source instance.
        # 
        # > This parameter is required only if the source instance is a self-managed database.
        self.source_endpoint_port = source_endpoint_port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # > If the source instance is an Alibaba Cloud database instance, this parameter is required.
        self.source_endpoint_region = source_endpoint_region
        # The name of the Resource Access Management (RAM) role configured for the Alibaba Cloud account to which the source instance belongs.
        # 
        # > This parameter is required if you migrate or synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account DTS tasks](https://help.aliyun.com/document_detail/48468.html).
        self.source_endpoint_role = source_endpoint_role
        # The username of the account that is used to log on to the source database.
        # 
        # > 
        # 
        # *   In most cases, this parameter is required.
        # *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](https://help.aliyun.com/document_detail/175878.html) or [Prepare the database accounts for data synchronization](https://help.aliyun.com/document_detail/213152.html).
        self.source_endpoint_user_name = source_endpoint_user_name
        # The ID of the vSwitch that is used for data shipping.
        self.source_endpoint_vswitch_id = source_endpoint_vswitch_id
        # The path of the certificate authority (CA) certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_oss_url = src_ca_certificate_oss_url
        # The key of the CA certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_password = src_ca_certificate_password
        # The path to the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_cert_oss_url = src_client_cert_oss_url
        # The path to the private key of the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_key_oss_url = src_client_key_oss_url
        # The password of the private key of the client certificate that is used if the connection to the source database is encrypted by using SSL.
        # 
        # > This feature is not supported. Do not specify this parameter.
        self.src_client_password = src_client_password
        # VPCNAT source end main VSW
        self.src_primary_vsw_id = src_primary_vsw_id
        # VPCNAT source backup VSW
        self.src_secondary_vsw_id = src_secondary_vsw_id
        # Specifies whether to perform schema migration or schema synchronization. Valid values:
        # 
        # *   **true** (default)
        # *   **false**\
        # 
        # > If **JobType** is set to **CHECK**, set this parameter to **false**.
        # 
        # This parameter is required.
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization task is two-way synchronization.
        self.synchronization_direction = synchronization_direction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.data_check_configure is not None:
            result['DataCheckConfigure'] = self.data_check_configure
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay_notice is not None:
            result['DelayNotice'] = self.delay_notice
        if self.delay_phone is not None:
            result['DelayPhone'] = self.delay_phone
        if self.delay_rule_time is not None:
            result['DelayRuleTime'] = self.delay_rule_time
        if self.dest_ca_certificate_oss_url is not None:
            result['DestCaCertificateOssUrl'] = self.dest_ca_certificate_oss_url
        if self.dest_ca_certificate_password is not None:
            result['DestCaCertificatePassword'] = self.dest_ca_certificate_password
        if self.dest_client_cert_oss_url is not None:
            result['DestClientCertOssUrl'] = self.dest_client_cert_oss_url
        if self.dest_client_key_oss_url is not None:
            result['DestClientKeyOssUrl'] = self.dest_client_key_oss_url
        if self.dest_client_password is not None:
            result['DestClientPassword'] = self.dest_client_password
        if self.dest_primary_vsw_id is not None:
            result['DestPrimaryVswId'] = self.dest_primary_vsw_id
        if self.dest_secondary_vsw_id is not None:
            result['DestSecondaryVswId'] = self.dest_secondary_vsw_id
        if self.destination_endpoint_data_base_name is not None:
            result['DestinationEndpointDataBaseName'] = self.destination_endpoint_data_base_name
        if self.destination_endpoint_engine_name is not None:
            result['DestinationEndpointEngineName'] = self.destination_endpoint_engine_name
        if self.destination_endpoint_ip is not None:
            result['DestinationEndpointIP'] = self.destination_endpoint_ip
        if self.destination_endpoint_instance_id is not None:
            result['DestinationEndpointInstanceID'] = self.destination_endpoint_instance_id
        if self.destination_endpoint_instance_type is not None:
            result['DestinationEndpointInstanceType'] = self.destination_endpoint_instance_type
        if self.destination_endpoint_oracle_sid is not None:
            result['DestinationEndpointOracleSID'] = self.destination_endpoint_oracle_sid
        if self.destination_endpoint_owner_id is not None:
            result['DestinationEndpointOwnerID'] = self.destination_endpoint_owner_id
        if self.destination_endpoint_password is not None:
            result['DestinationEndpointPassword'] = self.destination_endpoint_password
        if self.destination_endpoint_port is not None:
            result['DestinationEndpointPort'] = self.destination_endpoint_port
        if self.destination_endpoint_region is not None:
            result['DestinationEndpointRegion'] = self.destination_endpoint_region
        if self.destination_endpoint_role is not None:
            result['DestinationEndpointRole'] = self.destination_endpoint_role
        if self.destination_endpoint_user_name is not None:
            result['DestinationEndpointUserName'] = self.destination_endpoint_user_name
        if self.disaster_recovery_job is not None:
            result['DisasterRecoveryJob'] = self.disaster_recovery_job
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.error_notice is not None:
            result['ErrorNotice'] = self.error_notice
        if self.error_phone is not None:
            result['ErrorPhone'] = self.error_phone
        if self.file_oss_url_object is not None:
            result['FileOssUrl'] = self.file_oss_url_object
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserve is not None:
            result['Reserve'] = self.reserve
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_database_name is not None:
            result['SourceEndpointDatabaseName'] = self.source_endpoint_database_name
        if self.source_endpoint_engine_name is not None:
            result['SourceEndpointEngineName'] = self.source_endpoint_engine_name
        if self.source_endpoint_ip is not None:
            result['SourceEndpointIP'] = self.source_endpoint_ip
        if self.source_endpoint_instance_id is not None:
            result['SourceEndpointInstanceID'] = self.source_endpoint_instance_id
        if self.source_endpoint_instance_type is not None:
            result['SourceEndpointInstanceType'] = self.source_endpoint_instance_type
        if self.source_endpoint_oracle_sid is not None:
            result['SourceEndpointOracleSID'] = self.source_endpoint_oracle_sid
        if self.source_endpoint_owner_id is not None:
            result['SourceEndpointOwnerID'] = self.source_endpoint_owner_id
        if self.source_endpoint_password is not None:
            result['SourceEndpointPassword'] = self.source_endpoint_password
        if self.source_endpoint_port is not None:
            result['SourceEndpointPort'] = self.source_endpoint_port
        if self.source_endpoint_region is not None:
            result['SourceEndpointRegion'] = self.source_endpoint_region
        if self.source_endpoint_role is not None:
            result['SourceEndpointRole'] = self.source_endpoint_role
        if self.source_endpoint_user_name is not None:
            result['SourceEndpointUserName'] = self.source_endpoint_user_name
        if self.source_endpoint_vswitch_id is not None:
            result['SourceEndpointVSwitchID'] = self.source_endpoint_vswitch_id
        if self.src_ca_certificate_oss_url is not None:
            result['SrcCaCertificateOssUrl'] = self.src_ca_certificate_oss_url
        if self.src_ca_certificate_password is not None:
            result['SrcCaCertificatePassword'] = self.src_ca_certificate_password
        if self.src_client_cert_oss_url is not None:
            result['SrcClientCertOssUrl'] = self.src_client_cert_oss_url
        if self.src_client_key_oss_url is not None:
            result['SrcClientKeyOssUrl'] = self.src_client_key_oss_url
        if self.src_client_password is not None:
            result['SrcClientPassword'] = self.src_client_password
        if self.src_primary_vsw_id is not None:
            result['SrcPrimaryVswId'] = self.src_primary_vsw_id
        if self.src_secondary_vsw_id is not None:
            result['SrcSecondaryVswId'] = self.src_secondary_vsw_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DataCheckConfigure') is not None:
            self.data_check_configure = m.get('DataCheckConfigure')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DelayNotice') is not None:
            self.delay_notice = m.get('DelayNotice')
        if m.get('DelayPhone') is not None:
            self.delay_phone = m.get('DelayPhone')
        if m.get('DelayRuleTime') is not None:
            self.delay_rule_time = m.get('DelayRuleTime')
        if m.get('DestCaCertificateOssUrl') is not None:
            self.dest_ca_certificate_oss_url = m.get('DestCaCertificateOssUrl')
        if m.get('DestCaCertificatePassword') is not None:
            self.dest_ca_certificate_password = m.get('DestCaCertificatePassword')
        if m.get('DestClientCertOssUrl') is not None:
            self.dest_client_cert_oss_url = m.get('DestClientCertOssUrl')
        if m.get('DestClientKeyOssUrl') is not None:
            self.dest_client_key_oss_url = m.get('DestClientKeyOssUrl')
        if m.get('DestClientPassword') is not None:
            self.dest_client_password = m.get('DestClientPassword')
        if m.get('DestPrimaryVswId') is not None:
            self.dest_primary_vsw_id = m.get('DestPrimaryVswId')
        if m.get('DestSecondaryVswId') is not None:
            self.dest_secondary_vsw_id = m.get('DestSecondaryVswId')
        if m.get('DestinationEndpointDataBaseName') is not None:
            self.destination_endpoint_data_base_name = m.get('DestinationEndpointDataBaseName')
        if m.get('DestinationEndpointEngineName') is not None:
            self.destination_endpoint_engine_name = m.get('DestinationEndpointEngineName')
        if m.get('DestinationEndpointIP') is not None:
            self.destination_endpoint_ip = m.get('DestinationEndpointIP')
        if m.get('DestinationEndpointInstanceID') is not None:
            self.destination_endpoint_instance_id = m.get('DestinationEndpointInstanceID')
        if m.get('DestinationEndpointInstanceType') is not None:
            self.destination_endpoint_instance_type = m.get('DestinationEndpointInstanceType')
        if m.get('DestinationEndpointOracleSID') is not None:
            self.destination_endpoint_oracle_sid = m.get('DestinationEndpointOracleSID')
        if m.get('DestinationEndpointOwnerID') is not None:
            self.destination_endpoint_owner_id = m.get('DestinationEndpointOwnerID')
        if m.get('DestinationEndpointPassword') is not None:
            self.destination_endpoint_password = m.get('DestinationEndpointPassword')
        if m.get('DestinationEndpointPort') is not None:
            self.destination_endpoint_port = m.get('DestinationEndpointPort')
        if m.get('DestinationEndpointRegion') is not None:
            self.destination_endpoint_region = m.get('DestinationEndpointRegion')
        if m.get('DestinationEndpointRole') is not None:
            self.destination_endpoint_role = m.get('DestinationEndpointRole')
        if m.get('DestinationEndpointUserName') is not None:
            self.destination_endpoint_user_name = m.get('DestinationEndpointUserName')
        if m.get('DisasterRecoveryJob') is not None:
            self.disaster_recovery_job = m.get('DisasterRecoveryJob')
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('ErrorNotice') is not None:
            self.error_notice = m.get('ErrorNotice')
        if m.get('ErrorPhone') is not None:
            self.error_phone = m.get('ErrorPhone')
        if m.get('FileOssUrl') is not None:
            self.file_oss_url_object = m.get('FileOssUrl')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserve') is not None:
            self.reserve = m.get('Reserve')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointDatabaseName') is not None:
            self.source_endpoint_database_name = m.get('SourceEndpointDatabaseName')
        if m.get('SourceEndpointEngineName') is not None:
            self.source_endpoint_engine_name = m.get('SourceEndpointEngineName')
        if m.get('SourceEndpointIP') is not None:
            self.source_endpoint_ip = m.get('SourceEndpointIP')
        if m.get('SourceEndpointInstanceID') is not None:
            self.source_endpoint_instance_id = m.get('SourceEndpointInstanceID')
        if m.get('SourceEndpointInstanceType') is not None:
            self.source_endpoint_instance_type = m.get('SourceEndpointInstanceType')
        if m.get('SourceEndpointOracleSID') is not None:
            self.source_endpoint_oracle_sid = m.get('SourceEndpointOracleSID')
        if m.get('SourceEndpointOwnerID') is not None:
            self.source_endpoint_owner_id = m.get('SourceEndpointOwnerID')
        if m.get('SourceEndpointPassword') is not None:
            self.source_endpoint_password = m.get('SourceEndpointPassword')
        if m.get('SourceEndpointPort') is not None:
            self.source_endpoint_port = m.get('SourceEndpointPort')
        if m.get('SourceEndpointRegion') is not None:
            self.source_endpoint_region = m.get('SourceEndpointRegion')
        if m.get('SourceEndpointRole') is not None:
            self.source_endpoint_role = m.get('SourceEndpointRole')
        if m.get('SourceEndpointUserName') is not None:
            self.source_endpoint_user_name = m.get('SourceEndpointUserName')
        if m.get('SourceEndpointVSwitchID') is not None:
            self.source_endpoint_vswitch_id = m.get('SourceEndpointVSwitchID')
        if m.get('SrcCaCertificateOssUrl') is not None:
            self.src_ca_certificate_oss_url = m.get('SrcCaCertificateOssUrl')
        if m.get('SrcCaCertificatePassword') is not None:
            self.src_ca_certificate_password = m.get('SrcCaCertificatePassword')
        if m.get('SrcClientCertOssUrl') is not None:
            self.src_client_cert_oss_url = m.get('SrcClientCertOssUrl')
        if m.get('SrcClientKeyOssUrl') is not None:
            self.src_client_key_oss_url = m.get('SrcClientKeyOssUrl')
        if m.get('SrcClientPassword') is not None:
            self.src_client_password = m.get('SrcClientPassword')
        if m.get('SrcPrimaryVswId') is not None:
            self.src_primary_vsw_id = m.get('SrcPrimaryVswId')
        if m.get('SrcSecondaryVswId') is not None:
            self.src_secondary_vsw_id = m.get('SrcSecondaryVswId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        return self


class ConfigureDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the data migration or synchronization instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration or synchronization task.
        self.dts_job_id = dts_job_id
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The returned HTTP status codes.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureMigrationJobRequestDestinationEndpoint(TeaModel):
    def __init__(
        self,
        data_base_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        oracle_sid: str = None,
        password: str = None,
        port: str = None,
        region: str = None,
        user_name: str = None,
    ):
        # The region ID of the destination database.
        # 
        # >  If the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.data_base_name = data_base_name
        # The authorized RAM role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.
        # 
        # >  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.engine_name = engine_name
        # The ID of the instance that hosts the destination database.
        # 
        # >  You must specify the instance ID only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **MongoDB**, **Redis**, **DRDS**, **PetaData**, **OceanBase**, **POLARDB**, **PolarDB_o**, **AnalyticDB**, or **Greenplum**. For example, if the DestinationEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
        self.ip = ip
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        # 
        # >  You must specify this parameter only when you configure data migration across different Alibaba Cloud accounts.
        self.instance_id = instance_id
        # The password of the source database account.
        # 
        # This parameter is required.
        self.instance_type = instance_type
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.oracle_sid = oracle_sid
        # The service port number of the destination database.
        # 
        # >  You must specify the service port number only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
        self.password = password
        # The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.
        # 
        # >  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.
        self.port = port
        # The instance type of the destination database. Valid values:
        # 
        # *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **RDS**: ApsaraDB RDS instance
        # *   **DRDS**: PolarDB-X instance
        # *   **MongoDB**: ApsaraDB for MongoDB instance
        # *   **Redis**: ApsaraDB for Redis instance
        # *   **PetaData**: HybridDB for MySQL instance
        # *   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
        # *   **PolarDB_o**: PolarDB O Edition cluster
        # *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
        # *   **Greenplum**: AnalyticDB for PostgreSQL instance
        self.region = region
        # The endpoint of the destination database.
        # 
        # >  You must specify the endpoint only if the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_base_name is not None:
            result['DataBaseName'] = self.data_base_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.password is not None:
            result['Password'] = self.password
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataBaseName') is not None:
            self.data_base_name = m.get('DataBaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ConfigureMigrationJobRequestMigrationMode(TeaModel):
    def __init__(
        self,
        data_intialization: bool = None,
        data_synchronization: bool = None,
        structure_intialization: bool = None,
    ):
        # The database account of the destination database.
        # 
        # >  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
        # 
        # This parameter is required.
        self.data_intialization = data_intialization
        # The password of the destination database account.
        # 
        # This parameter is required.
        self.data_synchronization = data_synchronization
        # The name of the destination database or the authentication database.
        # 
        # > 
        # *   You must specify the database name only if the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**.
        # *   If the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.
        # 
        # This parameter is required.
        self.structure_intialization = structure_intialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_intialization is not None:
            result['DataIntialization'] = self.data_intialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_intialization is not None:
            result['StructureIntialization'] = self.structure_intialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataIntialization') is not None:
            self.data_intialization = m.get('DataIntialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureIntialization') is not None:
            self.structure_intialization = m.get('StructureIntialization')
        return self


class ConfigureMigrationJobRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        oracle_sid: str = None,
        owner_id: str = None,
        password: str = None,
        port: str = None,
        region: str = None,
        role: str = None,
        user_name: str = None,
    ):
        # The endpoint of the source database.
        # 
        # >  You must specify the endpoint only if the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.
        self.database_name = database_name
        # The instance type of the source database. Valid values:
        # 
        # *   **RDS**: ApsaraDB RDS instance
        # *   **ECS**: self-managed database that is hosted on ECS
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
        # *   **dg**: self-managed database that is connected over Database Gateway
        # *   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
        # *   **MongoDB**: ApsaraDB for MongoDB instance
        # *   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
        # *   **PolarDB_o**: PolarDB O Edition cluster
        self.engine_name = engine_name
        # rm-bp1i99e8l7913****\
        self.ip = ip
        # dtsl3m1213ye7l****\
        self.instance_id = instance_id
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.instance_type = instance_type
        # The region ID of the source database.
        # 
        # >  If the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.oracle_sid = oracle_sid
        # The name of the source database or the authentication database.
        # 
        # > 
        # *   You must specify the database name only if the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL** or **MongoDB**.
        # *   If the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL**, specify the name of the source database. If the SourceEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.
        self.owner_id = owner_id
        # The system ID (SID) of the Oracle database.
        # 
        # >  You must specify this parameter only if the **SourceEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.
        self.password = password
        # The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.
        # 
        # >  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.
        self.port = port
        # The ID of the instance that hosts the source database.
        # 
        # > 
        # *   You must specify the instance ID only if the **SourceEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **Express**, **MongoDB**, **POLARDB**, or **PolarDB_o**. For example, if the SourceEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
        # *   If the **SourceEndpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the virtual private cloud (VPC).
        self.region = region
        # The database account of the source database.
        # 
        # >  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
        self.role = role
        # The service port number of the source database.
        # 
        # >  You must specify the service port number only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.password is not None:
            result['Password'] = self.password
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role is not None:
            result['Role'] = self.role
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ConfigureMigrationJobRequest(TeaModel):
    def __init__(
        self,
        destination_endpoint: ConfigureMigrationJobRequestDestinationEndpoint = None,
        migration_mode: ConfigureMigrationJobRequestMigrationMode = None,
        source_endpoint: ConfigureMigrationJobRequestSourceEndpoint = None,
        account_id: str = None,
        checkpoint: str = None,
        migration_job_id: str = None,
        migration_job_name: str = None,
        migration_object: str = None,
        migration_reserved: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.destination_endpoint = destination_endpoint
        self.migration_mode = migration_mode
        self.source_endpoint = source_endpoint
        # The objects that you want to migrate. The value is a JSON string and can contain regular expressions.
        # 
        # For more information, see [MigrationObject](https://help.aliyun.com/document_detail/141227.html).
        self.account_id = account_id
        # Specifies whether to perform incremental data migration. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  For more information about databases that support incremental data migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).
        self.checkpoint = checkpoint
        # system
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  The region ID of the data migration instance is the same as that of the destination database.
        # 
        # This parameter is required.
        self.migration_job_name = migration_job_name
        # Specifies whether to perform schema migration. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  For more information about databases that support schema migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).
        # 
        # This parameter is required.
        self.migration_object = migration_object
        # Specifies whether to perform full data migration. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  For more information about databases that support full data migration, see [Supported databases and migration types](https://help.aliyun.com/document_detail/26618.html).
        self.migration_reserved = migration_reserved
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id

    def validate(self):
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.migration_job_name is not None:
            result['MigrationJobName'] = self.migration_job_name
        if self.migration_object is not None:
            result['MigrationObject'] = self.migration_object
        if self.migration_reserved is not None:
            result['MigrationReserved'] = self.migration_reserved
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationEndpoint') is not None:
            temp_model = ConfigureMigrationJobRequestDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('MigrationMode') is not None:
            temp_model = ConfigureMigrationJobRequestMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('SourceEndpoint') is not None:
            temp_model = ConfigureMigrationJobRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('MigrationJobName') is not None:
            self.migration_job_name = m.get('MigrationJobName')
        if m.get('MigrationObject') is not None:
            self.migration_object = m.get('MigrationObject')
        if m.get('MigrationReserved') is not None:
            self.migration_reserved = m.get('MigrationReserved')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ConfigureMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.err_code = err_code
        # The ID of the request.
        self.err_message = err_message
        # The start offset of incremental data migration. The value is a UNIX timestamp. Unit: seconds.
        self.request_id = request_id
        # The SID of the Oracle database.
        # 
        # >  You must specify this parameter only if the **DestinationEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureMigrationJobAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_alert_phone = delay_alert_phone
        # Specifies whether to monitor task latency. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # 
        # *   The default value is **enable**.
        # *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
        self.delay_over_seconds = delay_over_seconds
        # The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_alert_phone = error_alert_phone
        # Specifies whether to monitor task status. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # 
        # *   The default value is **enable**.
        # *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
        # *   If the task that you monitor enters an abnormal state, an alert is triggered.
        self.error_alert_status = error_alert_status
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ConfigureMigrationJobAlertResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureMigrationJobAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureMigrationJobAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureMigrationJobAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSubscriptionRequest(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        db_list: str = None,
        dedicated_cluster_id: str = None,
        delay_notice: bool = None,
        delay_phone: str = None,
        delay_rule_time: int = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        error_notice: bool = None,
        error_phone: str = None,
        max_du: float = None,
        min_du: float = None,
        region_id: str = None,
        reserve: str = None,
        resource_group_id: str = None,
        source_endpoint_database_name: str = None,
        source_endpoint_engine_name: str = None,
        source_endpoint_ip: str = None,
        source_endpoint_instance_id: str = None,
        source_endpoint_instance_type: str = None,
        source_endpoint_oracle_sid: str = None,
        source_endpoint_owner_id: str = None,
        source_endpoint_password: str = None,
        source_endpoint_port: str = None,
        source_endpoint_region: str = None,
        source_endpoint_role: str = None,
        source_endpoint_user_name: str = None,
        src_ca_certificate_oss_url: str = None,
        src_ca_certificate_password: str = None,
        src_client_cert_oss_url: str = None,
        src_client_key_oss_url: str = None,
        src_client_password: str = None,
        subscription_data_type_ddl: bool = None,
        subscription_data_type_dml: bool = None,
        subscription_instance_network_type: str = None,
        subscription_instance_vpcid: str = None,
        subscription_instance_vswitch_id: str = None,
    ):
        # The UNIX timestamp that represents the start time of change tracking. Unit: seconds.
        # 
        # >  You can use a search engine to obtain a UNIX timestamp converter.
        self.checkpoint = checkpoint
        # The objects for which you want to track data changes. The value must be a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        # 
        # This parameter is required.
        self.db_list = db_list
        # The ID of the DTS dedicated cluster on which the change tracking task is scheduled to run.
        self.dedicated_cluster_id = dedicated_cluster_id
        # Specifies whether to monitor the task latency. Valid values:
        # 
        # *   **true**: monitors the task latency.
        # *   **false**: does not monitor the task latency.
        self.delay_notice = delay_notice
        # The mobile numbers to which latency-related alerts are sent. Separate multiple mobile numbers with commas (,).
        # 
        # > 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_phone = delay_phone
        # The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # >  If the **DelayNotice** parameter is set to **true**, this parameter is required.
        self.delay_rule_time = delay_rule_time
        # Environment label of the DTS instance, with values:
        # - **normal**: **general** - **online**: **production**\
        self.dts_bis_label = dts_bis_label
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The name of the change tracking task.
        # 
        # >  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.
        # 
        # This parameter is required.
        self.dts_job_name = dts_job_name
        # Specifies whether to monitor the task status. Valid values:
        # 
        # *   **true**: monitors the task status.
        # *   **false**: does not monitor the task status.
        self.error_notice = error_notice
        # The mobile numbers to which status-related alerts are sent. Separate multiple mobile numbers with commas (,).
        # 
        # > 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
        # *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_phone = error_phone
        # The DU upper limit of the Serverless instance, with values being: 2, 4, 8, 16. 
        # Currently, this feature is not supported, please do not pass in parameters.
        self.max_du = max_du
        # The lower limit of DU for Serverless instances, with values being: 1, 2, 4, 8, 16. 
        # This feature is currently not supported, please do not pass in parameters.
        self.min_du = min_du
        # The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # The reserved parameter of DTS. The value must be a JSON string. You can specify this parameter to add more configurations of the source or destination database to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserve = reserve
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Name of the database to be subscribed.
        self.source_endpoint_database_name = source_endpoint_database_name
        # The engine of the source database. Valid values: **MySQL**, **PostgreSQL**, and **Oracle**.
        # 
        # >  If the source database is a self-managed database, you must specify this parameter.
        self.source_endpoint_engine_name = source_endpoint_engine_name
        # The endpoint of the source database.
        # 
        # >  This parameter is required only when the source database is a self-managed database.
        self.source_endpoint_ip = source_endpoint_ip
        # The ID of the source database.
        # 
        # >  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.
        self.source_endpoint_instance_id = source_endpoint_instance_id
        # The type of the source database. Valid values:
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance
        # *   **PolarDB**: PolarDB for MySQL cluster
        # *   **DRDS**: PolarDB-X 1.0 instance
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
        # *   **Express**: self-managed database connected over Express Connect
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
        # *   **dg**: self-managed database connected over Database Gateway
        self.source_endpoint_instance_type = source_endpoint_instance_type
        # The system ID (SID) of the Oracle database.
        # 
        # >  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.
        self.source_endpoint_oracle_sid = source_endpoint_oracle_sid
        # The ID of the Alibaba Cloud account to which the source database belongs.
        # 
        # >  This parameter is required only when you track data changes across different Alibaba Cloud accounts.
        self.source_endpoint_owner_id = source_endpoint_owner_id
        # The password of the account that is used to connect to the source database.
        self.source_endpoint_password = source_endpoint_password
        # The service port number of the source database.
        # 
        # >  This parameter is required only when the source database is a self-managed database.
        self.source_endpoint_port = source_endpoint_port
        # The ID of the region in which the source database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  If the source database is a self-managed database with a public IP address, you can set the value of this parameter to **cn-hangzhou** or the ID of the region that is closest to the region in which the self-managed database resides.
        self.source_endpoint_region = source_endpoint_region
        # The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.
        # 
        # >  For more information about the permissions that are required for the RAM role and how to grant the permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.source_endpoint_role = source_endpoint_role
        # The username of the account that is used to connect to the source database.
        # 
        # >  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Prepare the source database account for change tracking](https://help.aliyun.com/document_detail/212653.html).
        self.source_endpoint_user_name = source_endpoint_user_name
        # The path of the certificate authority (CA) certificate that is used if the connection to the source database is encrypted by using the SSL protocol.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_oss_url = src_ca_certificate_oss_url
        # The key of the CA certificate that is used if the connection to the source database is encrypted by using the SSL protocol.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.src_ca_certificate_password = src_ca_certificate_password
        # The path to the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.src_client_cert_oss_url = src_client_cert_oss_url
        # The path to the private key of the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.src_client_key_oss_url = src_client_key_oss_url
        # The password of the private key of the client certificate that is used if the connection to the source database is encrypted by using the SSL protocol.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.src_client_password = src_client_password
        # Specifies whether to track DDL statements. Default value: true. Valid values:
        # 
        # *   **true**: tracks DDL statements.
        # *   **false**: does not track DDL statements.
        self.subscription_data_type_ddl = subscription_data_type_ddl
        # Specifies whether to track DML statements. Default value: true. Valid values:
        # 
        # *   **true**: tracks DML statements.
        # *   **false**: does not track DML statements.
        self.subscription_data_type_dml = subscription_data_type_dml
        # The network type of the change tracking task. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.
        # 
        # > 
        # *   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstanceVPCId** and **SubscriptionInstanceVSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
        # *   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.
        # 
        # This parameter is required.
        self.subscription_instance_network_type = subscription_instance_network_type
        # The ID of the VPC in which the change tracking instance is deployed.
        # 
        # >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
        self.subscription_instance_vpcid = subscription_instance_vpcid
        # The ID of the vSwitch in the specified VPC.
        # 
        # >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
        self.subscription_instance_vswitch_id = subscription_instance_vswitch_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay_notice is not None:
            result['DelayNotice'] = self.delay_notice
        if self.delay_phone is not None:
            result['DelayPhone'] = self.delay_phone
        if self.delay_rule_time is not None:
            result['DelayRuleTime'] = self.delay_rule_time
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.error_notice is not None:
            result['ErrorNotice'] = self.error_notice
        if self.error_phone is not None:
            result['ErrorPhone'] = self.error_phone
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserve is not None:
            result['Reserve'] = self.reserve
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_database_name is not None:
            result['SourceEndpointDatabaseName'] = self.source_endpoint_database_name
        if self.source_endpoint_engine_name is not None:
            result['SourceEndpointEngineName'] = self.source_endpoint_engine_name
        if self.source_endpoint_ip is not None:
            result['SourceEndpointIP'] = self.source_endpoint_ip
        if self.source_endpoint_instance_id is not None:
            result['SourceEndpointInstanceID'] = self.source_endpoint_instance_id
        if self.source_endpoint_instance_type is not None:
            result['SourceEndpointInstanceType'] = self.source_endpoint_instance_type
        if self.source_endpoint_oracle_sid is not None:
            result['SourceEndpointOracleSID'] = self.source_endpoint_oracle_sid
        if self.source_endpoint_owner_id is not None:
            result['SourceEndpointOwnerID'] = self.source_endpoint_owner_id
        if self.source_endpoint_password is not None:
            result['SourceEndpointPassword'] = self.source_endpoint_password
        if self.source_endpoint_port is not None:
            result['SourceEndpointPort'] = self.source_endpoint_port
        if self.source_endpoint_region is not None:
            result['SourceEndpointRegion'] = self.source_endpoint_region
        if self.source_endpoint_role is not None:
            result['SourceEndpointRole'] = self.source_endpoint_role
        if self.source_endpoint_user_name is not None:
            result['SourceEndpointUserName'] = self.source_endpoint_user_name
        if self.src_ca_certificate_oss_url is not None:
            result['SrcCaCertificateOssUrl'] = self.src_ca_certificate_oss_url
        if self.src_ca_certificate_password is not None:
            result['SrcCaCertificatePassword'] = self.src_ca_certificate_password
        if self.src_client_cert_oss_url is not None:
            result['SrcClientCertOssUrl'] = self.src_client_cert_oss_url
        if self.src_client_key_oss_url is not None:
            result['SrcClientKeyOssUrl'] = self.src_client_key_oss_url
        if self.src_client_password is not None:
            result['SrcClientPassword'] = self.src_client_password
        if self.subscription_data_type_ddl is not None:
            result['SubscriptionDataTypeDDL'] = self.subscription_data_type_ddl
        if self.subscription_data_type_dml is not None:
            result['SubscriptionDataTypeDML'] = self.subscription_data_type_dml
        if self.subscription_instance_network_type is not None:
            result['SubscriptionInstanceNetworkType'] = self.subscription_instance_network_type
        if self.subscription_instance_vpcid is not None:
            result['SubscriptionInstanceVPCId'] = self.subscription_instance_vpcid
        if self.subscription_instance_vswitch_id is not None:
            result['SubscriptionInstanceVSwitchId'] = self.subscription_instance_vswitch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DelayNotice') is not None:
            self.delay_notice = m.get('DelayNotice')
        if m.get('DelayPhone') is not None:
            self.delay_phone = m.get('DelayPhone')
        if m.get('DelayRuleTime') is not None:
            self.delay_rule_time = m.get('DelayRuleTime')
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('ErrorNotice') is not None:
            self.error_notice = m.get('ErrorNotice')
        if m.get('ErrorPhone') is not None:
            self.error_phone = m.get('ErrorPhone')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserve') is not None:
            self.reserve = m.get('Reserve')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointDatabaseName') is not None:
            self.source_endpoint_database_name = m.get('SourceEndpointDatabaseName')
        if m.get('SourceEndpointEngineName') is not None:
            self.source_endpoint_engine_name = m.get('SourceEndpointEngineName')
        if m.get('SourceEndpointIP') is not None:
            self.source_endpoint_ip = m.get('SourceEndpointIP')
        if m.get('SourceEndpointInstanceID') is not None:
            self.source_endpoint_instance_id = m.get('SourceEndpointInstanceID')
        if m.get('SourceEndpointInstanceType') is not None:
            self.source_endpoint_instance_type = m.get('SourceEndpointInstanceType')
        if m.get('SourceEndpointOracleSID') is not None:
            self.source_endpoint_oracle_sid = m.get('SourceEndpointOracleSID')
        if m.get('SourceEndpointOwnerID') is not None:
            self.source_endpoint_owner_id = m.get('SourceEndpointOwnerID')
        if m.get('SourceEndpointPassword') is not None:
            self.source_endpoint_password = m.get('SourceEndpointPassword')
        if m.get('SourceEndpointPort') is not None:
            self.source_endpoint_port = m.get('SourceEndpointPort')
        if m.get('SourceEndpointRegion') is not None:
            self.source_endpoint_region = m.get('SourceEndpointRegion')
        if m.get('SourceEndpointRole') is not None:
            self.source_endpoint_role = m.get('SourceEndpointRole')
        if m.get('SourceEndpointUserName') is not None:
            self.source_endpoint_user_name = m.get('SourceEndpointUserName')
        if m.get('SrcCaCertificateOssUrl') is not None:
            self.src_ca_certificate_oss_url = m.get('SrcCaCertificateOssUrl')
        if m.get('SrcCaCertificatePassword') is not None:
            self.src_ca_certificate_password = m.get('SrcCaCertificatePassword')
        if m.get('SrcClientCertOssUrl') is not None:
            self.src_client_cert_oss_url = m.get('SrcClientCertOssUrl')
        if m.get('SrcClientKeyOssUrl') is not None:
            self.src_client_key_oss_url = m.get('SrcClientKeyOssUrl')
        if m.get('SrcClientPassword') is not None:
            self.src_client_password = m.get('SrcClientPassword')
        if m.get('SubscriptionDataTypeDDL') is not None:
            self.subscription_data_type_ddl = m.get('SubscriptionDataTypeDDL')
        if m.get('SubscriptionDataTypeDML') is not None:
            self.subscription_data_type_dml = m.get('SubscriptionDataTypeDML')
        if m.get('SubscriptionInstanceNetworkType') is not None:
            self.subscription_instance_network_type = m.get('SubscriptionInstanceNetworkType')
        if m.get('SubscriptionInstanceVPCId') is not None:
            self.subscription_instance_vpcid = m.get('SubscriptionInstanceVPCId')
        if m.get('SubscriptionInstanceVSwitchId') is not None:
            self.subscription_instance_vswitch_id = m.get('SubscriptionInstanceVSwitchId')
        return self


class ConfigureSubscriptionResponseBody(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task.
        self.dts_job_id = dts_job_id
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSubscriptionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSubscriptionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSubscriptionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSubscriptionInstanceRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        oracle_sid: str = None,
        owner_id: str = None,
        password: str = None,
        port: str = None,
        role: str = None,
        user_name: str = None,
    ):
        # The name of the source database.
        self.database_name = database_name
        # The endpoint of the source database.
        # 
        # > This parameter is available and required only if the source database is a self-managed database.
        self.ip = ip
        # The ID of the source instance.
        # 
        # > This parameter is available and required only if the source instance is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.
        self.instance_id = instance_id
        # The type of the source instance. Valid values:
        # 
        # *   **RDS**: ApsaraDB RDS for MySQL instance
        # *   **PolarDB**: PolarDB for MySQL cluster.
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
        # *   **Express**: self-managed database connected over Express Connect
        # *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
        # *   **dg**: self-managed database connected over Database Gateway
        # 
        # > The engine of a self-managed database can be MySQL or Oracle. You must specify the engine type when you call the [CreateSubscriptionInstance](https://help.aliyun.com/document_detail/49436.html) operation.
        self.instance_type = instance_type
        # The system ID (SID) of the Oracle database.
        # 
        # > This parameter is available and required only if the source database is a self-managed Oracle database and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The ID of the Alibaba Cloud account to which the source database belongs.
        # 
        # > This parameter is available and required only if you track data changes across different Alibaba Cloud accounts.
        self.owner_id = owner_id
        # The password of the account that is used to connect to the source database.
        self.password = password
        # The service port number of the source database.
        # 
        # > This parameter is available and required only if the source database is a self-managed database.
        self.port = port
        # The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.
        # 
        # > For more information about the permissions that are required for the RAM role and how to grant permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.role = role
        # The username of the account that is used to connect to the source database.
        # 
        # > The permissions that are required for the database account vary based on change tracking scenarios. For more information, see [Overview of change tracking scenarios](https://help.aliyun.com/document_detail/145715.html).
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.password is not None:
            result['Password'] = self.password
        if self.port is not None:
            result['Port'] = self.port
        if self.role is not None:
            result['Role'] = self.role
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ConfigureSubscriptionInstanceRequestSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Specifies whether to track DDL statements. Default value: true. Valid values:
        # 
        # *   **true**: tracks DDL statements.
        # *   **false**: does not track DDL statements.
        # 
        # This parameter is required.
        self.ddl = ddl
        # Specifies whether to track DML statements. Default value: true. Valid values:
        # 
        # *   **true**: tracks DML statements.
        # *   **false**: does not track DML statements.
        # 
        # This parameter is required.
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['DDL'] = self.ddl
        if self.dml is not None:
            result['DML'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DDL') is not None:
            self.ddl = m.get('DDL')
        if m.get('DML') is not None:
            self.dml = m.get('DML')
        return self


class ConfigureSubscriptionInstanceRequestSubscriptionInstance(TeaModel):
    def __init__(
        self,
        vpcid: str = None,
        v_switch_id: str = None,
    ):
        # The ID of the VPC in which the change tracking instance is deployed.
        # 
        # > This parameter is available and required only if the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
        self.vpcid = vpcid
        # The ID of the vSwitch in the specified VPC.
        # 
        # > This parameter is available and required only if the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
        self.v_switch_id = v_switch_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.vpcid is not None:
            result['VPCId'] = self.vpcid
        if self.v_switch_id is not None:
            result['VSwitchId'] = self.v_switch_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VPCId') is not None:
            self.vpcid = m.get('VPCId')
        if m.get('VSwitchId') is not None:
            self.v_switch_id = m.get('VSwitchId')
        return self


class ConfigureSubscriptionInstanceRequest(TeaModel):
    def __init__(
        self,
        source_endpoint: ConfigureSubscriptionInstanceRequestSourceEndpoint = None,
        subscription_data_type: ConfigureSubscriptionInstanceRequestSubscriptionDataType = None,
        subscription_instance: ConfigureSubscriptionInstanceRequestSubscriptionInstance = None,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
        subscription_instance_name: str = None,
        subscription_instance_network_type: str = None,
        subscription_object: str = None,
    ):
        self.source_endpoint = source_endpoint
        self.subscription_data_type = subscription_data_type
        self.subscription_instance = subscription_instance
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is about to be discontinued.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # 资源组ID。
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id
        # The name of the change tracking instance.
        # 
        # > We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.
        self.subscription_instance_name = subscription_instance_name
        # The network type of the change tracking instance. Set the value to **vpc**, which specifies the Virtual Private Cloud (VPC) network type.
        # 
        # > 
        # 
        # *   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstance.VPCId** and **SubscriptionInstance.VSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
        # 
        # *   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.
        self.subscription_instance_network_type = subscription_instance_network_type
        # The objects for which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](https://help.aliyun.com/document_detail/141902.html).
        # 
        # This parameter is required.
        self.subscription_object = subscription_object

    def validate(self):
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_instance:
            self.subscription_instance.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_instance is not None:
            result['SubscriptionInstance'] = self.subscription_instance.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        if self.subscription_instance_name is not None:
            result['SubscriptionInstanceName'] = self.subscription_instance_name
        if self.subscription_instance_network_type is not None:
            result['SubscriptionInstanceNetworkType'] = self.subscription_instance_network_type
        if self.subscription_object is not None:
            result['SubscriptionObject'] = self.subscription_object
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SourceEndpoint') is not None:
            temp_model = ConfigureSubscriptionInstanceRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('SubscriptionDataType') is not None:
            temp_model = ConfigureSubscriptionInstanceRequestSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionInstance') is not None:
            temp_model = ConfigureSubscriptionInstanceRequestSubscriptionInstance()
            self.subscription_instance = temp_model.from_map(m['SubscriptionInstance'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        if m.get('SubscriptionInstanceName') is not None:
            self.subscription_instance_name = m.get('SubscriptionInstanceName')
        if m.get('SubscriptionInstanceNetworkType') is not None:
            self.subscription_instance_network_type = m.get('SubscriptionInstanceNetworkType')
        if m.get('SubscriptionObject') is not None:
            self.subscription_object = m.get('SubscriptionObject')
        return self


class ConfigureSubscriptionInstanceResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request fails.
        self.err_code = err_code
        # The error message returned if the request fails.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSubscriptionInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSubscriptionInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSubscriptionInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSubscriptionInstanceAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_alert_phone = delay_alert_phone
        # Specifies whether to monitor task latency. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # *   The default value is **enable**.
        # *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
        self.delay_over_seconds = delay_over_seconds
        # The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_alert_phone = error_alert_phone
        # Specifies whether to monitor task status. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # *   The default value is **enable**.
        # *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
        # *   If the task that you monitor enters an abnormal state, an alert is triggered.
        self.error_alert_status = error_alert_status
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class ConfigureSubscriptionInstanceAlertResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSubscriptionInstanceAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSubscriptionInstanceAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSubscriptionInstanceAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSynchronizationJobRequestDestinationEndpoint(TeaModel):
    def __init__(
        self,
        data_base_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        password: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The name of the database to which the synchronization object in the destination instance belongs.
        self.data_base_name = data_base_name
        # The IP address of the destination database.
        # 
        # >  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **Express**, **dg**, or **cen**.
        self.ip = ip
        # The ID of the destination instance.
        # 
        # >  If the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute** or **DataHub**, you must specify the name of the MaxCompute project or the DataHub project.
        # 
        # If the destination instance is an AnalyticDB for MySQL cluster, specify the ID of the AnalyticDB for MySQL cluster.
        self.instance_id = instance_id
        # The type of the destination instance. Valid values:
        # 
        # *   **Redis**: ApsaraDB for Redis instance
        # *   **RDS**: ApsaraDB RDS instance
        # *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
        # *   **ECS**: self-managed database that is hosted on ECS
        # *   **Express**: self-managed database that is connected over Express Connect
        # *   **DataHub**: DataHub project
        # *   **MaxCompute**: MaxCompute project
        # *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
        # *   **Greenplum**: AnalyticDB for PostgreSQL instance
        # 
        # >  The default value is **RDS**.
        self.instance_type = instance_type
        # The password of the destination database account.
        # 
        # > 
        # *   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.Password parameter.
        self.password = password
        # The service port number of the destination database.
        # 
        # >  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
        self.port = port
        # The database account of the destination database.
        # 
        # > 
        # *   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/140954.html).
        # *   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.UserName parameter.
        # *   If the **DestinationEndpoint.InstanceType** parameter is set to RDS and the database version is MySQL 5.5 or MySQL 5.6, you do not need to specify the DestinationEndpoint.UserName and **DestinationEndpoint.Password** parameters.
        # *   If the **DestinationEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the DestinationEndpoint.UserName parameter.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_base_name is not None:
            result['DataBaseName'] = self.data_base_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.password is not None:
            result['Password'] = self.password
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataBaseName') is not None:
            self.data_base_name = m.get('DataBaseName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ConfigureSynchronizationJobRequestPartitionKey(TeaModel):
    def __init__(
        self,
        modify_time_day: bool = None,
        modify_time_hour: bool = None,
        modify_time_minute: bool = None,
        modify_time_month: bool = None,
        modify_time_year: bool = None,
    ):
        # Specifies whether the incremental data table contains partitions defined by the modifytime_day field. Valid values: **true** and **false**.
        # 
        # >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
        self.modify_time_day = modify_time_day
        # Specifies whether the incremental data table contains partitions defined by the modifytime_hour field. Valid values: **true** and **false**.
        # 
        # >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
        self.modify_time_hour = modify_time_hour
        # Specifies whether the incremental data table contains partitions defined by the modifytime_minute field. Valid values: **true** and **false**.
        # 
        # >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
        self.modify_time_minute = modify_time_minute
        # Specifies whether the incremental data table contains partitions defined by the modifytime_month field. Valid values: **true** and **false**.
        # 
        # >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
        self.modify_time_month = modify_time_month
        # Specifies whether the incremental data table contains partitions defined by the modifytime_year field. Valid values: **true** and **false**.
        # 
        # >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
        self.modify_time_year = modify_time_year

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.modify_time_day is not None:
            result['ModifyTime_Day'] = self.modify_time_day
        if self.modify_time_hour is not None:
            result['ModifyTime_Hour'] = self.modify_time_hour
        if self.modify_time_minute is not None:
            result['ModifyTime_Minute'] = self.modify_time_minute
        if self.modify_time_month is not None:
            result['ModifyTime_Month'] = self.modify_time_month
        if self.modify_time_year is not None:
            result['ModifyTime_Year'] = self.modify_time_year
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ModifyTime_Day') is not None:
            self.modify_time_day = m.get('ModifyTime_Day')
        if m.get('ModifyTime_Hour') is not None:
            self.modify_time_hour = m.get('ModifyTime_Hour')
        if m.get('ModifyTime_Minute') is not None:
            self.modify_time_minute = m.get('ModifyTime_Minute')
        if m.get('ModifyTime_Month') is not None:
            self.modify_time_month = m.get('ModifyTime_Month')
        if m.get('ModifyTime_Year') is not None:
            self.modify_time_year = m.get('ModifyTime_Year')
        return self


class ConfigureSynchronizationJobRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        owner_id: str = None,
        password: str = None,
        port: str = None,
        role: str = None,
        user_name: str = None,
    ):
        # The name of the database to which the synchronization object in the source instance belongs.
        self.database_name = database_name
        # The IP address of the source database.
        # 
        # >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
        self.ip = ip
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance. Valid values:
        # 
        # *   **RDS**: ApsaraDB RDS instance
        # *   **Redis**: ApsaraDB for Redis instance
        # *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
        # *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
        # *   **Express**: self-managed database that is connected over Express Connect
        # *   **dg**: self-managed database that is connected over Database Gateway
        # *   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
        # 
        # >  The default value is **RDS**.
        self.instance_type = instance_type
        # The ID of the Alibaba Cloud account that owns the source RDS instance.
        # 
        # >  You can specify this parameter to synchronize data across different Alibaba Cloud accounts. In this case, you also need to specify the **SourceEndpoint.Role** parameter.
        self.owner_id = owner_id
        # The password of the source database account.
        # 
        # >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
        self.password = password
        # The service port number of the source database.
        # 
        # >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
        self.port = port
        # The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.
        # 
        # >  You must specify this parameter when you synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.role = role
        # The database account of the source database.
        # 
        # > 
        # *   You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
        # *   If the **SourceEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the database account.
        # *   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/140954.html).
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.password is not None:
            result['Password'] = self.password
        if self.port is not None:
            result['Port'] = self.port
        if self.role is not None:
            result['Role'] = self.role
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class ConfigureSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        destination_endpoint: ConfigureSynchronizationJobRequestDestinationEndpoint = None,
        partition_key: ConfigureSynchronizationJobRequestPartitionKey = None,
        source_endpoint: ConfigureSynchronizationJobRequestSourceEndpoint = None,
        account_id: str = None,
        checkpoint: str = None,
        data_initialization: bool = None,
        migration_reserved: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
        synchronization_job_name: str = None,
        synchronization_objects: str = None,
    ):
        self.destination_endpoint = destination_endpoint
        self.partition_key = partition_key
        self.source_endpoint = source_endpoint
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The synchronization checkpoint.
        self.checkpoint = checkpoint
        # Specifies whether to perform initial full data synchronization. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  Default value: **true**.
        # 
        # This parameter is required.
        self.data_initialization = data_initialization
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        # 
        # >  This parameter can be used for data synchronization between ApsaraDB for Redis Enterprise Edition instances. For more information, see [Use OpenAPI Explorer to configure one-way or two-way data synchronization between ApsaraDB for Redis Enterprise Edition instances](https://help.aliyun.com/document_detail/155967.html).
        self.migration_reserved = migration_reserved
        self.owner_id = owner_id
        self.region_id = region_id
        # 资源组ID。
        self.resource_group_id = resource_group_id
        # Specifies whether to perform initial schema synchronization. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  Default value: **true**.
        # 
        # This parameter is required.
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id
        # The name of the data synchronization task.
        # 
        # >  We recommend that you specify an informative name for easy identification. You do not need to use a unique task name.
        self.synchronization_job_name = synchronization_job_name
        # The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see [SynchronizationObjects](https://help.aliyun.com/document_detail/141901.html).
        # 
        # This parameter is required.
        self.synchronization_objects = synchronization_objects

    def validate(self):
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.partition_key:
            self.partition_key.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.partition_key is not None:
            result['PartitionKey'] = self.partition_key.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.migration_reserved is not None:
            result['MigrationReserved'] = self.migration_reserved
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_job_name is not None:
            result['SynchronizationJobName'] = self.synchronization_job_name
        if self.synchronization_objects is not None:
            result['SynchronizationObjects'] = self.synchronization_objects
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationEndpoint') is not None:
            temp_model = ConfigureSynchronizationJobRequestDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('PartitionKey') is not None:
            temp_model = ConfigureSynchronizationJobRequestPartitionKey()
            self.partition_key = temp_model.from_map(m['PartitionKey'])
        if m.get('SourceEndpoint') is not None:
            temp_model = ConfigureSynchronizationJobRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('MigrationReserved') is not None:
            self.migration_reserved = m.get('MigrationReserved')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationJobName') is not None:
            self.synchronization_job_name = m.get('SynchronizationJobName')
        if m.get('SynchronizationObjects') is not None:
            self.synchronization_objects = m.get('SynchronizationObjects')
        return self


class ConfigureSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSynchronizationJobAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.delay_alert_phone = delay_alert_phone
        # Specifies whether to monitor task latency. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # 
        # *   The default value is **enable**.
        # *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
        # 
        # >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
        self.delay_over_seconds = delay_over_seconds
        # The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
        # *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](https://help.aliyun.com/document_detail/175876.html).
        self.error_alert_phone = error_alert_phone
        # Specifies whether to monitor task status. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        # 
        # > 
        # 
        # *   The default value is **enable**.
        # *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
        # *   If the task that you monitor enters an abnormal state, an alert is triggered.
        self.error_alert_status = error_alert_status
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # >  Default value: **Forward**.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class ConfigureSynchronizationJobAlertResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSynchronizationJobAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSynchronizationJobAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSynchronizationJobAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConfigureSynchronizationJobReplicatorCompareRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
        synchronization_replicator_compare_enable: bool = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id
        # Specifies whether to enable image matching. Valid values:
        # 
        # *   **true**: enables image matching
        # *   **false**: disables image matching
        self.synchronization_replicator_compare_enable = synchronization_replicator_compare_enable

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_replicator_compare_enable is not None:
            result['SynchronizationReplicatorCompareEnable'] = self.synchronization_replicator_compare_enable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationReplicatorCompareEnable') is not None:
            self.synchronization_replicator_compare_enable = m.get('SynchronizationReplicatorCompareEnable')
        return self


class ConfigureSynchronizationJobReplicatorCompareResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConfigureSynchronizationJobReplicatorCompareResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConfigureSynchronizationJobReplicatorCompareResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConfigureSynchronizationJobReplicatorCompareResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ConvertInstanceResourceGroupRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        new_resource_group_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: str = None,
        zero_etl_job: bool = None,
    ):
        # This historical parameter does not take effect and is not required.
        self.dts_job_id = dts_job_id
        # The ID of new resource group. You can obtain the ID on the Resource Group page in the Resource Management console. For more information, see [View basic information about a resource group](https://help.aliyun.com/document_detail/151181.html).
        self.new_resource_group_id = new_resource_group_id
        # The ID of the region in which the Data Transmission Service (DTS) instance resides.
        self.region_id = region_id
        # This parameter is only for special services and not required.
        self.resource_group_id = resource_group_id
        # The ID of the DTS instance. You can view the ID in the **ID/Name** column on the task page in the console.
        # 
        # >  This parameter is required.
        self.resource_id = resource_id
        # This parameter is only for special services and not required.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.new_resource_group_id is not None:
            result['NewResourceGroupId'] = self.new_resource_group_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('NewResourceGroupId') is not None:
            self.new_resource_group_id = m.get('NewResourceGroupId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ConvertInstanceResourceGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned by the backend service. The number is incremented.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # >  If **The Value of Input Parameter %s is not valid** is returned and DtsJobId is returned for DynamicMessage, it indicates that the request parameter DtsJobId is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned when the request failed.
        self.err_code = err_code
        # The error message returned when the request failed.
        self.err_message = err_message
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The ID of a request.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ConvertInstanceResourceGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ConvertInstanceResourceGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ConvertInstanceResourceGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CountJobByConditionRequest(TeaModel):
    def __init__(
        self,
        dest_db_type: str = None,
        group_id: str = None,
        job_type: str = None,
        params: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        src_db_type: str = None,
        status: str = None,
        type: str = None,
    ):
        # The type of the destination database.
        self.dest_db_type = dest_db_type
        # The ID of the DTS task.
        self.group_id = group_id
        # The type of the DTS task. Valid values:
        # 
        # *   **MIGRATION**: data migration task
        # *   **SYNC**: data synchronization task
        # *   **SUBSCRIBE**: change tracking task
        self.job_type = job_type
        # The content of the query condition, which corresponds to the value of the JobType parameter.
        self.params = params
        # One of the query conditions. The ID of the region. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region = region
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID, global parameter that does not need to be passed in by the current API.
        self.resource_group_id = resource_group_id
        # The type of the source database.
        self.src_db_type = src_db_type
        # The status of the DTS task.
        # 
        # Valid values for a data migration task:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **NotConfigured**: The task is not configured.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **MigrationFailed**: The task failed to migrate data.
        # *   **Finished**: The task is complete.
        # *   **Retrying**: The task is being retried.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        # 
        # Valid values for a data synchronization task:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **NotConfigured**: The task is not configured.
        # *   **Initializing**: The task is performing initial synchronization.
        # *   **InitializeFailed**: Initial synchronization failed.
        # *   **Synchronizing**: The task is in progress.
        # *   **Failed**: The task failed to synchronize data.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects in the task are being modified.
        # *   **Finished**: The task is complete.
        # *   **Retrying**: The task is being retried.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        # 
        # Valid values for a change tracking task:
        # 
        # *   **NotConfigured**: The task is not configured.
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **Starting**: The task is being started.
        # *   **Normal**: The task is running as expected.
        # *   **Retrying**: The task is being retried.
        # *   **Abnormal**: The task is not running as expected.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        self.status = status
        # The content of the query condition. Valid values:
        # 
        # *   **name**: the name of the task
        # *   **rds**: the ID of the destination instance
        # *   **instance**: the ID of the Data Transmission Service (DTS) instance
        # *   **srcRds**: the ID of the source instance
        # 
        # > The value of this parameter corresponds to the value of the **JobType** parameter.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dest_db_type is not None:
            result['DestDbType'] = self.dest_db_type
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.params is not None:
            result['Params'] = self.params
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.src_db_type is not None:
            result['SrcDbType'] = self.src_db_type
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestDbType') is not None:
            self.dest_db_type = m.get('DestDbType')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SrcDbType') is not None:
            self.src_db_type = m.get('SrcDbType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CountJobByConditionResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # The internal error code. This parameter will be removed soon.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the  **%s** variable in the **ErrMessage** parameter.
        # 
        # > If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The total number of data synchronization instances that meet the requirements and belong to your Alibaba Cloud account.
        self.total_record_count = total_record_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class CountJobByConditionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CountJobByConditionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CountJobByConditionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConsumerChannelRequest(TeaModel):
    def __init__(
        self,
        consumer_group_name: str = None,
        consumer_group_password: str = None,
        consumer_group_user_name: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The name of the consumer group. The name can be up to 128 characters in length. We recommend that you use an informative name for easy identification.
        # 
        # This parameter is required.
        self.consumer_group_name = consumer_group_name
        # The password of the consumer group.
        # 
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_password = consumer_group_password
        # The username of the consumer group.
        # 
        # *   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
        # *   A username cannot exceed 16 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_user_name = consumer_group_user_name
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.
        self.dts_job_id = dts_job_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_password is not None:
            result['ConsumerGroupPassword'] = self.consumer_group_password
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupPassword') is not None:
            self.consumer_group_password = m.get('ConsumerGroupPassword')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateConsumerChannelResponseBody(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the consumer group. You can specify this parameter on a downstream client when you consume tracked data.
        self.consumer_group_id = consumer_group_id
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupID'] = self.consumer_group_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupID') is not None:
            self.consumer_group_id = m.get('ConsumerGroupID')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateConsumerChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateConsumerChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConsumerChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConsumerGroupRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        consumer_group_name: str = None,
        consumer_group_password: str = None,
        consumer_group_user_name: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.
        # 
        # This parameter is required.
        self.consumer_group_name = consumer_group_name
        # The password that corresponds to the username of the consumer group.
        # 
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_password = consumer_group_password
        # The username of the consumer group.
        # 
        # *   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
        # *   A username cannot exceed 16 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_user_name = consumer_group_user_name
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_password is not None:
            result['ConsumerGroupPassword'] = self.consumer_group_password
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupPassword') is not None:
            self.consumer_group_password = m.get('ConsumerGroupPassword')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class CreateConsumerGroupResponseBody(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the consumer group.
        self.consumer_group_id = consumer_group_id
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupID'] = self.consumer_group_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupID') is not None:
            self.consumer_group_id = m.get('ConsumerGroupID')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateConsumerGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateConsumerGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConsumerGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDedicatedClusterMonitorRuleRequest(TeaModel):
    def __init__(
        self,
        cpu_alarm_threshold: int = None,
        dedicated_cluster_id: str = None,
        disk_alarm_threshold: int = None,
        du_alarm_threshold: int = None,
        instance_id: str = None,
        mem_alarm_threshold: int = None,
        notice_switch: int = None,
        owner_id: str = None,
        phones: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The alert threshold for CPU utilization. Unit: percentage.
        self.cpu_alarm_threshold = cpu_alarm_threshold
        # The ID of the cluster.
        # 
        # This parameter is required.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The alert threshold for disk usage. Unit: percentage.
        self.disk_alarm_threshold = disk_alarm_threshold
        # The alert threshold for DTS Unit (DU) usage. Unit: percentage.
        self.du_alarm_threshold = du_alarm_threshold
        # The ID of the instance.
        self.instance_id = instance_id
        # The alert threshold for memory usage. Unit: percentage.
        self.mem_alarm_threshold = mem_alarm_threshold
        # Specifies whether to enable the alert feature. Valid values:
        # 
        # *   **1**: enables the alert feature.
        # *   **0**: disables the alert feature.
        self.notice_switch = notice_switch
        self.owner_id = owner_id
        # The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).
        # 
        # This parameter is required.
        self.phones = phones
        # The ID of the region in which the Data Transmission Service (DTS) instance resides.
        self.region_id = region_id
        # The resource group ID. This parameter is a global parameter and not required.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu_alarm_threshold is not None:
            result['CpuAlarmThreshold'] = self.cpu_alarm_threshold
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.disk_alarm_threshold is not None:
            result['DiskAlarmThreshold'] = self.disk_alarm_threshold
        if self.du_alarm_threshold is not None:
            result['DuAlarmThreshold'] = self.du_alarm_threshold
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.mem_alarm_threshold is not None:
            result['MemAlarmThreshold'] = self.mem_alarm_threshold
        if self.notice_switch is not None:
            result['NoticeSwitch'] = self.notice_switch
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phones is not None:
            result['Phones'] = self.phones
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CpuAlarmThreshold') is not None:
            self.cpu_alarm_threshold = m.get('CpuAlarmThreshold')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DiskAlarmThreshold') is not None:
            self.disk_alarm_threshold = m.get('DiskAlarmThreshold')
        if m.get('DuAlarmThreshold') is not None:
            self.du_alarm_threshold = m.get('DuAlarmThreshold')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MemAlarmThreshold') is not None:
            self.mem_alarm_threshold = m.get('MemAlarmThreshold')
        if m.get('NoticeSwitch') is not None:
            self.notice_switch = m.get('NoticeSwitch')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('Phones') is not None:
            self.phones = m.get('Phones')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateDedicatedClusterMonitorRuleResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDedicatedClusterMonitorRuleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDedicatedClusterMonitorRuleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDedicatedClusterMonitorRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDocParserJobRequest(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        file_url: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        result_type: str = None,
    ):
        self.file_name = file_name
        self.file_url = file_url
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.result_type = result_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.result_type is not None:
            result['ResultType'] = self.result_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResultType') is not None:
            self.result_type = m.get('ResultType')
        return self


class CreateDocParserJobAdvanceRequest(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        file_url_object: BinaryIO = None,
        region_id: str = None,
        resource_group_id: str = None,
        result_type: str = None,
    ):
        self.file_name = file_name
        self.file_url_object = file_url_object
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.result_type = result_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_url_object is not None:
            result['FileUrl'] = self.file_url_object
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.result_type is not None:
            result['ResultType'] = self.result_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileUrl') is not None:
            self.file_url_object = m.get('FileUrl')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResultType') is not None:
            self.result_type = m.get('ResultType')
        return self


class CreateDocParserJobResponseBody(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.dts_job_id = dts_job_id
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDocParserJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDocParserJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDocParserJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDtsInstanceRequest(TeaModel):
    def __init__(
        self,
        auto_pay: bool = None,
        auto_start: bool = None,
        compute_unit: int = None,
        database_count: int = None,
        destination_endpoint_engine_name: str = None,
        destination_region: str = None,
        dts_region: str = None,
        du: int = None,
        fee_type: str = None,
        instance_class: str = None,
        job_id: str = None,
        max_du: float = None,
        min_du: float = None,
        pay_type: str = None,
        period: str = None,
        quantity: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        source_endpoint_engine_name: str = None,
        source_region: str = None,
        sync_architecture: str = None,
        type: str = None,
        used_time: int = None,
    ):
        # Specifies whether to automatically renew the DTS instance when it expires. Valid values:
        # 
        # *   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
        # *   **true**: automatically renews the DTS instance when it expires.
        self.auto_pay = auto_pay
        # Specifies whether to automatically start the task after the DTS instance is purchased. Valid values:
        # 
        # *   **false** (default)
        # *   **true**\
        # 
        # >  This parameter can be set to **true** and take effect only if you specify a valid value for **JobId**.
        self.auto_start = auto_start
        # The specification of the extract, transform, and load (ETL) instance. The unit is compute unit (CU). One CU is equal to 1 vCPU and 4 GB of memory. The value of this parameter must be an integer greater than or equal to 2.
        self.compute_unit = compute_unit
        # The number of custom ApsaraDB RDS instances in the PolarDB-X instance. Default value: **1**.
        # 
        # >  This parameter is required only if **SourceEndpointEngineName** is set to **drds**.
        self.database_count = database_count
        # The database engine of the destination instance.
        # 
        # *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
        # *   **PolarDB**: PolarDB for MySQL cluster
        # *   **polardb_o**: PolarDB for Oracle cluster
        # *   **polardb_pg**: PolarDB for PostgreSQL cluster
        # *   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
        # *   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
        # *   **PostgreSQL**: self-managed PostgreSQL database
        # *   **odps**: MaxCompute project
        # *   **oracle**: self-managed Oracle database
        # *   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
        # *   **tidb**: TiDB database
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster
        # *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
        # *   **Greenplum**: AnalyticDB for PostgreSQL instance
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
        # *   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
        # *   **DataHub**: DataHub project
        # *   **DB2**: self-managed Db2 for LUW database
        # *   **as400**: AS/400
        # *   **Tablestore**: Tablestore instance
        # 
        # > 
        # *   The default value is **MySQL**.
        # *   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html) and [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
        # *   You must specify one of this parameter and the **JobId** parameter.
        self.destination_endpoint_engine_name = destination_endpoint_engine_name
        # The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  You must specify one of this parameter and the **JobId** parameter.
        self.destination_region = destination_region
        # The region ID of the DTS instance. Set this parameter to the value of **RegionId**.
        self.dts_region = dts_region
        # The number of DTS units (DUs) that are assigned to a DTS task that is run on a DTS dedicated cluster. Valid values: **1** to **100**.
        # 
        # > 
        # *   The value of this parameter must be within the range of the number of DUs available for the DTS dedicated cluster.
        self.du = du
        # The billing type for a change tracking instance. Valid values: ONLY_CONFIGURATION_FEE and CONFIGURATION_FEE_AND_DATA_FEE. ONLY_CONFIGURATION_FEE: charges only configuration fees. CONFIGURATION_FEE_AND_DATA_FEE: charges configuration fees and data traffic fees.
        self.fee_type = fee_type
        # The instance class.
        # 
        # *   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
        # *   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.
        # 
        # >  For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.instance_class = instance_class
        # The ID of the task. You can call the **ConfigureDtsJob** operation to obtain the task ID from the **DtsJobId** parameter.
        # 
        # >  If this parameter is specified, you do not need to specify the **SourceRegion**, **DestinationRegion**, **Type**, **SourceEndpointEngineName**, or **DestinationEndpointEngineName** parameter. Even if these parameters are specified, the value of the **JobId** parameter takes precedence.
        self.job_id = job_id
        # Upper limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.max_du = max_du
        # Lower limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.min_du = min_du
        # The billing method. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        # 
        # >  This parameter must be specified.
        self.pay_type = pay_type
        # The unit of the subscription duration. Valid values: **Year** and **Month**.
        # 
        # >  You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.
        self.period = period
        # The number of DTS instances that you want to purchase.
        # 
        # >  You can purchase only one DTS instance each time you call this operation.
        self.quantity = quantity
        # The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The ID of the resource group.
        self.resource_group_id = resource_group_id
        # The database engine of the source instance.
        # 
        # *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
        # *   **PolarDB**: PolarDB for MySQL cluster
        # *   **polardb_o**: PolarDB for Oracle cluster
        # *   **polardb_pg**: PolarDB for PostgreSQL cluster
        # *   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
        # *   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
        # *   **PostgreSQL**: self-managed PostgreSQL database
        # *   **odps**: MaxCompute project
        # *   **oracle**: self-managed Oracle database
        # *   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
        # *   **tidb**: TiDB database
        # *   **ADS**: AnalyticDB for MySQL V2.0 cluster
        # *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
        # *   **Greenplum**: AnalyticDB for PostgreSQL instance
        # *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
        # *   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
        # *   **DataHub**: DataHub project
        # *   **DB2**: self-managed Db2 for LUW database
        # *   **as400**: AS/400
        # *   **Tablestore**: Tablestore instance
        # 
        # > 
        # *   The default value is **MySQL**.
        # *   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html) and [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html).
        # *   You must specify one of this parameter and the **JobId** parameter.
        self.source_endpoint_engine_name = source_endpoint_engine_name
        # The ID of the region in which the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  You must specify one of this parameter and the **JobId** parameter.
        self.source_region = source_region
        # The synchronization topology. Valid values:
        # 
        # *   **oneway**: one-way synchronization. This is the default value.
        # *   **bidirectional**: two-way synchronization.
        self.sync_architecture = sync_architecture
        # The type of the DTS instance. Valid values:
        # 
        # *   **MIGRATION**: data migration instance
        # 
        # *   **SYNC**: data synchronization instance
        # 
        # *   **SUBSCRIBE**: change tracking instance
        # 
        # > You must specify one of this parameter and the **JobId** parameter.
        self.type = type
        # The subscription duration.
        # 
        # *   Valid values if **Period** is set to **Month**: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
        # *   Valid values if **Period** is set to **Year**: 1, 2, 3, and 5.
        # 
        # > 
        # 
        # *   This parameter is valid and required only if **PayType** is set to **PrePaid**.
        # 
        # *   You can configure **Period** to specify the unit of the subscription duration.
        self.used_time = used_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_pay is not None:
            result['AutoPay'] = self.auto_pay
        if self.auto_start is not None:
            result['AutoStart'] = self.auto_start
        if self.compute_unit is not None:
            result['ComputeUnit'] = self.compute_unit
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.destination_endpoint_engine_name is not None:
            result['DestinationEndpointEngineName'] = self.destination_endpoint_engine_name
        if self.destination_region is not None:
            result['DestinationRegion'] = self.destination_region
        if self.dts_region is not None:
            result['DtsRegion'] = self.dts_region
        if self.du is not None:
            result['Du'] = self.du
        if self.fee_type is not None:
            result['FeeType'] = self.fee_type
        if self.instance_class is not None:
            result['InstanceClass'] = self.instance_class
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.period is not None:
            result['Period'] = self.period
        if self.quantity is not None:
            result['Quantity'] = self.quantity
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_engine_name is not None:
            result['SourceEndpointEngineName'] = self.source_endpoint_engine_name
        if self.source_region is not None:
            result['SourceRegion'] = self.source_region
        if self.sync_architecture is not None:
            result['SyncArchitecture'] = self.sync_architecture
        if self.type is not None:
            result['Type'] = self.type
        if self.used_time is not None:
            result['UsedTime'] = self.used_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AutoPay') is not None:
            self.auto_pay = m.get('AutoPay')
        if m.get('AutoStart') is not None:
            self.auto_start = m.get('AutoStart')
        if m.get('ComputeUnit') is not None:
            self.compute_unit = m.get('ComputeUnit')
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DestinationEndpointEngineName') is not None:
            self.destination_endpoint_engine_name = m.get('DestinationEndpointEngineName')
        if m.get('DestinationRegion') is not None:
            self.destination_region = m.get('DestinationRegion')
        if m.get('DtsRegion') is not None:
            self.dts_region = m.get('DtsRegion')
        if m.get('Du') is not None:
            self.du = m.get('Du')
        if m.get('FeeType') is not None:
            self.fee_type = m.get('FeeType')
        if m.get('InstanceClass') is not None:
            self.instance_class = m.get('InstanceClass')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Quantity') is not None:
            self.quantity = m.get('Quantity')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointEngineName') is not None:
            self.source_endpoint_engine_name = m.get('SourceEndpointEngineName')
        if m.get('SourceRegion') is not None:
            self.source_region = m.get('SourceRegion')
        if m.get('SyncArchitecture') is not None:
            self.sync_architecture = m.get('SyncArchitecture')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UsedTime') is not None:
            self.used_time = m.get('UsedTime')
        return self


class CreateDtsInstanceResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        instance_id: str = None,
        job_id: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The ID of the DTS instance.
        self.instance_id = instance_id
        # The ID of the task.
        self.job_id = job_id
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDtsInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDtsInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDtsInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobMonitorRuleRequest(TeaModel):
    def __init__(
        self,
        delay_rule_time: int = None,
        dts_job_id: str = None,
        notice_value: int = None,
        period: int = None,
        phone: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        state: str = None,
        times: int = None,
        type: str = None,
    ):
        # The threshold for triggering an alert.
        # 
        # *   If **Type** is set to **delay**, the threshold must be an integer in units of seconds. You can specify the threshold based on your business requirements. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
        # *   If **Type** is set to **full_timeout**, the threshold must be an integer in units of hours.
        # 
        # > This parameter is required if **Type** is set to **delay** or **full_timeout** and **State** is set to **Y**.
        self.delay_rule_time = delay_rule_time
        # The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The alert threshold.
        self.notice_value = notice_value
        # The statistical period of the incremental data verification task. Unit: minutes.
        # 
        # > Valid values: 1, 3, 5, and 30.
        self.period = period
        # The mobile numbers that receive alert notifications. Separate multiple mobile numbers with commas (,).
        # 
        # > 
        # 
        # *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
        # 
        # *   Users of the international site (alibabacloud.com) cannot receive notifications on alerts by using mobile numbers, but can configure alert rules for DTS tasks in the CloudMonitor console. For more information, see [Configure alert rules for DTS tasks in the CloudMonitor console](https://help.aliyun.com/document_detail/175876.html).
        self.phone = phone
        # The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to enable the alert rule. Valid values:
        # 
        # *   **Y**: enables the alert rule.
        # *   **N**: disables the alert rule.
        # 
        # Default value: **Y**.
        self.state = state
        # The number of statistical periods of the incremental data verification task.
        self.times = times
        # The metric that is used to monitor the task. Valid values:
        # 
        # *   **delay**: the **Latency** metric.
        # *   **error**: the **Status** metric.
        # *   **full_timeout**: the **Full Timeout** metric.
        # 
        # Default value: **error**. You must manually set this value.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay_rule_time is not None:
            result['DelayRuleTime'] = self.delay_rule_time
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.notice_value is not None:
            result['NoticeValue'] = self.notice_value
        if self.period is not None:
            result['Period'] = self.period
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.state is not None:
            result['State'] = self.state
        if self.times is not None:
            result['Times'] = self.times
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DelayRuleTime') is not None:
            self.delay_rule_time = m.get('DelayRuleTime')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('NoticeValue') is not None:
            self.notice_value = m.get('NoticeValue')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Times') is not None:
            self.times = m.get('Times')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateJobMonitorRuleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. The value of this parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.
        # 
        # > If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobMonitorRuleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateJobMonitorRuleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobMonitorRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMigrationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        migration_job_class: str = None,
        owner_id: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**.
        # 
        # > 
        # *   For more information about the test performance of each specification, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
        # *   For more information about the pricing of data migration instances, see [Pricing](https://help.aliyun.com/document_detail/117780.html).
        # 
        # This parameter is required.
        self.migration_job_class = migration_job_class
        self.owner_id = owner_id
        # The ID of the region where the data migration instance resides. The region ID of the data migration instance is the same as that of the destination database. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region = region
        # The ID of the region where the data migration instance resides. You do not need to specify this parameter because this parameter will be removed in the future.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_class is not None:
            result['MigrationJobClass'] = self.migration_job_class
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobClass') is not None:
            self.migration_job_class = m.get('MigrationJobClass')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        migration_job_id: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the data migration instance.
        self.migration_job_id = migration_job_id
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateReverseDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        resource_group_id: str = None,
        shard_password: str = None,
        shard_username: str = None,
    ):
        # The ID of the synchronization or migration task, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # Shard Password
        self.shard_password = shard_password
        # Shard User name
        self.shard_username = shard_username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.shard_password is not None:
            result['ShardPassword'] = self.shard_password
        if self.shard_username is not None:
            result['ShardUsername'] = self.shard_username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ShardPassword') is not None:
            self.shard_password = m.get('ShardPassword')
        if m.get('ShardUsername') is not None:
            self.shard_username = m.get('ShardUsername')
        return self


class CreateReverseDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the instance corresponding to the generated reverse task.
        self.dts_instance_id = dts_instance_id
        # The ID of the generated reverse synchronization task.
        self.dts_job_id = dts_job_id
        # Error code returned when the call fails.
        self.err_code = err_code
        # Error message returned when the call fails.
        self.err_message = err_message
        # Status code.
        self.http_status_code = http_status_code
        # Request ID.
        self.request_id = request_id
        # Whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateReverseDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateReverseDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateReverseDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubscriptionInstanceRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        instance_type: str = None,
    ):
        # The type of the source instance. Valid values: **MySQL**, **PolarDB**, **DRDS**, and **Oracle**.
        # 
        # >  Default value: **MySQL**.
        self.instance_type = instance_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class CreateSubscriptionInstanceRequest(TeaModel):
    def __init__(
        self,
        source_endpoint: CreateSubscriptionInstanceRequestSourceEndpoint = None,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        pay_type: str = None,
        period: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        used_time: int = None,
    ):
        self.source_endpoint = source_endpoint
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The billing method of the change tracking instance.
        # 
        # *   **Postpaid**: pay-as-you-go
        # *   **Prepaid**: subscription
        self.pay_type = pay_type
        # The billing cycle of the subscription instance. Valid values:
        # 
        # *   **Year**\
        # *   **Month**\
        # 
        # >  You must specify this parameter only if you set the PayType parameter to **Prepaid**.
        self.period = period
        # The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region = region
        # The region ID of the change tracking instance. You do not need to specify this parameter because this parameter will be removed in the future.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The subscription length.
        # 
        # *   If the billing cycle is **Year**, the value range is **1 to 5**.
        # *   If the billing cycle is **Month**, the value range is **1 to 60**.
        # 
        # >  You must specify this parameter only if you set the PayType parameter to **Prepaid**.
        self.used_time = used_time

    def validate(self):
        if self.source_endpoint:
            self.source_endpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.period is not None:
            result['Period'] = self.period
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.used_time is not None:
            result['UsedTime'] = self.used_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SourceEndpoint') is not None:
            temp_model = CreateSubscriptionInstanceRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('UsedTime') is not None:
            self.used_time = m.get('UsedTime')
        return self


class CreateSubscriptionInstanceResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        subscription_instance_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # The ID of the change tracking instance.
        self.subscription_instance_id = subscription_instance_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSubscriptionInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSubscriptionInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSubscriptionInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSynchronizationJobRequestDestinationEndpoint(TeaModel):
    def __init__(
        self,
        instance_type: str = None,
    ):
        # The instance type of the destination database. Valid values:
        # 
        # *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
        # *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
        # *   **Redis**: Redis database
        # *   **MaxCompute**: MaxCompute project
        # 
        # > 
        # *   Default value: **MySQL**.
        # *   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](https://help.aliyun.com/document_detail/130744.html).
        self.instance_type = instance_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class CreateSynchronizationJobRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        instance_type: str = None,
    ):
        # The instance type of the source database. Valid values:
        # 
        # *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
        # *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
        # *   **Redis**: Redis database
        # *   **DRDS**: PolarDB-X instance V1.0
        # 
        # > 
        # *   Default value: **MySQL**.
        # *   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](https://help.aliyun.com/document_detail/130744.html).
        self.instance_type = instance_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class CreateSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        destination_endpoint: CreateSynchronizationJobRequestDestinationEndpoint = None,
        source_endpoint: CreateSynchronizationJobRequestSourceEndpoint = None,
        account_id: str = None,
        client_token: str = None,
        dbinstance_count: int = None,
        dest_region: str = None,
        owner_id: str = None,
        pay_type: str = None,
        period: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        source_region: str = None,
        synchronization_job_class: str = None,
        topology: str = None,
        used_time: int = None,
        network_type: str = None,
    ):
        self.destination_endpoint = destination_endpoint
        self.source_endpoint = source_endpoint
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # If you set the **SourceEndpoint.InstanceType** parameter to **DRDS**, you must specify the DBInstanceCount parameter. This parameter specifies the number of private RDS instances attached to the source PolarDB-X instance. Default value: **1**.
        self.dbinstance_count = dbinstance_count
        # The ID of the region where the destination database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  If the **SourceRegion** parameter is set to the China (Hong Kong) region or a region outside the Chinese mainland, you must set the DestRegion parameter to the same region ID.
        # 
        # This parameter is required.
        self.dest_region = dest_region
        self.owner_id = owner_id
        # The billing method of the data synchronization instance.
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid** (default value): pay-as-you-go
        # 
        # This parameter is required.
        self.pay_type = pay_type
        # The billing cycle of the subscription instance. Valid values:
        # 
        # *   **Year**\
        # *   **Month**\
        # 
        # >  You must specify this parameter only if you set the PayType parameter to **PrePaid**.
        self.period = period
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # The ID of the region where the source database resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.source_region = source_region
        # The specification of the data synchronization instance. Valid values: **micro**, **small**, **medium**, and **large**.
        # 
        # >  For more information about the test performance of each specification, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        # 
        # This parameter is required.
        self.synchronization_job_class = synchronization_job_class
        # The synchronization topology. Valid values:
        # 
        # *   **oneway**: one-way synchronization
        # *   **bidirectional**: two-way synchronization
        # 
        # > 
        # *   The default value is **oneway**.
        # *   This parameter can be set to **bidirectional** only when the **SourceEndpoint.InstanceType** and **DestinationEndpoint.InstanceType** parameters are set to **MySQL**, **PolarDB**, or **Redis**.
        self.topology = topology
        # The subscription length.
        # 
        # *   If the billing cycle is **Year**, the value range is **1 to 5**.
        # *   If the billing cycle is **Month**, the value range is **1 to 60**.
        # 
        # >  You must specify this parameter only if you set the PayType parameter to **PrePaid**.
        self.used_time = used_time
        # The network type. Valid value: **Intranet**, which indicates virtual private cloud (VPC).
        self.network_type = network_type

    def validate(self):
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.dbinstance_count is not None:
            result['DBInstanceCount'] = self.dbinstance_count
        if self.dest_region is not None:
            result['DestRegion'] = self.dest_region
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.period is not None:
            result['Period'] = self.period
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_region is not None:
            result['SourceRegion'] = self.source_region
        if self.synchronization_job_class is not None:
            result['SynchronizationJobClass'] = self.synchronization_job_class
        if self.topology is not None:
            result['Topology'] = self.topology
        if self.used_time is not None:
            result['UsedTime'] = self.used_time
        if self.network_type is not None:
            result['networkType'] = self.network_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationEndpoint') is not None:
            temp_model = CreateSynchronizationJobRequestDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('SourceEndpoint') is not None:
            temp_model = CreateSynchronizationJobRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DBInstanceCount') is not None:
            self.dbinstance_count = m.get('DBInstanceCount')
        if m.get('DestRegion') is not None:
            self.dest_region = m.get('DestRegion')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceRegion') is not None:
            self.source_region = m.get('SourceRegion')
        if m.get('SynchronizationJobClass') is not None:
            self.synchronization_job_class = m.get('SynchronizationJobClass')
        if m.get('Topology') is not None:
            self.topology = m.get('Topology')
        if m.get('UsedTime') is not None:
            self.used_time = m.get('UsedTime')
        if m.get('networkType') is not None:
            self.network_type = m.get('networkType')
        return self


class CreateSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
        synchronization_job_id: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The ID of the data synchronization instance.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class CreateSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteConsumerChannelRequest(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the consumer group. You can call the [DescribeConsumerChannel](https://help.aliyun.com/document_detail/264169.html) operation to query the consumer group ID.
        # 
        # This parameter is required.
        self.consumer_group_id = consumer_group_id
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_job_id = dts_job_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # The ID of the resource group.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupId'] = self.consumer_group_id
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupId') is not None:
            self.consumer_group_id = m.get('ConsumerGroupId')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DeleteConsumerChannelResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteConsumerChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteConsumerChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteConsumerChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteConsumerGroupRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        consumer_group_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The ID of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the consumer group ID.
        # 
        # This parameter is required.
        self.consumer_group_id = consumer_group_id
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.consumer_group_id is not None:
            result['ConsumerGroupID'] = self.consumer_group_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ConsumerGroupID') is not None:
            self.consumer_group_id = m.get('ConsumerGroupID')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class DeleteConsumerGroupResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteConsumerGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteConsumerGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteConsumerGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        job_type: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The type of the Data Transmission Service (DTS) task. Valid values:
        # 
        # *   **MIGRATION**: data migration task
        # *   **SYNC**: data synchronization task
        # *   **SUBSCRIBE**: change tracking task
        self.job_type = job_type
        # The error code returned if the call failed.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The dynamic error code. This parameter will be removed in the future.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DeleteDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The operation that you want to perform. Set the value to **DeleteDtsJob**.
        self.dynamic_code = dynamic_code
        # The operation that you want to perform. Set the value to **DeleteDtsJob**.
        self.dynamic_message = dynamic_message
        # The error message returned if the call failed.
        self.err_code = err_code
        # The ID of the request.
        self.err_message = err_message
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.http_status_code = http_status_code
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # > 
        # 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.
        self.request_id = request_id
        # The ID of the region in which the data migration or synchronization task resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDtsJobsRequest(TeaModel):
    def __init__(
        self,
        dts_job_ids: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task.
        # 
        # > *   Separate multiple task IDs with commas (,).
        # > *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query task IDs.
        # 
        # This parameter is required.
        self.dts_job_ids = dts_job_ids
        # The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # Is it ZeroETL task
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_ids is not None:
            result['DtsJobIds'] = self.dts_job_ids
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobIds') is not None:
            self.dts_job_ids = m.get('DtsJobIds')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DeleteDtsJobsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed soon.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # > If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteDtsJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDtsJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDtsJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMigrationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DeleteMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSubscriptionInstanceRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class DeleteSubscriptionInstanceResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSubscriptionInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteSubscriptionInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSubscriptionInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # 资源组ID。
        self.resource_group_id = resource_group_id
        # The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DeleteSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeChannelAccountRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        owner_id: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        tags: str = None,
        type: str = None,
    ):
        # This parameter is required.
        self.dts_job_id = dts_job_id
        self.owner_id = owner_id
        self.region = region
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.tags = tags
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.tags is not None:
            result['Tags'] = self.tags
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Tags') is not None:
            self.tags = m.get('Tags')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeChannelAccountResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        password: str = None,
        request_id: str = None,
        success: bool = None,
        username: str = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.password = password
        self.request_id = request_id
        self.success = success
        self.username = username

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.password is not None:
            result['Password'] = self.password
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.username is not None:
            result['Username'] = self.username
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        return self


class DescribeChannelAccountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeChannelAccountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeChannelAccountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeCheckJobsRequest(TeaModel):
    def __init__(
        self,
        check_job_id: str = None,
        check_type: int = None,
        instance_id: str = None,
        job_name: str = None,
        page_number: int = None,
        page_size: int = None,
        resource_group_id: str = None,
    ):
        # Check the task job ID.
        self.check_job_id = check_job_id
        # The type of the check
        # >>1 full quantity, 2 incremental, 3 all
        self.check_type = check_type
        # Data migration instance ID, which can be queried by calling the **describemigrationjobs** API.
        self.instance_id = instance_id
        # The name of the data migration or synchronization job.
        self.job_name = job_name
        # The number of the page to return. The value must be an integer that is greater than **0**. Default value: **1**.
        self.page_number = page_number
        # The number of entries to return on each page.
        self.page_size = page_size
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_job_id is not None:
            result['CheckJobId'] = self.check_job_id
        if self.check_type is not None:
            result['CheckType'] = self.check_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_name is not None:
            result['JobName'] = self.job_name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckJobId') is not None:
            self.check_job_id = m.get('CheckJobId')
        if m.get('CheckType') is not None:
            self.check_type = m.get('CheckType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeCheckJobsResponseBodyCheckJobs(TeaModel):
    def __init__(
        self,
        charge_type: str = None,
        check_point: int = None,
        check_type: int = None,
        diff_count: int = None,
        diff_sum: int = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        finish_count: int = None,
        group_id: str = None,
        instance_class: str = None,
        job_name: str = None,
        job_step_id: str = None,
        parent_job_type: str = None,
        region_id: str = None,
        status: int = None,
        total_count: int = None,
    ):
        # Billing type, return values: - **POSTPAY**: Pay-as-you-go (postpaid). - **PREPAY**: Subscription (prepaid).
        self.charge_type = charge_type
        # checkpoint
        self.check_point = check_point
        # Data validation method, with values:
        # - **1**: Full validation. - **2**: Incremental validation.
        self.check_type = check_type
        # Number of rows with data inconsistency
        self.diff_count = diff_count
        # Synchronization initialization progress, in percentage.
        self.diff_sum = diff_sum
        # Migration, synchronization, or subscription instance ID.
        self.dts_instance_id = dts_instance_id
        # Migration, synchronization, or subscription task ID.
        self.dts_job_id = dts_job_id
        # The number of data rows in the table that have completed validation.
        self.finish_count = finish_count
        # DTS task ID. In most cases, there is no need to set this parameter.
        self.group_id = group_id
        # Instance specification.
        self.instance_class = instance_class
        # Check the name of the task.
        self.job_name = job_name
        # Task ID.
        self.job_step_id = job_step_id
        # This parameter will be deprecated.
        self.parent_job_type = parent_job_type
        # Region ID to which it belongs.
        self.region_id = region_id
        # Check result, return values: -**0**: Check passed -**1**: Check failed
        self.status = status
        # Verify the total number of rows in the data.
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.check_point is not None:
            result['CheckPoint'] = self.check_point
        if self.check_type is not None:
            result['CheckType'] = self.check_type
        if self.diff_count is not None:
            result['DiffCount'] = self.diff_count
        if self.diff_sum is not None:
            result['DiffSum'] = self.diff_sum
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.finish_count is not None:
            result['FinishCount'] = self.finish_count
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_class is not None:
            result['InstanceClass'] = self.instance_class
        if self.job_name is not None:
            result['JobName'] = self.job_name
        if self.job_step_id is not None:
            result['JobStepId'] = self.job_step_id
        if self.parent_job_type is not None:
            result['ParentJobType'] = self.parent_job_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.status is not None:
            result['Status'] = self.status
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('CheckPoint') is not None:
            self.check_point = m.get('CheckPoint')
        if m.get('CheckType') is not None:
            self.check_type = m.get('CheckType')
        if m.get('DiffCount') is not None:
            self.diff_count = m.get('DiffCount')
        if m.get('DiffSum') is not None:
            self.diff_sum = m.get('DiffSum')
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('FinishCount') is not None:
            self.finish_count = m.get('FinishCount')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceClass') is not None:
            self.instance_class = m.get('InstanceClass')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        if m.get('JobStepId') is not None:
            self.job_step_id = m.get('JobStepId')
        if m.get('ParentJobType') is not None:
            self.parent_job_type = m.get('ParentJobType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeCheckJobsResponseBody(TeaModel):
    def __init__(
        self,
        check_jobs: List[DescribeCheckJobsResponseBodyCheckJobs] = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # Item information check.
        self.check_jobs = check_jobs
        # Dynamic error code, this parameter will be deprecated soon.
        self.dynamic_code = dynamic_code
        # Dynamic error message, used to replace the **%s** in the **errmessage** return parameter. If **errmessage** returns **thevalueofinputparameter%sisnotvalid**, and **dynamicmessage** returns *[1,2,3]*, it indicates that the request parameter **dtsjobid** is invalid.
        self.dynamic_message = dynamic_message
        # Error code returned when the call fails.
        self.err_code = err_code
        # Error message returned when the call fails.
        self.err_message = err_message
        # Status code.
        self.http_status_code = http_status_code
        # Current page number.
        self.page_number = page_number
        # The maximum number of records that can be displayed on the current page.
        self.page_record_count = page_record_count
        # Request ID.
        self.request_id = request_id
        # Whether the request was successful.
        self.success = success
        # Total number of records.
        self.total_record_count = total_record_count

    def validate(self):
        if self.check_jobs:
            for k in self.check_jobs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CheckJobs'] = []
        if self.check_jobs is not None:
            for k in self.check_jobs:
                result['CheckJobs'].append(k.to_map() if k else None)
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.check_jobs = []
        if m.get('CheckJobs') is not None:
            for k in m.get('CheckJobs'):
                temp_model = DescribeCheckJobsResponseBodyCheckJobs()
                self.check_jobs.append(temp_model.from_map(k))
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeCheckJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeCheckJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeCheckJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeClusterOperateLogsRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        dedicated_cluster_id: str = None,
        dts_job_id: str = None,
        end_time: int = None,
        owner_id: str = None,
        page_number: int = None,
        page_size: int = None,
        resource_group_id: str = None,
        start_time: int = None,
    ):
        # The ID of the Alibaba Cloud account.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the DTS dedicated cluster on which a DTS task runs.
        # 
        # This parameter is required.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The ID of the data migration or synchronization task.
        self.dts_job_id = dts_job_id
        # The end of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds.
        self.end_time = end_time
        self.owner_id = owner_id
        # The number of the page to return. Specify the parameter to a positive integer that does not exceed the maximum value of the INTEGER data type. Default value: **1**.
        self.page_number = page_number
        # The number of entries to return on each page. Default value: **20**.
        self.page_size = page_size
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The beginning of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds. If you do not specify this parameter, the data within the last seven days is returned by default.
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class DescribeClusterOperateLogsResponseBodyDataPoints(TeaModel):
    def __init__(
        self,
        content: str = None,
        id: str = None,
        log_datetime: int = None,
        new_value: str = None,
        old_value: str = None,
        operation_name: str = None,
        operation_user: str = None,
        success: int = None,
    ):
        # Other description of the operation.
        self.content = content
        # The primary key of the log table.
        self.id = id
        # The time when the operation is recorded. The value is in the UNIX timestamp format. Unit: milliseconds.
        self.log_datetime = log_datetime
        # The value of the parameter after the operation if the operation is an UPDATE operation.
        self.new_value = new_value
        # The value of the parameter before the operation if the operation is an UPDATE operation.
        self.old_value = old_value
        # The type of the operation.
        self.operation_name = operation_name
        # The user who performed the operation.
        self.operation_user = operation_user
        # Indicates whether the request was successful. A value of **1** indicates that the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.id is not None:
            result['Id'] = self.id
        if self.log_datetime is not None:
            result['LogDatetime'] = self.log_datetime
        if self.new_value is not None:
            result['NewValue'] = self.new_value
        if self.old_value is not None:
            result['OldValue'] = self.old_value
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        if self.operation_user is not None:
            result['OperationUser'] = self.operation_user
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LogDatetime') is not None:
            self.log_datetime = m.get('LogDatetime')
        if m.get('NewValue') is not None:
            self.new_value = m.get('NewValue')
        if m.get('OldValue') is not None:
            self.old_value = m.get('OldValue')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        if m.get('OperationUser') is not None:
            self.operation_user = m.get('OperationUser')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeClusterOperateLogsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data_points: List[DescribeClusterOperateLogsResponseBodyDataPoints] = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # The error code returned by the backend service. The number is incremented.
        self.code = code
        # The information about the operation logs.
        self.data_points = data_points
        # The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned.
        self.err_message = err_message
        # The HTTP status code returned for an exception.
        self.http_status_code = http_status_code
        # The page number of the returned page.
        self.page_number = page_number
        # The number of entries returned per page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The total number of records.
        self.total_record_count = total_record_count

    def validate(self):
        if self.data_points:
            for k in self.data_points:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['DataPoints'] = []
        if self.data_points is not None:
            for k in self.data_points:
                result['DataPoints'].append(k.to_map() if k else None)
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data_points = []
        if m.get('DataPoints') is not None:
            for k in m.get('DataPoints'):
                temp_model = DescribeClusterOperateLogsResponseBodyDataPoints()
                self.data_points.append(temp_model.from_map(k))
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeClusterOperateLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeClusterOperateLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeClusterOperateLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeClusterUsedUtilizationRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        dedicated_cluster_id: str = None,
        dts_job_id: str = None,
        env: str = None,
        metric_type: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        security_token: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the cluster. If the **MetricType** parameter is set to **CLUSTER**, enter the ID of the exclusive cluster. Otherwise, set this parameter to a node ID.
        # 
        # This parameter is required.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The ID of the data migration or synchronization task.
        self.dts_job_id = dts_job_id
        # The cluster environment. Default value: **ALIYUN**.
        self.env = env
        # Specifies whether to query the metrics of the cluster or a node. Default value: CLUSTER. Valid values:
        # 
        # *   **CLUSTER**: query the metrics of the cluster.
        # *   **NODE**: query the metrics of a node.
        self.metric_type = metric_type
        self.owner_id = owner_id
        # The ID of the region in which the Data Transmission Service (DTS) instance resides.
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        self.security_token = security_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.env is not None:
            result['Env'] = self.env
        if self.metric_type is not None:
            result['MetricType'] = self.metric_type
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('Env') is not None:
            self.env = m.get('Env')
        if m.get('MetricType') is not None:
            self.metric_type = m.get('MetricType')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        return self


class DescribeClusterUsedUtilizationResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        cpu_total: float = None,
        dedicated_cluster_id: str = None,
        disk_total: float = None,
        disk_used: float = None,
        du_total: int = None,
        du_used: int = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        memory_total: float = None,
        memory_used: float = None,
        memory_used_percentage: float = None,
        request_id: str = None,
        success: bool = None,
        task_running: int = None,
    ):
        # The error code returned by the backend service. The number is incremented.
        self.code = code
        # The CPU utilization of the cluster. Unit: percentage.
        self.cpu_total = cpu_total
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The total disk size of the cluster. Unit: GB.
        self.disk_total = disk_total
        # The disk usage of the cluster. Unit: GB.
        self.disk_used = disk_used
        # The total number of DTS units (DUs).
        self.du_total = du_total
        # The usage of DUs.
        self.du_used = du_used
        # The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The total amount of memory. A value of 0 is temporarily returned.
        self.memory_total = memory_total
        # The memory usage. A value of 0 is temporarily returned.
        self.memory_used = memory_used
        # The memory usage.
        self.memory_used_percentage = memory_used_percentage
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The number of tasks that are in progress.
        self.task_running = task_running

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.cpu_total is not None:
            result['CpuTotal'] = self.cpu_total
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.disk_total is not None:
            result['DiskTotal'] = self.disk_total
        if self.disk_used is not None:
            result['DiskUsed'] = self.disk_used
        if self.du_total is not None:
            result['DuTotal'] = self.du_total
        if self.du_used is not None:
            result['DuUsed'] = self.du_used
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.memory_total is not None:
            result['MemoryTotal'] = self.memory_total
        if self.memory_used is not None:
            result['MemoryUsed'] = self.memory_used
        if self.memory_used_percentage is not None:
            result['MemoryUsedPercentage'] = self.memory_used_percentage
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_running is not None:
            result['TaskRunning'] = self.task_running
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CpuTotal') is not None:
            self.cpu_total = m.get('CpuTotal')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DiskTotal') is not None:
            self.disk_total = m.get('DiskTotal')
        if m.get('DiskUsed') is not None:
            self.disk_used = m.get('DiskUsed')
        if m.get('DuTotal') is not None:
            self.du_total = m.get('DuTotal')
        if m.get('DuUsed') is not None:
            self.du_used = m.get('DuUsed')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MemoryTotal') is not None:
            self.memory_total = m.get('MemoryTotal')
        if m.get('MemoryUsed') is not None:
            self.memory_used = m.get('MemoryUsed')
        if m.get('MemoryUsedPercentage') is not None:
            self.memory_used_percentage = m.get('MemoryUsedPercentage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskRunning') is not None:
            self.task_running = m.get('TaskRunning')
        return self


class DescribeClusterUsedUtilizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeClusterUsedUtilizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeClusterUsedUtilizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConnectionStatusRequest(TeaModel):
    def __init__(
        self,
        destination_endpoint_architecture: str = None,
        destination_endpoint_database_name: str = None,
        destination_endpoint_engine_name: str = None,
        destination_endpoint_ip: str = None,
        destination_endpoint_instance_id: str = None,
        destination_endpoint_instance_type: str = None,
        destination_endpoint_oracle_sid: str = None,
        destination_endpoint_password: str = None,
        destination_endpoint_port: str = None,
        destination_endpoint_region: str = None,
        destination_endpoint_user_name: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        source_endpoint_architecture: str = None,
        source_endpoint_database_name: str = None,
        source_endpoint_engine_name: str = None,
        source_endpoint_ip: str = None,
        source_endpoint_instance_id: str = None,
        source_endpoint_instance_type: str = None,
        source_endpoint_oracle_sid: str = None,
        source_endpoint_password: str = None,
        source_endpoint_port: str = None,
        source_endpoint_region: str = None,
        source_endpoint_user_name: str = None,
    ):
        # You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:
        # 
        # *   **SID**: non-RAC architecture
        # *   **RAC**: Real Application Cluster (RAC) architecture
        # 
        # >  This parameter is optional. The data type of this parameter is String.
        self.destination_endpoint_architecture = destination_endpoint_architecture
        # The name of the destination database or the authentication database.
        # 
        # > 
        # *   You must specify this parameter if the **DestinationEndpointEngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**. You must also specify this parameter if the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**.
        # *   If the **DestinationEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
        # *   If the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the destination database.
        self.destination_endpoint_database_name = destination_endpoint_database_name
        # The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, and **Redis**.
        # 
        # >  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **RDS**, **DRDS**, **ECS**, **LocalInstance**, or **Express**.
        self.destination_endpoint_engine_name = destination_endpoint_engine_name
        # The endpoint of the destination database.
        # 
        # >  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.
        self.destination_endpoint_ip = destination_endpoint_ip
        # The ID of the destination instance.
        self.destination_endpoint_instance_id = destination_endpoint_instance_id
        # The instance type of the destination database. Valid values:
        # 
        # > 
        # *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **RDS**: ApsaraDB RDS instance
        # *   **DRDS**: PolarDB-X instance
        # *   **MongoDB**: ApsaraDB for MongoDB instance
        # *   **Redis**: ApsaraDB for Redis instance
        # *   **PetaData**: HybridDB for MySQL instance
        # *   **POLARDB**: PolarDB for MySQL cluster
        # *   **PolarDB_o**: PolarDB for Oracle cluster
        # *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
        # *   **Greenplum**: AnalyticDB for PostgreSQL instance
        # 
        # This parameter is required.
        self.destination_endpoint_instance_type = destination_endpoint_instance_type
        # You must specify this parameter only if the **DestinationEndpointEngineName** parameter is set to **Oracle**. Valid values:
        # 
        # *   **SID**: non-RAC architecture
        # *   **RAC**: RAC architecture
        # 
        # >  This parameter is optional. The data type of this parameter is String.
        self.destination_endpoint_oracle_sid = destination_endpoint_oracle_sid
        # The password of the destination database account.
        self.destination_endpoint_password = destination_endpoint_password
        # The service port number of the source database.
        # 
        # >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
        self.destination_endpoint_port = destination_endpoint_port
        # The ID of the region where the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.destination_endpoint_region = destination_endpoint_region
        # The database account of the destination database.
        # 
        # >  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html) and [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html).
        self.destination_endpoint_user_name = destination_endpoint_user_name
        # The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:
        # 
        # *   **SID**: non-RAC architecture
        # *   **RAC**: RAC architecture
        # 
        # >  This parameter is optional.
        self.source_endpoint_architecture = source_endpoint_architecture
        # The name of the source database or the authentication database.
        # 
        # > 
        # *   You must specify this parameter if the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **MongoDB**. You must also specify this parameter if the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**.
        # *   If the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the source database. If the SourceEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
        # *   If the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the source database.
        self.source_endpoint_database_name = source_endpoint_database_name
        # The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, and **Redis**.
        # 
        # >  Default value: **MySQL**.
        self.source_endpoint_engine_name = source_endpoint_engine_name
        # The endpoint of the source database.
        # 
        # >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.
        self.source_endpoint_ip = source_endpoint_ip
        # The ID of the source instance.
        self.source_endpoint_instance_id = source_endpoint_instance_id
        # The type of the source instance. Valid values:
        # 
        # *   **RDS**: ApsaraDB RDS instance
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **ECS**: self-managed database that is hosted on ECS
        # *   **Express**: self-managed database that is connected over Express Connect
        # *   **dg**: self-managed database that is connected over Database Gateway
        # *   **MongoDB**: ApsaraDB for MongoDB instance
        # *   **POLARDB**: PolarDB for MySQL cluster
        # *   **PolarDB_o**: PolarDB for Oracle cluster
        # 
        # This parameter is required.
        self.source_endpoint_instance_type = source_endpoint_instance_type
        # The SID of the Oracle database.
        # 
        # >  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.source_endpoint_oracle_sid = source_endpoint_oracle_sid
        # The password of the source database account.
        self.source_endpoint_password = source_endpoint_password
        # The service port number of the source database.
        # 
        # >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
        self.source_endpoint_port = source_endpoint_port
        # The ID of the region where the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.source_endpoint_region = source_endpoint_region
        # The database account of the source database.
        # 
        # >  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](https://help.aliyun.com/document_detail/26618.html) and [Overview of data synchronization scenarios](https://help.aliyun.com/document_detail/130744.html).
        self.source_endpoint_user_name = source_endpoint_user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_endpoint_architecture is not None:
            result['DestinationEndpointArchitecture'] = self.destination_endpoint_architecture
        if self.destination_endpoint_database_name is not None:
            result['DestinationEndpointDatabaseName'] = self.destination_endpoint_database_name
        if self.destination_endpoint_engine_name is not None:
            result['DestinationEndpointEngineName'] = self.destination_endpoint_engine_name
        if self.destination_endpoint_ip is not None:
            result['DestinationEndpointIP'] = self.destination_endpoint_ip
        if self.destination_endpoint_instance_id is not None:
            result['DestinationEndpointInstanceID'] = self.destination_endpoint_instance_id
        if self.destination_endpoint_instance_type is not None:
            result['DestinationEndpointInstanceType'] = self.destination_endpoint_instance_type
        if self.destination_endpoint_oracle_sid is not None:
            result['DestinationEndpointOracleSID'] = self.destination_endpoint_oracle_sid
        if self.destination_endpoint_password is not None:
            result['DestinationEndpointPassword'] = self.destination_endpoint_password
        if self.destination_endpoint_port is not None:
            result['DestinationEndpointPort'] = self.destination_endpoint_port
        if self.destination_endpoint_region is not None:
            result['DestinationEndpointRegion'] = self.destination_endpoint_region
        if self.destination_endpoint_user_name is not None:
            result['DestinationEndpointUserName'] = self.destination_endpoint_user_name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_architecture is not None:
            result['SourceEndpointArchitecture'] = self.source_endpoint_architecture
        if self.source_endpoint_database_name is not None:
            result['SourceEndpointDatabaseName'] = self.source_endpoint_database_name
        if self.source_endpoint_engine_name is not None:
            result['SourceEndpointEngineName'] = self.source_endpoint_engine_name
        if self.source_endpoint_ip is not None:
            result['SourceEndpointIP'] = self.source_endpoint_ip
        if self.source_endpoint_instance_id is not None:
            result['SourceEndpointInstanceID'] = self.source_endpoint_instance_id
        if self.source_endpoint_instance_type is not None:
            result['SourceEndpointInstanceType'] = self.source_endpoint_instance_type
        if self.source_endpoint_oracle_sid is not None:
            result['SourceEndpointOracleSID'] = self.source_endpoint_oracle_sid
        if self.source_endpoint_password is not None:
            result['SourceEndpointPassword'] = self.source_endpoint_password
        if self.source_endpoint_port is not None:
            result['SourceEndpointPort'] = self.source_endpoint_port
        if self.source_endpoint_region is not None:
            result['SourceEndpointRegion'] = self.source_endpoint_region
        if self.source_endpoint_user_name is not None:
            result['SourceEndpointUserName'] = self.source_endpoint_user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationEndpointArchitecture') is not None:
            self.destination_endpoint_architecture = m.get('DestinationEndpointArchitecture')
        if m.get('DestinationEndpointDatabaseName') is not None:
            self.destination_endpoint_database_name = m.get('DestinationEndpointDatabaseName')
        if m.get('DestinationEndpointEngineName') is not None:
            self.destination_endpoint_engine_name = m.get('DestinationEndpointEngineName')
        if m.get('DestinationEndpointIP') is not None:
            self.destination_endpoint_ip = m.get('DestinationEndpointIP')
        if m.get('DestinationEndpointInstanceID') is not None:
            self.destination_endpoint_instance_id = m.get('DestinationEndpointInstanceID')
        if m.get('DestinationEndpointInstanceType') is not None:
            self.destination_endpoint_instance_type = m.get('DestinationEndpointInstanceType')
        if m.get('DestinationEndpointOracleSID') is not None:
            self.destination_endpoint_oracle_sid = m.get('DestinationEndpointOracleSID')
        if m.get('DestinationEndpointPassword') is not None:
            self.destination_endpoint_password = m.get('DestinationEndpointPassword')
        if m.get('DestinationEndpointPort') is not None:
            self.destination_endpoint_port = m.get('DestinationEndpointPort')
        if m.get('DestinationEndpointRegion') is not None:
            self.destination_endpoint_region = m.get('DestinationEndpointRegion')
        if m.get('DestinationEndpointUserName') is not None:
            self.destination_endpoint_user_name = m.get('DestinationEndpointUserName')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointArchitecture') is not None:
            self.source_endpoint_architecture = m.get('SourceEndpointArchitecture')
        if m.get('SourceEndpointDatabaseName') is not None:
            self.source_endpoint_database_name = m.get('SourceEndpointDatabaseName')
        if m.get('SourceEndpointEngineName') is not None:
            self.source_endpoint_engine_name = m.get('SourceEndpointEngineName')
        if m.get('SourceEndpointIP') is not None:
            self.source_endpoint_ip = m.get('SourceEndpointIP')
        if m.get('SourceEndpointInstanceID') is not None:
            self.source_endpoint_instance_id = m.get('SourceEndpointInstanceID')
        if m.get('SourceEndpointInstanceType') is not None:
            self.source_endpoint_instance_type = m.get('SourceEndpointInstanceType')
        if m.get('SourceEndpointOracleSID') is not None:
            self.source_endpoint_oracle_sid = m.get('SourceEndpointOracleSID')
        if m.get('SourceEndpointPassword') is not None:
            self.source_endpoint_password = m.get('SourceEndpointPassword')
        if m.get('SourceEndpointPort') is not None:
            self.source_endpoint_port = m.get('SourceEndpointPort')
        if m.get('SourceEndpointRegion') is not None:
            self.source_endpoint_region = m.get('SourceEndpointRegion')
        if m.get('SourceEndpointUserName') is not None:
            self.source_endpoint_user_name = m.get('SourceEndpointUserName')
        return self


class DescribeConnectionStatusResponseBody(TeaModel):
    def __init__(
        self,
        destination_connection_status: Dict[str, Any] = None,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        source_connection_status: Dict[str, Any] = None,
        success: str = None,
    ):
        # The connectivity of DTS servers to the destination database.
        self.destination_connection_status = destination_connection_status
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # The connectivity of DTS servers to the source database.
        self.source_connection_status = source_connection_status
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_connection_status is not None:
            result['DestinationConnectionStatus'] = self.destination_connection_status
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source_connection_status is not None:
            result['SourceConnectionStatus'] = self.source_connection_status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationConnectionStatus') is not None:
            self.destination_connection_status = m.get('DestinationConnectionStatus')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SourceConnectionStatus') is not None:
            self.source_connection_status = m.get('SourceConnectionStatus')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeConnectionStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConnectionStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConnectionStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsumerChannelRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        page_number: int = None,
        page_size: int = None,
        parent_channel_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_job_id = dts_job_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_number = page_number
        # The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.
        self.page_size = page_size
        # The parent task ID of the distributed task.
        self.parent_channel_id = parent_channel_id
        # The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.parent_channel_id is not None:
            result['ParentChannelId'] = self.parent_channel_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ParentChannelId') is not None:
            self.parent_channel_id = m.get('ParentChannelId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeConsumerChannelResponseBodyConsumerChannels(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        consumer_group_name: str = None,
        consumer_group_user_name: str = None,
        consumption_checkpoint: str = None,
        message_delay: int = None,
        unconsumed_data: int = None,
    ):
        # The ID of the consumer group.
        self.consumer_group_id = consumer_group_id
        # The name of the consumer group.
        self.consumer_group_name = consumer_group_name
        # The username of the consumer group.
        self.consumer_group_user_name = consumer_group_user_name
        # The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The message latency, which is the timestamp of the latest data consumed by the downstream client minus the timestamp of the latest data tracked by the change tracking task. The value is a UNIX timestamp. Unit: seconds.
        # 
        # For example, the latest data in the source database is generated at 10:00. The change tracking task reads the data generated at 09:55, and the downstream client consumes the data generated at 09:30. In this case, the message latency is the UNIX timestamp difference between 09:55 and 09:30.
        # 
        # >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
        self.message_delay = message_delay
        # The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.
        # 
        # >  If the return value of this parameter is -1, no client is connected to the consumer group.
        self.unconsumed_data = unconsumed_data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupId'] = self.consumer_group_id
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.message_delay is not None:
            result['MessageDelay'] = self.message_delay
        if self.unconsumed_data is not None:
            result['UnconsumedData'] = self.unconsumed_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupId') is not None:
            self.consumer_group_id = m.get('ConsumerGroupId')
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('MessageDelay') is not None:
            self.message_delay = m.get('MessageDelay')
        if m.get('UnconsumedData') is not None:
            self.unconsumed_data = m.get('UnconsumedData')
        return self


class DescribeConsumerChannelResponseBody(TeaModel):
    def __init__(
        self,
        consumer_channels: List[DescribeConsumerChannelResponseBodyConsumerChannels] = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The details of the consumer groups.
        self.consumer_channels = consumer_channels
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The number of the returned page.
        self.page_number = page_number
        # The maximum number of consumer groups that can be displayed on one page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The total number of consumer groups.
        self.total_record_count = total_record_count

    def validate(self):
        if self.consumer_channels:
            for k in self.consumer_channels:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConsumerChannels'] = []
        if self.consumer_channels is not None:
            for k in self.consumer_channels:
                result['ConsumerChannels'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.consumer_channels = []
        if m.get('ConsumerChannels') is not None:
            for k in m.get('ConsumerChannels'):
                temp_model = DescribeConsumerChannelResponseBodyConsumerChannels()
                self.consumer_channels.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeConsumerChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsumerChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsumerChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeConsumerGroupRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
        self.page_size = page_size
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        consumer_group_name: str = None,
        consumer_group_user_name: str = None,
        consumption_checkpoint: str = None,
        message_delay: int = None,
        unconsumed_data: int = None,
    ):
        # The ID of the consumer group.
        self.consumer_group_id = consumer_group_id
        # The name of the consumer group.
        self.consumer_group_name = consumer_group_name
        # The username of the consumer group.
        self.consumer_group_user_name = consumer_group_user_name
        # The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The message delay, which is the current time minus the timestamp of the earliest unconsumed message in the change tracking instance. Unit: seconds.
        # 
        # >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
        self.message_delay = message_delay
        # The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.
        # 
        # >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
        self.unconsumed_data = unconsumed_data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupID'] = self.consumer_group_id
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.message_delay is not None:
            result['MessageDelay'] = self.message_delay
        if self.unconsumed_data is not None:
            result['UnconsumedData'] = self.unconsumed_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupID') is not None:
            self.consumer_group_id = m.get('ConsumerGroupID')
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('MessageDelay') is not None:
            self.message_delay = m.get('MessageDelay')
        if m.get('UnconsumedData') is not None:
            self.unconsumed_data = m.get('UnconsumedData')
        return self


class DescribeConsumerGroupResponseBodyConsumerChannels(TeaModel):
    def __init__(
        self,
        describe_consumer_channel: List[DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel] = None,
    ):
        self.describe_consumer_channel = describe_consumer_channel

    def validate(self):
        if self.describe_consumer_channel:
            for k in self.describe_consumer_channel:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DescribeConsumerChannel'] = []
        if self.describe_consumer_channel is not None:
            for k in self.describe_consumer_channel:
                result['DescribeConsumerChannel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.describe_consumer_channel = []
        if m.get('DescribeConsumerChannel') is not None:
            for k in m.get('DescribeConsumerChannel'):
                temp_model = DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel()
                self.describe_consumer_channel.append(temp_model.from_map(k))
        return self


class DescribeConsumerGroupResponseBody(TeaModel):
    def __init__(
        self,
        consumer_channels: DescribeConsumerGroupResponseBodyConsumerChannels = None,
        err_code: str = None,
        err_message: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The list of consumer groups.
        self.consumer_channels = consumer_channels
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The page number of the returned page.
        self.page_number = page_number
        # The maximum number of consumer groups that can be displayed on one page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The total number of consumer groups.
        self.total_record_count = total_record_count

    def validate(self):
        if self.consumer_channels:
            self.consumer_channels.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_channels is not None:
            result['ConsumerChannels'] = self.consumer_channels.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerChannels') is not None:
            temp_model = DescribeConsumerGroupResponseBodyConsumerChannels()
            self.consumer_channels = temp_model.from_map(m['ConsumerChannels'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeConsumerGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeConsumerGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeConsumerGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDTSIPRequest(TeaModel):
    def __init__(
        self,
        destination_endpoint_region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        source_endpoint_region: str = None,
    ):
        # The ID of the region where the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  If the destination instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
        self.destination_endpoint_region = destination_endpoint_region
        # The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the region where the source instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # >  If the source instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
        # 
        # This parameter is required.
        self.source_endpoint_region = source_endpoint_region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_endpoint_region is not None:
            result['DestinationEndpointRegion'] = self.destination_endpoint_region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.source_endpoint_region is not None:
            result['SourceEndpointRegion'] = self.source_endpoint_region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationEndpointRegion') is not None:
            self.destination_endpoint_region = m.get('DestinationEndpointRegion')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SourceEndpointRegion') is not None:
            self.source_endpoint_region = m.get('SourceEndpointRegion')
        return self


class DescribeDTSIPResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The internal error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The CIDR blocks of DTS servers.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDTSIPResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDTSIPResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDTSIPResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataCheckReportUrlRequest(TeaModel):
    def __init__(
        self,
        check_type: int = None,
        db_name: str = None,
        dts_job_id: str = None,
        resource_group_id: str = None,
        tb_name: str = None,
    ):
        # The data verification method. Valid values:
        # 
        # *   **1**: full data verification.
        # *   **2**: incremental data verification.
        # 
        # This parameter is required.
        self.check_type = check_type
        # The name of the verified source database.
        # 
        # This parameter is required.
        self.db_name = db_name
        # The ID of the Data Transmission Service (DTS) task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the table verified in the source database.
        # 
        # This parameter is required.
        self.tb_name = tb_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_type is not None:
            result['CheckType'] = self.check_type
        if self.db_name is not None:
            result['DbName'] = self.db_name
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.tb_name is not None:
            result['TbName'] = self.tb_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckType') is not None:
            self.check_type = m.get('CheckType')
        if m.get('DbName') is not None:
            self.db_name = m.get('DbName')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('TbName') is not None:
            self.tb_name = m.get('TbName')
        return self


class DescribeDataCheckReportUrlResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: str = None,
    ):
        # The URL for downloading the verification report.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDataCheckReportUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDataCheckReportUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataCheckReportUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataCheckTableDetailsRequest(TeaModel):
    def __init__(
        self,
        check_type: int = None,
        dts_job_id: str = None,
        page_number: int = None,
        page_size: int = None,
        resource_group_id: str = None,
        schema_name: str = None,
        status: str = None,
        table_name: str = None,
    ):
        # The data verification method. Valid values:
        # 
        # *   **1**: full data verification.
        # *   **2**: incremental data verification.
        # 
        # This parameter is required.
        self.check_type = check_type
        # The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value:**1**.
        self.page_number = page_number
        # The number of entries to return on each page.
        self.page_size = page_size
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the schema whose data is verified in the source database.
        self.schema_name = schema_name
        # The status of the data verification result. Valid values:
        # 
        # *   **-1** (default): All status.
        # *   **6**: Inconsistent data detected in the table.
        self.status = status
        # The name of the table whose data is verified in the source database.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_type is not None:
            result['CheckType'] = self.check_type
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.schema_name is not None:
            result['SchemaName'] = self.schema_name
        if self.status is not None:
            result['Status'] = self.status
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckType') is not None:
            self.check_type = m.get('CheckType')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SchemaName') is not None:
            self.schema_name = m.get('SchemaName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeDataCheckTableDetailsResponseBodyTableDetails(TeaModel):
    def __init__(
        self,
        boot_time: str = None,
        diff_count: int = None,
        error_code: int = None,
        finish_count: int = None,
        id: int = None,
        source_db_name: str = None,
        source_tb_name: str = None,
        status: str = None,
        target_db_name: str = None,
        target_tb_name: str = None,
        total_count: int = None,
    ):
        # The time when data verification was performed.
        self.boot_time = boot_time
        # The number of data rows that contain inconsistent data.
        self.diff_count = diff_count
        # The error code returned if the data verification task failed. Valid values:
        # 
        # *   **1**: The number of tables that do not contain primary keys exceeds the limit.
        # *   **2**: The number of data rows that contain inconsistent data exceeds 300.
        # *   **3**: One or more tables to be verified do not exist.
        # *   **4**: The SQL statements used for verifying data contain a syntax error.
        self.error_code = error_code
        # The number of data rows that were verified.
        self.finish_count = finish_count
        # The auto-increment primary key that is used to identify the data in a verification result.
        self.id = id
        # The name of the source database.
        self.source_db_name = source_db_name
        # The name of the source table.
        self.source_tb_name = source_tb_name
        # The status of data verification results. Valid values:
        # 
        # *   **0**: The data verification task was complete.
        # *   **2**: The data verification task was being initialized.
        # *   **3**: The data verification task was in progress.
        # *   **5**: The data verification task failed.
        self.status = status
        # The name of the destination database.
        self.target_db_name = target_db_name
        # The name of the destination table.
        self.target_tb_name = target_tb_name
        # The total number of data rows.
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.diff_count is not None:
            result['DiffCount'] = self.diff_count
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.finish_count is not None:
            result['FinishCount'] = self.finish_count
        if self.id is not None:
            result['Id'] = self.id
        if self.source_db_name is not None:
            result['SourceDbName'] = self.source_db_name
        if self.source_tb_name is not None:
            result['SourceTbName'] = self.source_tb_name
        if self.status is not None:
            result['Status'] = self.status
        if self.target_db_name is not None:
            result['TargetDbName'] = self.target_db_name
        if self.target_tb_name is not None:
            result['TargetTbName'] = self.target_tb_name
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('DiffCount') is not None:
            self.diff_count = m.get('DiffCount')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('FinishCount') is not None:
            self.finish_count = m.get('FinishCount')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SourceDbName') is not None:
            self.source_db_name = m.get('SourceDbName')
        if m.get('SourceTbName') is not None:
            self.source_tb_name = m.get('SourceTbName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TargetDbName') is not None:
            self.target_db_name = m.get('TargetDbName')
        if m.get('TargetTbName') is not None:
            self.target_tb_name = m.get('TargetTbName')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeDataCheckTableDetailsResponseBody(TeaModel):
    def __init__(
        self,
        diff_table_count: int = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        failed_table_count: int = None,
        finished_count: int = None,
        http_status_code: int = None,
        page_number: int = None,
        request_id: str = None,
        success: bool = None,
        table_details: List[DescribeDataCheckTableDetailsResponseBodyTableDetails] = None,
        total_count: int = None,
    ):
        # The number of tables that contain inconsistent data.
        self.diff_table_count = diff_table_count
        # The dynamic error code. This parameter will be discontinued in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # > For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The total number of data rows that were failed.
        self.failed_table_count = failed_table_count
        # The total number of data rows that were verified.
        self.finished_count = finished_count
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The page number of the returned page.
        self.page_number = page_number
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The details of data verification results.
        self.table_details = table_details
        # The total number of tables on which data verification was performed.
        self.total_count = total_count

    def validate(self):
        if self.table_details:
            for k in self.table_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.diff_table_count is not None:
            result['DiffTableCount'] = self.diff_table_count
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.failed_table_count is not None:
            result['FailedTableCount'] = self.failed_table_count
        if self.finished_count is not None:
            result['FinishedCount'] = self.finished_count
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TableDetails'] = []
        if self.table_details is not None:
            for k in self.table_details:
                result['TableDetails'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DiffTableCount') is not None:
            self.diff_table_count = m.get('DiffTableCount')
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('FailedTableCount') is not None:
            self.failed_table_count = m.get('FailedTableCount')
        if m.get('FinishedCount') is not None:
            self.finished_count = m.get('FinishedCount')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.table_details = []
        if m.get('TableDetails') is not None:
            for k in m.get('TableDetails'):
                temp_model = DescribeDataCheckTableDetailsResponseBodyTableDetails()
                self.table_details.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeDataCheckTableDetailsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDataCheckTableDetailsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataCheckTableDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDataCheckTableDiffDetailsRequest(TeaModel):
    def __init__(
        self,
        check_type: int = None,
        db_name: str = None,
        dts_job_id: str = None,
        page_number: int = None,
        page_size: int = None,
        resource_group_id: str = None,
        tb_name: str = None,
    ):
        # The data verification method. Valid values:
        # 
        # *   **1**: full data verification.
        # *   **2**: incremental data verification.
        # 
        # This parameter is required.
        self.check_type = check_type
        # The name of the database to which the table that contains inconsistent data belongs.
        # 
        # This parameter is required.
        self.db_name = db_name
        # The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the ID of the task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The page number of the page to return. The value must be an integer greater than 0. Default value: 1.
        self.page_number = page_number
        # The number of entries to return on each page.
        self.page_size = page_size
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the table that contains inconsistent data exists.
        # 
        # This parameter is required.
        self.tb_name = tb_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_type is not None:
            result['CheckType'] = self.check_type
        if self.db_name is not None:
            result['DbName'] = self.db_name
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.tb_name is not None:
            result['TbName'] = self.tb_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckType') is not None:
            self.check_type = m.get('CheckType')
        if m.get('DbName') is not None:
            self.db_name = m.get('DbName')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('TbName') is not None:
            self.tb_name = m.get('TbName')
        return self


class DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails(TeaModel):
    def __init__(
        self,
        diff: str = None,
        gmt_created: str = None,
        id: int = None,
    ):
        # The details of the inconsistent data, whose value is a JSON string. The JSON string contains the following parameters:
        # 
        # *   column: the name of the field.
        # *   source: the value of the field in the source database.
        # *   dest: the value of the field in the destination database.
        # *   isPrimary: indicates whether the field is a primary key.
        self.diff = diff
        # The time when the data verification was performed.
        self.gmt_created = gmt_created
        # The auto-increment primary key that is used to identify the data in a verification result.
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.diff is not None:
            result['Diff'] = self.diff
        if self.gmt_created is not None:
            result['GmtCreated'] = self.gmt_created
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Diff') is not None:
            self.diff = m.get('Diff')
        if m.get('GmtCreated') is not None:
            self.gmt_created = m.get('GmtCreated')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class DescribeDataCheckTableDiffDetailsResponseBody(TeaModel):
    def __init__(
        self,
        db_name: str = None,
        diff_count: int = None,
        diff_details: List[DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails] = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        request_id: str = None,
        success: bool = None,
        tb_name: str = None,
    ):
        # The name of the source database to which the table that contains inconsistent data belongs.
        self.db_name = db_name
        # The number of data rows that contain inconsistent data.
        self.diff_count = diff_count
        # The information about the inconsistent data.
        self.diff_details = diff_details
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # > For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The instance ID.
        self.instance_id = instance_id
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The name of the table that contains inconsistent data in the source database.
        self.tb_name = tb_name

    def validate(self):
        if self.diff_details:
            for k in self.diff_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.db_name is not None:
            result['DbName'] = self.db_name
        if self.diff_count is not None:
            result['DiffCount'] = self.diff_count
        result['DiffDetails'] = []
        if self.diff_details is not None:
            for k in self.diff_details:
                result['DiffDetails'].append(k.to_map() if k else None)
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.tb_name is not None:
            result['TbName'] = self.tb_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DbName') is not None:
            self.db_name = m.get('DbName')
        if m.get('DiffCount') is not None:
            self.diff_count = m.get('DiffCount')
        self.diff_details = []
        if m.get('DiffDetails') is not None:
            for k in m.get('DiffDetails'):
                temp_model = DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails()
                self.diff_details.append(temp_model.from_map(k))
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TbName') is not None:
            self.tb_name = m.get('TbName')
        return self


class DescribeDataCheckTableDiffDetailsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDataCheckTableDiffDetailsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDataCheckTableDiffDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDedicatedClusterRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the cluster.
        # 
        # This parameter is required.
        self.dedicated_cluster_id = dedicated_cluster_id
        self.owner_id = owner_id
        # The ID of the region in which the instance resides.
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDedicatedClusterResponseBody(TeaModel):
    def __init__(
        self,
        cpu_utilization: int = None,
        dedicated_cluster_id: str = None,
        dedicated_cluster_name: str = None,
        disk_utilization: int = None,
        dts_instance_id: str = None,
        du: int = None,
        du_utilization: int = None,
        err_code: str = None,
        err_message: str = None,
        gmt_created: int = None,
        gmt_finished: int = None,
        http_status_code: str = None,
        mem_utilization: int = None,
        node_count: int = None,
        oversold_du: int = None,
        region_id: str = None,
        request_id: str = None,
        state: str = None,
        success: str = None,
        total_cpu_core: int = None,
        total_disk_gbsize: int = None,
        total_mem_gbsize: int = None,
        used_cpu_core: int = None,
        used_disk_gbsize: int = None,
        used_du: int = None,
        used_mem_gbsize: int = None,
    ):
        # The CPU utilization. Unit: percentage.
        self.cpu_utilization = cpu_utilization
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The name of the cluster.
        self.dedicated_cluster_name = dedicated_cluster_name
        # The disk usage.
        self.disk_utilization = disk_utilization
        # The ID of the instance.
        self.dts_instance_id = dts_instance_id
        # The number of DTS units (DUs).
        self.du = du
        # The DU usage. Unit: percentage.
        self.du_utilization = du_utilization
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The time when the cluster was created.
        self.gmt_created = gmt_created
        # The time when the cluster stopped.
        self.gmt_finished = gmt_finished
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The memory usage.
        self.mem_utilization = mem_utilization
        # The number of nodes in the cluster.
        self.node_count = node_count
        # The number of DUs that exceeds the upper limit.
        self.oversold_du = oversold_du
        # The ID of the region in which the instance resides.
        self.region_id = region_id
        # The ID of the request.
        self.request_id = request_id
        # The status of the cluster. Valid values:
        # 
        # *   **init**: The cluster is being initialized.
        # *   **schedule**: The cluster is pending scheduling.
        # *   **running**: The cluster is running.
        # *   **upgrade**: The cluster is being upgraded.
        # *   **downgrade**: The cluster is being downgraded.
        # *   **locked**: The cluster is locked.
        # *   **releasing**: The cluster is being released.
        # *   **released**: The cluster is released.
        self.state = state
        # Indicates whether the request was successful.
        self.success = success
        # The total number of CPU cores.
        self.total_cpu_core = total_cpu_core
        # The total disk size. Unit: GB.
        self.total_disk_gbsize = total_disk_gbsize
        # The total amount of memory. Unit: GB.
        self.total_mem_gbsize = total_mem_gbsize
        # The number of used CPU cores.
        self.used_cpu_core = used_cpu_core
        # The used disk size. Unit: GB.
        self.used_disk_gbsize = used_disk_gbsize
        # The number of used DUs.
        self.used_du = used_du
        # The amount of used memory. Unit: GB.
        self.used_mem_gbsize = used_mem_gbsize

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu_utilization is not None:
            result['CpuUtilization'] = self.cpu_utilization
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dedicated_cluster_name is not None:
            result['DedicatedClusterName'] = self.dedicated_cluster_name
        if self.disk_utilization is not None:
            result['DiskUtilization'] = self.disk_utilization
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.du is not None:
            result['Du'] = self.du
        if self.du_utilization is not None:
            result['DuUtilization'] = self.du_utilization
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.gmt_created is not None:
            result['GmtCreated'] = self.gmt_created
        if self.gmt_finished is not None:
            result['GmtFinished'] = self.gmt_finished
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.oversold_du is not None:
            result['OversoldDu'] = self.oversold_du
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        if self.success is not None:
            result['Success'] = self.success
        if self.total_cpu_core is not None:
            result['TotalCpuCore'] = self.total_cpu_core
        if self.total_disk_gbsize is not None:
            result['TotalDiskGBSize'] = self.total_disk_gbsize
        if self.total_mem_gbsize is not None:
            result['TotalMemGBSize'] = self.total_mem_gbsize
        if self.used_cpu_core is not None:
            result['UsedCpuCore'] = self.used_cpu_core
        if self.used_disk_gbsize is not None:
            result['UsedDiskGBSize'] = self.used_disk_gbsize
        if self.used_du is not None:
            result['UsedDu'] = self.used_du
        if self.used_mem_gbsize is not None:
            result['UsedMemGBSize'] = self.used_mem_gbsize
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CpuUtilization') is not None:
            self.cpu_utilization = m.get('CpuUtilization')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DedicatedClusterName') is not None:
            self.dedicated_cluster_name = m.get('DedicatedClusterName')
        if m.get('DiskUtilization') is not None:
            self.disk_utilization = m.get('DiskUtilization')
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('Du') is not None:
            self.du = m.get('Du')
        if m.get('DuUtilization') is not None:
            self.du_utilization = m.get('DuUtilization')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('GmtCreated') is not None:
            self.gmt_created = m.get('GmtCreated')
        if m.get('GmtFinished') is not None:
            self.gmt_finished = m.get('GmtFinished')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MemUtilization') is not None:
            self.mem_utilization = m.get('MemUtilization')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('OversoldDu') is not None:
            self.oversold_du = m.get('OversoldDu')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCpuCore') is not None:
            self.total_cpu_core = m.get('TotalCpuCore')
        if m.get('TotalDiskGBSize') is not None:
            self.total_disk_gbsize = m.get('TotalDiskGBSize')
        if m.get('TotalMemGBSize') is not None:
            self.total_mem_gbsize = m.get('TotalMemGBSize')
        if m.get('UsedCpuCore') is not None:
            self.used_cpu_core = m.get('UsedCpuCore')
        if m.get('UsedDiskGBSize') is not None:
            self.used_disk_gbsize = m.get('UsedDiskGBSize')
        if m.get('UsedDu') is not None:
            self.used_du = m.get('UsedDu')
        if m.get('UsedMemGBSize') is not None:
            self.used_mem_gbsize = m.get('UsedMemGBSize')
        return self


class DescribeDedicatedClusterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDedicatedClusterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDedicatedClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDedicatedClusterMonitorRuleRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        self.owner_id = owner_id
        # The ID of the region in which the instance resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDedicatedClusterMonitorRuleResponseBody(TeaModel):
    def __init__(
        self,
        cpu_alarm_threshold: str = None,
        dedicated_cluster_id: str = None,
        disk_alarm_threshold: str = None,
        du_alarm_threshold: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        mem_alarm_threshold: str = None,
        notice_switch: str = None,
        phones: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The alert threshold for CPU utilization. Unit: percentage.
        self.cpu_alarm_threshold = cpu_alarm_threshold
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The alert threshold for disk usage. Unit: percentage.
        self.disk_alarm_threshold = disk_alarm_threshold
        # The alert threshold for DTS Unit (DU) usage. Unit: percentage.
        self.du_alarm_threshold = du_alarm_threshold
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The alert threshold for memory usage. Unit: percentage.
        self.mem_alarm_threshold = mem_alarm_threshold
        # Indicates whether the alert feature is enabled. Valid values:
        # 
        # *   **1**: The alert feature is enabled.
        # *   **0**: The alert feature is disabled.
        self.notice_switch = notice_switch
        # The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).
        self.phones = phones
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu_alarm_threshold is not None:
            result['CpuAlarmThreshold'] = self.cpu_alarm_threshold
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.disk_alarm_threshold is not None:
            result['DiskAlarmThreshold'] = self.disk_alarm_threshold
        if self.du_alarm_threshold is not None:
            result['DuAlarmThreshold'] = self.du_alarm_threshold
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.mem_alarm_threshold is not None:
            result['MemAlarmThreshold'] = self.mem_alarm_threshold
        if self.notice_switch is not None:
            result['NoticeSwitch'] = self.notice_switch
        if self.phones is not None:
            result['Phones'] = self.phones
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CpuAlarmThreshold') is not None:
            self.cpu_alarm_threshold = m.get('CpuAlarmThreshold')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DiskAlarmThreshold') is not None:
            self.disk_alarm_threshold = m.get('DiskAlarmThreshold')
        if m.get('DuAlarmThreshold') is not None:
            self.du_alarm_threshold = m.get('DuAlarmThreshold')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MemAlarmThreshold') is not None:
            self.mem_alarm_threshold = m.get('MemAlarmThreshold')
        if m.get('NoticeSwitch') is not None:
            self.notice_switch = m.get('NoticeSwitch')
        if m.get('Phones') is not None:
            self.phones = m.get('Phones')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDedicatedClusterMonitorRuleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDedicatedClusterMonitorRuleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDedicatedClusterMonitorRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDocParserJobResultRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.dts_job_id = dts_job_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDocParserJobResultResponseBodyContentList(TeaModel):
    def __init__(
        self,
        content: str = None,
        page_number: int = None,
    ):
        self.content = content
        self.page_number = page_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        return self


class DescribeDocParserJobResultResponseBody(TeaModel):
    def __init__(
        self,
        content_list: List[DescribeDocParserJobResultResponseBodyContentList] = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        file_url: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.content_list = content_list
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.file_url = file_url
        self.http_status_code = http_status_code
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.content_list:
            for k in self.content_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ContentList'] = []
        if self.content_list is not None:
            for k in self.content_list:
                result['ContentList'].append(k.to_map() if k else None)
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content_list = []
        if m.get('ContentList') is not None:
            for k in m.get('ContentList'):
                temp_model = DescribeDocParserJobResultResponseBodyContentList()
                self.content_list.append(temp_model.from_map(k))
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDocParserJobResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDocParserJobResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDocParserJobResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDocParserJobStatusRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.dts_job_id = dts_job_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDocParserJobStatusResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        status: str = None,
        success: bool = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.request_id = request_id
        self.status = status
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDocParserJobStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDocParserJobStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDocParserJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDtsEtlJobVersionInfoRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Data Transmission Service (DTS) instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.dts_instance_id = dts_instance_id
        # The ID of the ETL task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The number of the page to return. Default value: 1.
        self.page_number = page_number
        # The number of entries to return on each page. Default value: 20.
        self.page_size = page_size
        # The ID of the region in which the DTS instance resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the available Alibaba Cloud regions.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        creator: str = None,
        creator_name: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        modify_time: str = None,
        safe_checkpoint: str = None,
        status: str = None,
        version: int = None,
    ):
        # The time when the ETL task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.create_time = create_time
        # The ID of the creator.
        self.creator = creator
        # The username of the creator.
        self.creator_name = creator_name
        # The ID of the DTS instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the ETL task.
        self.dts_job_id = dts_job_id
        # The name of the ETL task.
        self.dts_job_name = dts_job_name
        # The time when the ETL task was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.modify_time = modify_time
        # The safe checkpoint of the ETL task.
        self.safe_checkpoint = safe_checkpoint
        # The log level. Valid values: ERROR, WARN, INFO, and DEBUG.
        self.status = status
        # The version number of the ETL task.
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.safe_checkpoint is not None:
            result['SafeCheckpoint'] = self.safe_checkpoint
        if self.status is not None:
            result['Status'] = self.status
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('SafeCheckpoint') is not None:
            self.safe_checkpoint = m.get('SafeCheckpoint')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DescribeDtsEtlJobVersionInfoResponseBody(TeaModel):
    def __init__(
        self,
        dts_etl_job_version_infos: List[DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos] = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # The details of ETL tasks.
        self.dts_etl_job_version_infos = dts_etl_job_version_infos
        # The dynamic error code.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message.
        self.dynamic_message = dynamic_message
        # The error code. This example indicates that the specified ETL task ID is invalid.
        self.err_code = err_code
        # The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may have been deleted.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The page number of the returned page. Default value: 1.
        self.page_number = page_number
        # The number of records returned on the current page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful. If the call failed, false is returned.
        self.success = success
        # The total number of records.
        self.total_record_count = total_record_count

    def validate(self):
        if self.dts_etl_job_version_infos:
            for k in self.dts_etl_job_version_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DtsEtlJobVersionInfos'] = []
        if self.dts_etl_job_version_infos is not None:
            for k in self.dts_etl_job_version_infos:
                result['DtsEtlJobVersionInfos'].append(k.to_map() if k else None)
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dts_etl_job_version_infos = []
        if m.get('DtsEtlJobVersionInfos') is not None:
            for k in m.get('DtsEtlJobVersionInfos'):
                temp_model = DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos()
                self.dts_etl_job_version_infos.append(temp_model.from_map(k))
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeDtsEtlJobVersionInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDtsEtlJobVersionInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDtsEtlJobVersionInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDtsJobConfigRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        for_acceleration: str = None,
        module: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.dts_job_id = dts_job_id
        self.for_acceleration = for_acceleration
        self.module = module
        self.owner_id = owner_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.for_acceleration is not None:
            result['ForAcceleration'] = self.for_acceleration
        if self.module is not None:
            result['Module'] = self.module
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ForAcceleration') is not None:
            self.for_acceleration = m.get('ForAcceleration')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeDtsJobConfigResponseBodyParameters(TeaModel):
    def __init__(
        self,
        checking_code: str = None,
        default_value: str = None,
        description: str = None,
        force_restart: str = None,
        modifiable: str = None,
        module: str = None,
        name: str = None,
        recommend_value: str = None,
        running_value: str = None,
        value_type: int = None,
    ):
        self.checking_code = checking_code
        self.default_value = default_value
        self.description = description
        self.force_restart = force_restart
        self.modifiable = modifiable
        self.module = module
        self.name = name
        self.recommend_value = recommend_value
        self.running_value = running_value
        self.value_type = value_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checking_code is not None:
            result['CheckingCode'] = self.checking_code
        if self.default_value is not None:
            result['DefaultValue'] = self.default_value
        if self.description is not None:
            result['Description'] = self.description
        if self.force_restart is not None:
            result['ForceRestart'] = self.force_restart
        if self.modifiable is not None:
            result['Modifiable'] = self.modifiable
        if self.module is not None:
            result['Module'] = self.module
        if self.name is not None:
            result['Name'] = self.name
        if self.recommend_value is not None:
            result['RecommendValue'] = self.recommend_value
        if self.running_value is not None:
            result['RunningValue'] = self.running_value
        if self.value_type is not None:
            result['ValueType'] = self.value_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckingCode') is not None:
            self.checking_code = m.get('CheckingCode')
        if m.get('DefaultValue') is not None:
            self.default_value = m.get('DefaultValue')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ForceRestart') is not None:
            self.force_restart = m.get('ForceRestart')
        if m.get('Modifiable') is not None:
            self.modifiable = m.get('Modifiable')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('RecommendValue') is not None:
            self.recommend_value = m.get('RecommendValue')
        if m.get('RunningValue') is not None:
            self.running_value = m.get('RunningValue')
        if m.get('ValueType') is not None:
            self.value_type = m.get('ValueType')
        return self


class DescribeDtsJobConfigResponseBody(TeaModel):
    def __init__(
        self,
        parameters: List[DescribeDtsJobConfigResponseBodyParameters] = None,
        request_id: str = None,
    ):
        self.parameters = parameters
        self.request_id = request_id

    def validate(self):
        if self.parameters:
            for k in self.parameters:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Parameters'] = []
        if self.parameters is not None:
            for k in self.parameters:
                result['Parameters'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.parameters = []
        if m.get('Parameters') is not None:
            for k in m.get('Parameters'):
                temp_model = DescribeDtsJobConfigResponseBodyParameters()
                self.parameters.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DescribeDtsJobConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDtsJobConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDtsJobConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDtsJobDetailRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        sync_sub_job_history: bool = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to return the information about all data synchronization subtasks. Default value: **false**. A value of false indicates that the system returns only the information about a data synchronization subtask that is running or was most recently run.
        self.sync_sub_job_history = sync_sub_job_history
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.sync_sub_job_history is not None:
            result['SyncSubJobHistory'] = self.sync_sub_job_history
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SyncSubJobHistory') is not None:
            self.sync_sub_job_history = m.get('SyncSubJobHistory')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo(TeaModel):
    def __init__(
        self,
        partition_num: int = None,
        public_dproxy_url: str = None,
        region: str = None,
        topic: str = None,
        vpc_dproxy_url: str = None,
    ):
        # The number of partitions of the destination topic.
        self.partition_num = partition_num
        # The public endpoint of the data shipping channel.
        self.public_dproxy_url = public_dproxy_url
        # The region in which the data shipping channel resides.
        self.region = region
        # The destination topic of the data shipping instance.
        self.topic = topic
        # The VPC endpoint of the data shipping channel.
        self.vpc_dproxy_url = vpc_dproxy_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.partition_num is not None:
            result['PartitionNum'] = self.partition_num
        if self.public_dproxy_url is not None:
            result['PublicDproxyUrl'] = self.public_dproxy_url
        if self.region is not None:
            result['Region'] = self.region
        if self.topic is not None:
            result['Topic'] = self.topic
        if self.vpc_dproxy_url is not None:
            result['VpcDproxyUrl'] = self.vpc_dproxy_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PartitionNum') is not None:
            self.partition_num = m.get('PartitionNum')
        if m.get('PublicDproxyUrl') is not None:
            self.public_dproxy_url = m.get('PublicDproxyUrl')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('Topic') is not None:
            self.topic = m.get('Topic')
        if m.get('VpcDproxyUrl') is not None:
            self.vpc_dproxy_url = m.get('VpcDproxyUrl')
        return self


class DescribeDtsJobDetailResponseBodyDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if incremental data migration or synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization. Unit: percentage.
        self.percent = percent
        # The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **Checking**: The task is in precheck.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodyDestinationEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        can_modify_password: bool = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        # Indicates whether the password can be modified. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.can_modify_password = can_modify_password
        # The name of the database to which the objects are migrated in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The destination instance ID.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.can_modify_password is not None:
            result['CanModifyPassword'] = self.can_modify_password
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('CanModifyPassword') is not None:
            self.can_modify_password = m.get('CanModifyPassword')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodyMigrationMode(TeaModel):
    def __init__(
        self,
        data_extract_transform_load: bool = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether data transformation is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_extract_transform_load = data_extract_transform_load
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_extract_transform_load is not None:
            result['DataExtractTransformLoad'] = self.data_extract_transform_load
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataExtractTransformLoad') is not None:
            self.data_extract_transform_load = m.get('DataExtractTransformLoad')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobDetailResponseBodyRetryState(TeaModel):
    def __init__(
        self,
        err_message: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned if these retries failed.
        self.err_message = err_message
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS performs retries.
        self.module = module
        # The number of retries.
        self.retry_count = retry_count
        # The object on which the retries are performed. Valid values:
        # 
        # *   **srcDB**: the source database.
        # *   **destDB**: the destination database.
        # *   **inner_module**: an internal module of DTS.
        self.retry_target = retry_target
        # The time that has elapsed from the point in time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobDetailResponseBodySourceEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        can_modify_password: bool = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        self.aliyun_uid = aliyun_uid
        # Indicates whether the password can be modified. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.can_modify_password = can_modify_password
        # The name of the database from which the objects are migrated in the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The source instance ID.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The system ID (SID) of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-Real Application Cluster (RAC) architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the Resource Access Management (RAM) role configured for the Alibaba Cloud account to which the source instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.can_modify_password is not None:
            result['CanModifyPassword'] = self.can_modify_password
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('CanModifyPassword') is not None:
            self.can_modify_password = m.get('CanModifyPassword')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration or initial full data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of full data migration or initial full data synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization.
        self.percent = percent
        # The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **Checking**: The task is in precheck.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the destination instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database to which the objects are migrated in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The destination instance ID.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_extract_transform_load: bool = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether data transformation is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_extract_transform_load = data_extract_transform_load
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_extract_transform_load is not None:
            result['DataExtractTransformLoad'] = self.data_extract_transform_load
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataExtractTransformLoad') is not None:
            self.data_extract_transform_load = m.get('DataExtractTransformLoad')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: Mbit/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # *   **Success**\
        # *   **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method used to fix the precheck failure.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the task failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobRetryState(TeaModel):
    def __init__(
        self,
        err_msg: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned.
        self.err_msg = err_msg
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS performs retries.
        self.module = module
        # The number of retries.
        self.retry_count = retry_count
        # The object on which the retries are performed. Valid values:
        # 
        # *   **srcDB**: the source database.
        # *   **destDB**: the destination database.
        # *   **inner_module**: an internal module of DTS.
        self.retry_target = retry_target
        # The time that has elapsed from the point in time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration or initial full data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of full data migration or initial full data synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization.
        self.percent = percent
        # The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **Checking**: The task is in precheck.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the destination instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database to which the objects are migrated in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The destination instance ID.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_extract_transform_load: bool = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether data transformation is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_extract_transform_load = data_extract_transform_load
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_extract_transform_load is not None:
            result['DataExtractTransformLoad'] = self.data_extract_transform_load
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataExtractTransformLoad') is not None:
            self.data_extract_transform_load = m.get('DataExtractTransformLoad')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: Mbit/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # *   **Success**\
        # *   **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method used to fix the precheck failure.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the task failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState(TeaModel):
    def __init__(
        self,
        err_msg: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned.
        self.err_msg = err_msg
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS performs retries.
        self.module = module
        # The number of retries.
        self.retry_count = retry_count
        # The object on which the retries are performed. Valid values:
        # 
        # *   **srcDB**: the source database.
        # *   **destDB**: the destination database.
        # *   **inner_module**: an internal module of DTS.
        self.retry_target = retry_target
        # The time that has elapsed from the point in time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database from which the objects are migrated in the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The source instance ID.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # Error message indicating task failure.
        self.error_message = error_message
        # Whether to display upgrade specifications, return value:
        # - True: Yes.
        # - False: No.
        self.need_upgrade = need_upgrade
        # Initialization progress of library table structure, measured in percentage.
        self.percent = percent
        # The number of tables that have completed library table structure initialization.
        self.progress = progress
        # The initialization status of the library table structure includes:
        # - NotStarted: Not started.
        # - Migration: In the process of initialization.
        # - Failed: Initialization failed.
        # - Finished: Initialization completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether DDL statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.ddl = ddl
        # Indicates whether DML statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['Ddl'] = self.ddl
        if self.dml is not None:
            result['Dml'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ddl') is not None:
            self.ddl = m.get('Ddl')
        if m.get('Dml') is not None:
            self.dml = m.get('Dml')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpc_host: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpc_host = vpc_host

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpc_host is not None:
            result['VpcHost'] = self.vpc_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VpcHost') is not None:
            self.vpc_host = m.get('VpcHost')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        creator: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        region_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        scope: str = None,
        src_region: str = None,
        tag_category: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The Alibaba Cloud account ID.
        self.ali_uid = ali_uid
        # The operator of the tag.
        self.creator = creator
        # The time when the task was created.
        self.gmt_create = gmt_create
        # The time when the task was modified.
        self.gmt_modified = gmt_modified
        # The primary key of the table.
        self.id = id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.resource_id = resource_id
        # The resource type.
        self.resource_type = resource_type
        # Indicates whether the tag is visible. Valid values:
        # 
        # *   **0**: The tag is public.
        # *   **1**: The tag is private.
        self.scope = scope
        # The ID of the region in which the DTS task resides.
        # 
        # > In most cases, the ID of the region in which the destination instance resides is returned.
        self.src_region = src_region
        # The type of the tag. Valid values:
        # 
        # *   **System**: The tag was created by the system.
        # *   **Custom**: The tag was created by a user.
        # 
        # > By default, if the parameter is left empty, custom tags and system tags are returned.
        self.tag_category = tag_category
        # The tag key.
        self.tag_key = tag_key
        # The tag value.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        if self.src_region is not None:
            result['SrcRegion'] = self.src_region
        if self.tag_category is not None:
            result['TagCategory'] = self.tag_category
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        if m.get('SrcRegion') is not None:
            self.src_region = m.get('SrcRegion')
        if m.get('TagCategory') is not None:
            self.tag_category = m.get('TagCategory')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_etl_status: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus = None,
        database_count: int = None,
        db_object: str = None,
        delay: int = None,
        dest_net_type: str = None,
        destination_endpoint: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        etl_calculator: str = None,
        expire_time: str = None,
        finish_time: str = None,
        group_id: str = None,
        is_demo_job: bool = None,
        job_type: str = None,
        max_du: float = None,
        migration_mode: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode = None,
        min_du: float = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance = None,
        precheck_status: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus = None,
        reserved: str = None,
        retry_state: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState = None,
        reverse_job: Any = None,
        source_endpoint: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType = None,
        subscription_host: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost = None,
        synchronization_direction: str = None,
        tag_list: List[DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList] = None,
        task_type: str = None,
    ):
        # Indicates whether the new change tracking feature is used.
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the ETL task.
        # 
        # > This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data migration or initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
        self.database_count = database_count
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The latency of incremental data migration or synchronization. Unit: milliseconds.
        self.delay = delay
        # The network type of the consumer client. Valid values:
        # 
        # *   **CLASSIC**: classic network.
        # *   **VPC**: VPC.
        self.dest_net_type = dest_net_type
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The DTS instance ID.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The DTS task ID.
        self.dts_job_id = dts_job_id
        # The DTS instance name.
        self.dts_job_name = dts_job_name
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if the task failed.
        self.error_message = error_message
        # The operator information of the ETL task.
        # 
        # > This parameter is returned only if you query the details of an ETL task.
        self.etl_calculator = etl_calculator
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the return value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.finish_time = finish_time
        # The resource group ID.
        self.group_id = group_id
        # Indicates whether the task is a subtask. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.is_demo_job = is_demo_job
        # The type of the DTS task. Valid values:
        # 
        # *   **online**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **SUBSCRIBE**: change tracking task.
        self.job_type = job_type
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The minimum number of DTS Units (DUs).
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        # The source of the task. Valid values:
        # 
        # *   **PTS**\
        # *   **DMS**\
        # *   **DTS**\
        self.origin_type = origin_type
        # The billing method. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction.
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of initial schema synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status
        # Initialization status of library table structure.
        self.structure_initialization_status = structure_initialization_status
        # The topic of the change tracking instance.
        # 
        # > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The type of data for change tracking.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The tags of the task.
        self.tag_list = tag_list
        # The task type.
        self.task_type = task_type

    def validate(self):
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.dest_net_type is not None:
            result['DestNetType'] = self.dest_net_type
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_calculator is not None:
            result['EtlCalculator'] = self.etl_calculator
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.is_demo_job is not None:
            result['IsDemoJob'] = self.is_demo_job
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestNetType') is not None:
            self.dest_net_type = m.get('DestNetType')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlCalculator') is not None:
            self.etl_calculator = m.get('EtlCalculator')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsDemoJob') is not None:
            self.is_demo_job = m.get('IsDemoJob')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            self.reverse_job = m.get('ReverseJob')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList()
                self.tag_list.append(temp_model.from_map(k))
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database from which the objects are migrated in the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The source instance ID.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # Error message.
        self.error_message = error_message
        # Whether to display upgrade specifications, return value:
        # - True: Yes.
        # - False: No.
        self.need_upgrade = need_upgrade
        # Initialization progress of library table structure, measured in percentage.
        self.percent = percent
        # The number of tables that have completed library table structure initialization.
        self.progress = progress
        # The initialization status of the library table structure includes:
        # - NotStarted: Not started.
        # - Migration: In the process of initialization.
        # - Failed: Initialization failed.
        # - Finished: Initialization completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether DDL statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.ddl = ddl
        # Indicates whether DML statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['Ddl'] = self.ddl
        if self.dml is not None:
            result['Dml'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ddl') is not None:
            self.ddl = m.get('Ddl')
        if m.get('Dml') is not None:
            self.dml = m.get('Dml')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpc_host: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpc_host = vpc_host

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpc_host is not None:
            result['VpcHost'] = self.vpc_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VpcHost') is not None:
            self.vpc_host = m.get('VpcHost')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJobTagList(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        creator: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        region_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        scope: str = None,
        src_region: str = None,
        tag_category: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The Alibaba Cloud account ID.
        self.ali_uid = ali_uid
        # The operator of the tag.
        self.creator = creator
        # The time when the task was created.
        self.gmt_create = gmt_create
        # The time when the task was modified.
        self.gmt_modified = gmt_modified
        # The primary key of the table.
        self.id = id
        # The ID of the region in which the DTS task resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.resource_id = resource_id
        # The resource type.
        self.resource_type = resource_type
        # Indicates whether the tag is visible. Valid values:
        # 
        # *   **0**: The tag is public.
        # *   **1**: The tag is private.
        self.scope = scope
        # The ID of the region in which the DTS task resides.
        # 
        # > In most cases, the ID of the region in which the destination instance resides is returned.
        self.src_region = src_region
        # The type of the tag. Valid values:
        # 
        # *   **System**: The tag was created by the system.
        # *   **Custom**: The tag was created by a user.
        # 
        # > By default, if the parameter is left empty, custom tags and system tags are returned.
        self.tag_category = tag_category
        # The tag key.
        self.tag_key = tag_key
        # The tag value.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        if self.src_region is not None:
            result['SrcRegion'] = self.src_region
        if self.tag_category is not None:
            result['TagCategory'] = self.tag_category
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        if m.get('SrcRegion') is not None:
            self.src_region = m.get('SrcRegion')
        if m.get('TagCategory') is not None:
            self.tag_category = m.get('TagCategory')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobDetailResponseBodySubDistributedJob(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_etl_status: DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus = None,
        database_count: int = None,
        db_object: str = None,
        delay: int = None,
        dest_net_type: str = None,
        destination_endpoint: DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        etl_calculator: str = None,
        expire_time: str = None,
        finish_time: str = None,
        group_id: str = None,
        is_demo_job: bool = None,
        job_type: str = None,
        max_du: float = None,
        migration_mode: DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode = None,
        min_du: float = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobDetailResponseBodySubDistributedJobPerformance = None,
        precheck_status: DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus = None,
        reserved: str = None,
        retry_state: DescribeDtsJobDetailResponseBodySubDistributedJobRetryState = None,
        reverse_job: DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob = None,
        source_endpoint: DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus = None,
        sub_sync_job: List[Any] = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType = None,
        subscription_host: DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost = None,
        synchronization_direction: str = None,
        tag_list: List[DescribeDtsJobDetailResponseBodySubDistributedJobTagList] = None,
        task_type: str = None,
    ):
        # Indicates whether the new change tracking feature is used.
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the ETL task.
        # 
        # > This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data migration or initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
        self.database_count = database_count
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The latency of incremental data migration or synchronization. Unit: milliseconds.
        self.delay = delay
        # The network type of the consumer client. Valid values:
        # 
        # *   **CLASSIC**: classic network.
        # *   **VPC**: VPC.
        self.dest_net_type = dest_net_type
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The DTS instance ID.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The DTS task ID.
        self.dts_job_id = dts_job_id
        # The DTS instance name.
        self.dts_job_name = dts_job_name
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if the task failed.
        self.error_message = error_message
        # The operator information of the ETL task.
        # 
        # > This parameter is returned only if you query the details of an ETL task.
        self.etl_calculator = etl_calculator
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the return value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.finish_time = finish_time
        # The resource group ID.
        self.group_id = group_id
        # Indicates whether the task is a subtask. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.is_demo_job = is_demo_job
        # The type of the DTS task. Valid values:
        # 
        # *   **online**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **SUBSCRIBE**: change tracking task.
        self.job_type = job_type
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The minimum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        # The source of the task. Valid values:
        # 
        # *   **PTS**\
        # *   **DMS**\
        # *   **DTS**\
        self.origin_type = origin_type
        # The billing method. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction.
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of initial schema synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status
        # Initialization status of library table structure.
        self.structure_initialization_status = structure_initialization_status
        # The information about the subtasks in the current data synchronization task.
        self.sub_sync_job = sub_sync_job
        # The topic of the change tracking instance.
        # 
        # > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The type of data for change tracking.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The tags of the task.
        self.tag_list = tag_list
        # The task type.
        self.task_type = task_type

    def validate(self):
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.reverse_job:
            self.reverse_job.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.dest_net_type is not None:
            result['DestNetType'] = self.dest_net_type
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_calculator is not None:
            result['EtlCalculator'] = self.etl_calculator
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.is_demo_job is not None:
            result['IsDemoJob'] = self.is_demo_job
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.sub_sync_job is not None:
            result['SubSyncJob'] = self.sub_sync_job
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestNetType') is not None:
            self.dest_net_type = m.get('DestNetType')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlCalculator') is not None:
            self.etl_calculator = m.get('EtlCalculator')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsDemoJob') is not None:
            self.is_demo_job = m.get('IsDemoJob')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob()
            self.reverse_job = temp_model.from_map(m['ReverseJob'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('SubSyncJob') is not None:
            self.sub_sync_job = m.get('SubSyncJob')
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobDetailResponseBodySubDistributedJobTagList()
                self.tag_list.append(temp_model.from_map(k))
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration or initial full data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of full data migration or initial full data synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization.
        self.percent = percent
        # The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **Checking**: The task is in precheck.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the destination instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database to which the objects are migrated in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The destination instance ID.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_extract_transform_load: bool = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether data transformation is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_extract_transform_load = data_extract_transform_load
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_extract_transform_load is not None:
            result['DataExtractTransformLoad'] = self.data_extract_transform_load
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataExtractTransformLoad') is not None:
            self.data_extract_transform_load = m.get('DataExtractTransformLoad')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: Mbit/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # *   **Success**\
        # *   **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method used to fix the precheck failure.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the task failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobRetryState(TeaModel):
    def __init__(
        self,
        err_msg: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned.
        self.err_msg = err_msg
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS performs retries.
        self.module = module
        # The number of retries.
        self.retry_count = retry_count
        # The object on which the retries are performed. Valid values:
        # 
        # *   **srcDB**: the source database.
        # *   **destDB**: the destination database.
        # *   **inner_module**: an internal module of DTS.
        self.retry_target = retry_target
        # The time that has elapsed from the point in time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration or initial full data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that are migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of full data migration or initial full data synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance class needs to be upgraded. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization.
        self.percent = percent
        # The number of rows and size of data that is synchronized or migrated to the destination table per second during incremental data synchronization or migration.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **Checking**: The task is in precheck.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task has no latency.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the destination instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database to which the objects are migrated in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The destination instance ID.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the destination instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_extract_transform_load: bool = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether data transformation is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_extract_transform_load = data_extract_transform_load
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_extract_transform_load is not None:
            result['DataExtractTransformLoad'] = self.data_extract_transform_load
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataExtractTransformLoad') is not None:
            self.data_extract_transform_load = m.get('DataExtractTransformLoad')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: Mbit/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # *   **Success**\
        # *   **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method used to fix the precheck failure.
        # 
        # > This parameter is returned only if the return value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the task failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState(TeaModel):
    def __init__(
        self,
        err_msg: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned.
        self.err_msg = err_msg
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS performs retries.
        self.module = module
        # The number of retries.
        self.retry_count = retry_count
        # The object on which the retries are performed. Valid values:
        # 
        # *   **srcDB**: the source database.
        # *   **destDB**: the destination database.
        # *   **inner_module**: an internal module of DTS.
        self.retry_target = retry_target
        # The time that has elapsed from the point in time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database from which the objects are migrated in the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The DTS instance ID.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # Error message indicating task failure.
        self.error_message = error_message
        # Whether to display upgrade specifications, return value:
        # 
        # - True: Yes.
        # - False: No.
        self.need_upgrade = need_upgrade
        # Initialization progress of library table structure, measured in percentage.
        self.percent = percent
        # The number of tables that have completed library table structure initialization.
        self.progress = progress
        # The initialization status of the library table structure includes:
        # 
        # - NotStarted: Not started.
        # - Migration: In the process of initialization.
        # - Failed: Initialization failed.
        # - Finished: Initialization completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether DDL statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.ddl = ddl
        # Indicates whether DML statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['Ddl'] = self.ddl
        if self.dml is not None:
            result['Dml'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ddl') is not None:
            self.ddl = m.get('Ddl')
        if m.get('Dml') is not None:
            self.dml = m.get('Dml')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpc_host: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpc_host = vpc_host

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpc_host is not None:
            result['VpcHost'] = self.vpc_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VpcHost') is not None:
            self.vpc_host = m.get('VpcHost')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        creator: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        region_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        scope: str = None,
        src_region: str = None,
        tag_category: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The Alibaba Cloud account ID.
        self.ali_uid = ali_uid
        # The operator of the tag.
        self.creator = creator
        # The time when the task was created.
        self.gmt_create = gmt_create
        # The time when the task was modified.
        self.gmt_modified = gmt_modified
        # The primary key of the table.
        self.id = id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.resource_id = resource_id
        # The resource type.
        self.resource_type = resource_type
        # Indicates whether the tag is visible. Valid values:
        # 
        # *   **0**: The tag is public.
        # *   **1**: The tag is private.
        self.scope = scope
        # The ID of the region in which the DTS task resides.
        # 
        # > In most cases, the ID of the region in which the destination instance resides is returned.
        self.src_region = src_region
        # The type of the tag. Valid values:
        # 
        # *   **System**: The tag was created by the system.
        # *   **Custom**: The tag was created by a user.
        # 
        # > By default, if the parameter is left empty, custom tags and system tags are returned.
        self.tag_category = tag_category
        # The tag key.
        self.tag_key = tag_key
        # The tag value.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        if self.src_region is not None:
            result['SrcRegion'] = self.src_region
        if self.tag_category is not None:
            result['TagCategory'] = self.tag_category
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        if m.get('SrcRegion') is not None:
            self.src_region = m.get('SrcRegion')
        if m.get('TagCategory') is not None:
            self.tag_category = m.get('TagCategory')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobReverseJob(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_etl_status: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus = None,
        database_count: int = None,
        db_object: str = None,
        delay: int = None,
        dest_net_type: str = None,
        destination_endpoint: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        etl_calculator: str = None,
        expire_time: str = None,
        finish_time: str = None,
        group_id: str = None,
        is_demo_job: bool = None,
        job_type: str = None,
        migration_mode: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance = None,
        precheck_status: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus = None,
        reserved: str = None,
        retry_state: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState = None,
        reverse_job: Any = None,
        source_endpoint: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType = None,
        subscription_host: DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost = None,
        synchronization_direction: str = None,
        tag_list: List[DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList] = None,
        task_type: str = None,
    ):
        # Indicates whether the new change tracking feature is used.
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the ETL task.
        # 
        # > This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data migration or initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
        self.database_count = database_count
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The latency of incremental data migration or synchronization. Unit: milliseconds.
        self.delay = delay
        # The network type of the consumer client. Valid values:
        # 
        # *   **CLASSIC**: classic network.
        # *   **VPC**: VPC.
        self.dest_net_type = dest_net_type
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The DTS instance ID.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The DTS task ID.
        self.dts_job_id = dts_job_id
        # The DTS instance name.
        self.dts_job_name = dts_job_name
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if the task failed.
        self.error_message = error_message
        # The operator information of the ETL task.
        # 
        # > This parameter is returned only if you query the details of an ETL task.
        self.etl_calculator = etl_calculator
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the return value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.finish_time = finish_time
        # The resource group ID.
        self.group_id = group_id
        # Indicates whether the task is a subtask. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.is_demo_job = is_demo_job
        # The type of the DTS task. Valid values:
        # 
        # *   **online**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **SUBSCRIBE**: change tracking task.
        self.job_type = job_type
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The source of the task. Valid values:
        # 
        # *   **PTS**\
        # *   **DMS**\
        # *   **DTS**\
        self.origin_type = origin_type
        # The billing method. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction.
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of initial schema synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status
        # Initialization status of library table structure.
        self.structure_initialization_status = structure_initialization_status
        # The topic of the change tracking instance.
        # 
        # > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The type of data for change tracking.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The tags of the task.
        self.tag_list = tag_list
        # The task type.
        self.task_type = task_type

    def validate(self):
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.dest_net_type is not None:
            result['DestNetType'] = self.dest_net_type
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_calculator is not None:
            result['EtlCalculator'] = self.etl_calculator
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.is_demo_job is not None:
            result['IsDemoJob'] = self.is_demo_job
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestNetType') is not None:
            self.dest_net_type = m.get('DestNetType')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlCalculator') is not None:
            self.etl_calculator = m.get('EtlCalculator')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsDemoJob') is not None:
            self.is_demo_job = m.get('IsDemoJob')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            self.reverse_job = m.get('ReverseJob')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList()
                self.tag_list.append(temp_model.from_map(k))
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        role_name: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs.
        self.aliyun_uid = aliyun_uid
        # The name of the database from which the objects are migrated in the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The source instance ID.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # > This parameter is returned only if the return value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # The name of the RAM role configured for the Alibaba Cloud account to which the source instance belongs.
        self.role_name = role_name
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # Error message indicating task failure.
        self.error_message = error_message
        # Whether to display upgrade specifications, return value:
        # - True: Yes.
        # - False: No.
        self.need_upgrade = need_upgrade
        # Initialization progress of library table structure, measured in percentage.
        self.percent = percent
        # The number of tables that have completed library table structure initialization.
        self.progress = progress
        # The initialization status of the library table structure includes:
        # - NotStarted: Not started.
        # - Migration: In the process of initialization.
        # - Failed: Initialization failed.
        # - Finished: Initialization completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether DDL statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.ddl = ddl
        # Indicates whether DML statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['Ddl'] = self.ddl
        if self.dml is not None:
            result['Dml'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ddl') is not None:
            self.ddl = m.get('Ddl')
        if m.get('Dml') is not None:
            self.dml = m.get('Dml')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpc_host: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpc_host = vpc_host

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpc_host is not None:
            result['VpcHost'] = self.vpc_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VpcHost') is not None:
            self.vpc_host = m.get('VpcHost')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJobTagList(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        creator: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        region_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
        scope: str = None,
        src_region: str = None,
        tag_category: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The Alibaba Cloud account ID.
        self.ali_uid = ali_uid
        # The operator of the tag.
        self.creator = creator
        # The time when the task was created.
        self.gmt_create = gmt_create
        # The time when the task was modified.
        self.gmt_modified = gmt_modified
        # The primary key of the table.
        self.id = id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.resource_id = resource_id
        # The resource type.
        self.resource_type = resource_type
        # Indicates whether the tag is visible. Valid values:
        # 
        # *   **0**: The tag is public.
        # *   **1**: The tag is private.
        self.scope = scope
        # The ID of the region in which the DTS task resides.
        # 
        # > In most cases, the ID of the region in which the destination instance resides is returned.
        self.src_region = src_region
        # The type of the tag. Valid values:
        # 
        # *   **System**: The tag was created by the system.
        # *   **Custom**: The tag was created by a user.
        # 
        # > By default, if the parameter is left empty, custom tags and system tags are returned.
        self.tag_category = tag_category
        # The tag key.
        self.tag_key = tag_key
        # The tag value.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        if self.src_region is not None:
            result['SrcRegion'] = self.src_region
        if self.tag_category is not None:
            result['TagCategory'] = self.tag_category
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        if m.get('SrcRegion') is not None:
            self.src_region = m.get('SrcRegion')
        if m.get('TagCategory') is not None:
            self.tag_category = m.get('TagCategory')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobDetailResponseBodySubSyncJob(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_etl_status: DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus = None,
        database_count: int = None,
        db_object: str = None,
        delay: int = None,
        dest_net_type: str = None,
        destination_endpoint: DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        etl_calculator: str = None,
        expire_time: str = None,
        finish_time: str = None,
        group_id: str = None,
        is_demo_job: bool = None,
        job_type: str = None,
        max_du: float = None,
        migration_mode: DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode = None,
        min_du: float = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobDetailResponseBodySubSyncJobPerformance = None,
        precheck_status: DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus = None,
        reserved: str = None,
        retry_state: DescribeDtsJobDetailResponseBodySubSyncJobRetryState = None,
        reverse_job: DescribeDtsJobDetailResponseBodySubSyncJobReverseJob = None,
        source_endpoint: DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus = None,
        sub_sync_job: List[Any] = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType = None,
        subscription_host: DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost = None,
        synchronization_direction: str = None,
        tag_list: List[DescribeDtsJobDetailResponseBodySubSyncJobTagList] = None,
        task_type: str = None,
    ):
        # Indicates whether the new change tracking feature is used.
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the ETL task.
        # 
        # > This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data migration or initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
        self.database_count = database_count
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The latency of incremental data migration or synchronization. Unit: milliseconds.
        self.delay = delay
        # The network type of the consumer client. Valid values:
        # 
        # *   **CLASSIC**: classic network.
        # *   **VPC**: VPC.
        self.dest_net_type = dest_net_type
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The DTS instance ID.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The DTS task ID.
        self.dts_job_id = dts_job_id
        # The DTS instance name.
        self.dts_job_name = dts_job_name
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if the task failed.
        self.error_message = error_message
        # The operator information of the ETL task.
        # 
        # > This parameter is returned only if you query the details of an ETL task.
        self.etl_calculator = etl_calculator
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the return value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.finish_time = finish_time
        # The resource group ID.
        self.group_id = group_id
        # Indicates whether the task is a subtask. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.is_demo_job = is_demo_job
        # The type of the DTS task. Valid values:
        # 
        # *   **online**: data migration task.
        # *   **SYNC**: data synchronization task.
        # *   **SUBSCRIBE**: change tracking task.
        self.job_type = job_type
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The minimum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        # The source of the task. Valid values:
        # 
        # *   **PTS**\
        # *   **DMS**\
        # *   **DTS**\
        self.origin_type = origin_type
        # The billing method. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction.
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of initial schema synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status
        # Initialization status of library table structure.
        self.structure_initialization_status = structure_initialization_status
        # The information about the subtasks in the current data synchronization task.
        self.sub_sync_job = sub_sync_job
        # The topic of the change tracking instance.
        # 
        # > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The type of data for change tracking.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The tags of the task.
        self.tag_list = tag_list
        # The task type.
        self.task_type = task_type

    def validate(self):
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.reverse_job:
            self.reverse_job.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.dest_net_type is not None:
            result['DestNetType'] = self.dest_net_type
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_calculator is not None:
            result['EtlCalculator'] = self.etl_calculator
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.is_demo_job is not None:
            result['IsDemoJob'] = self.is_demo_job
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.sub_sync_job is not None:
            result['SubSyncJob'] = self.sub_sync_job
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestNetType') is not None:
            self.dest_net_type = m.get('DestNetType')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlCalculator') is not None:
            self.etl_calculator = m.get('EtlCalculator')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('IsDemoJob') is not None:
            self.is_demo_job = m.get('IsDemoJob')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobReverseJob()
            self.reverse_job = temp_model.from_map(m['ReverseJob'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('SubSyncJob') is not None:
            self.sub_sync_job = m.get('SubSyncJob')
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobDetailResponseBodySubSyncJobTagList()
                self.tag_list.append(temp_model.from_map(k))
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        return self


class DescribeDtsJobDetailResponseBodySubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether DDL statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.ddl = ddl
        # Indicates whether DML statements are tracked. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['Ddl'] = self.ddl
        if self.dml is not None:
            result['Dml'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ddl') is not None:
            self.ddl = m.get('Ddl')
        if m.get('Dml') is not None:
            self.dml = m.get('Dml')
        return self


class DescribeDtsJobDetailResponseBodySubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpc_host: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The VPC endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpc_host = vpc_host

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpc_host is not None:
            result['VpcHost'] = self.vpc_host
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VpcHost') is not None:
            self.vpc_host = m.get('VpcHost')
        return self


class DescribeDtsJobDetailResponseBody(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        binlog: str = None,
        binlog_site: str = None,
        binlog_time: str = None,
        boot_time: str = None,
        checkpoint: int = None,
        code: int = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_delivery_channel_info: DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo = None,
        data_synchronization_status: DescribeDtsJobDetailResponseBodyDataSynchronizationStatus = None,
        database_count: int = None,
        db_object: str = None,
        dedicated_cluster_id: str = None,
        delay: int = None,
        demo_job: bool = None,
        dest_net_type: str = None,
        destination_endpoint: DescribeDtsJobDetailResponseBodyDestinationEndpoint = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        dynamic_message: str = None,
        end_timestamp: str = None,
        err_code: str = None,
        err_message: str = None,
        error_message: str = None,
        etl_calculator: str = None,
        expire_time: str = None,
        finish_time: str = None,
        group_id: str = None,
        http_status_code: int = None,
        job_type: str = None,
        last_update_time: str = None,
        max_du: float = None,
        migration_mode: DescribeDtsJobDetailResponseBodyMigrationMode = None,
        min_du: float = None,
        pay_type: str = None,
        request_id: str = None,
        reserved: str = None,
        resource_group_display_name: str = None,
        resource_group_id: str = None,
        retry_state: DescribeDtsJobDetailResponseBodyRetryState = None,
        source_endpoint: DescribeDtsJobDetailResponseBodySourceEndpoint = None,
        status: str = None,
        sub_distributed_job: List[DescribeDtsJobDetailResponseBodySubDistributedJob] = None,
        sub_sync_job: List[DescribeDtsJobDetailResponseBodySubSyncJob] = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeDtsJobDetailResponseBodySubscriptionDataType = None,
        subscription_host: DescribeDtsJobDetailResponseBodySubscriptionHost = None,
        success: bool = None,
        synchronization_direction: str = None,
        task_type: str = None,
    ):
        # Indicates whether the new change tracking feature is used.
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The binary logs.
        self.binlog = binlog
        # The current offset.
        self.binlog_site = binlog_site
        # The offset range.
        self.binlog_time = binlog_time
        # The time when the task was started. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.boot_time = boot_time
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp. Unit: seconds.
        self.checkpoint = checkpoint
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The information about the data shipping channel.
        self.data_delivery_channel_info = data_delivery_channel_info
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
        self.database_count = database_count
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The dedicated cluster ID.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The latency of incremental data migration or synchronization. Unit: milliseconds.
        self.delay = delay
        # Indicates whether the task is a subtask. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.demo_job = demo_job
        # The network type of the consumer client. Valid values:
        # 
        # *   **CLASSIC**: classic network.
        # *   **VPC**: virtual private cloud (VPC).
        self.dest_net_type = dest_net_type
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The environment tag of the DTS instance. Valid values:
        # 
        # *   **normal******\
        # *   **online******\
        self.dts_bis_label = dts_bis_label
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        # 
        # > For more information about the description and test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The name of the data migration, data synchronization, or change tracking task.
        self.dts_job_name = dts_job_name
        # The dynamic part in the error message. The value of this parameter is used to replace **%s** in the value of **ErrMessage**.
        # 
        # > For example, if the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.
        self.dynamic_message = dynamic_message
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The error message returned if the task failed.
        self.error_message = error_message
        # The operator information of the ETL task.
        # 
        # > This parameter is returned only if you query the details of an ETL task.
        self.etl_calculator = etl_calculator
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the return value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The time when the task was complete. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.finish_time = finish_time
        # The resource group ID.
        self.group_id = group_id
        # The returned HTTP status code.
        self.http_status_code = http_status_code
        # The type of the DTS task. Valid values:
        # 
        # *   **sync**: a data synchronization task.
        # *   **subSync**: a subtask generated when the objects to be synchronized are modified.
        # 
        # > In most cases, this parameter is returned together with **TaskType**.
        self.job_type = job_type
        # The timestamp when the task was last updated.
        self.last_update_time = last_update_time
        # The maximum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.max_du = max_du
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The minimum number of DUs.
        # 
        # > This parameter is supported only for serverless instances.
        self.min_du = min_du
        # The billing method of the DTS instance. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        self.pay_type = pay_type
        # The request ID.
        self.request_id = request_id
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, such as whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The resource group name.
        self.resource_group_display_name = resource_group_display_name
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of the data migration or synchronization task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **NotConfigured**: The task is not configured.
        # *   **Prechecking**: The task is in precheck.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **Initializing**: Initial data synchronization is in progress.
        # *   **InitializeFailed**: Initial data synchronization failed.
        # *   **synchronizing**: Data synchronization is in progress.
        # *   **Migrating**: Data migration is in progress.
        # *   **Failed**: Data synchronization failed.
        # *   **MigrationFailed**: Data migration failed.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects of the task are being modified.
        # *   **Retrying**: The task is being retried.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Downgrade**: The task is being downgraded.
        # *   **Locked**: The task is locked.
        # *   **Finished**: The task is complete.
        self.status = status
        # The information about the subtasks in the current distributed task. If the DTS task is not a distributed task, the value of this parameter is null.
        # 
        # > This parameter is available only if the DTS task is a data synchronization task.
        self.sub_distributed_job = sub_distributed_job
        # The information about the subtasks in the current data synchronization task.
        self.sub_sync_job = sub_sync_job
        # The topic of the change tracking instance.
        # 
        # > This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The type of data for change tracking.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # Indicates whether the request was successful.
        self.success = success
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The type of the task.
        # 
        # > In most cases, this parameter is returned together with **JobType**.
        self.task_type = task_type

    def validate(self):
        if self.data_delivery_channel_info:
            self.data_delivery_channel_info.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.sub_distributed_job:
            for k in self.sub_distributed_job:
                if k:
                    k.validate()
        if self.sub_sync_job:
            for k in self.sub_sync_job:
                if k:
                    k.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.binlog is not None:
            result['Binlog'] = self.binlog
        if self.binlog_site is not None:
            result['BinlogSite'] = self.binlog_site
        if self.binlog_time is not None:
            result['BinlogTime'] = self.binlog_time
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.code is not None:
            result['Code'] = self.code
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_delivery_channel_info is not None:
            result['DataDeliveryChannelInfo'] = self.data_delivery_channel_info.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.database_count is not None:
            result['DatabaseCount'] = self.database_count
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.demo_job is not None:
            result['DemoJob'] = self.demo_job
        if self.dest_net_type is not None:
            result['DestNetType'] = self.dest_net_type
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_calculator is not None:
            result['EtlCalculator'] = self.etl_calculator
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.last_update_time is not None:
            result['LastUpdateTime'] = self.last_update_time
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_display_name is not None:
            result['ResourceGroupDisplayName'] = self.resource_group_display_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        result['SubDistributedJob'] = []
        if self.sub_distributed_job is not None:
            for k in self.sub_distributed_job:
                result['SubDistributedJob'].append(k.to_map() if k else None)
        result['SubSyncJob'] = []
        if self.sub_sync_job is not None:
            for k in self.sub_sync_job:
                result['SubSyncJob'].append(k.to_map() if k else None)
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.task_type is not None:
            result['TaskType'] = self.task_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Binlog') is not None:
            self.binlog = m.get('Binlog')
        if m.get('BinlogSite') is not None:
            self.binlog_site = m.get('BinlogSite')
        if m.get('BinlogTime') is not None:
            self.binlog_time = m.get('BinlogTime')
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataDeliveryChannelInfo') is not None:
            temp_model = DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo()
            self.data_delivery_channel_info = temp_model.from_map(m['DataDeliveryChannelInfo'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobDetailResponseBodyDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DatabaseCount') is not None:
            self.database_count = m.get('DatabaseCount')
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DemoJob') is not None:
            self.demo_job = m.get('DemoJob')
        if m.get('DestNetType') is not None:
            self.dest_net_type = m.get('DestNetType')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodyDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlCalculator') is not None:
            self.etl_calculator = m.get('EtlCalculator')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('LastUpdateTime') is not None:
            self.last_update_time = m.get('LastUpdateTime')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobDetailResponseBodyMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupDisplayName') is not None:
            self.resource_group_display_name = m.get('ResourceGroupDisplayName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobDetailResponseBodyRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        self.sub_distributed_job = []
        if m.get('SubDistributedJob') is not None:
            for k in m.get('SubDistributedJob'):
                temp_model = DescribeDtsJobDetailResponseBodySubDistributedJob()
                self.sub_distributed_job.append(temp_model.from_map(k))
        self.sub_sync_job = []
        if m.get('SubSyncJob') is not None:
            for k in m.get('SubSyncJob'):
                temp_model = DescribeDtsJobDetailResponseBodySubSyncJob()
                self.sub_sync_job.append(temp_model.from_map(k))
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeDtsJobDetailResponseBodySubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('TaskType') is not None:
            self.task_type = m.get('TaskType')
        return self


class DescribeDtsJobDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDtsJobDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDtsJobDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDtsJobsRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        dest_product_type: str = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        group_id: str = None,
        instance_id: str = None,
        instance_type: str = None,
        job_type: str = None,
        order_column: str = None,
        order_direction: str = None,
        owner_id: str = None,
        page_number: int = None,
        page_size: int = None,
        params: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        src_product_type: str = None,
        status: str = None,
        tags: str = None,
        type: str = None,
        without_db_list: bool = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the DTS dedicated cluster on which the task runs.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The type of the source database instance.
        self.dest_product_type = dest_product_type
        # The environment tag of the DTS instance. Valid values:
        # 
        # - **normal**\
        # - **online**\
        self.dts_bis_label = dts_bis_label
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The ID of the parent task.
        # 
        # >  In most cases, you do not need to specify this parameter.
        self.group_id = group_id
        # The ID of the source or target database instance corresponding to the request parameter **InstanceType**.
        self.instance_id = instance_id
        # The type of the source or target database instance.
        self.instance_type = instance_type
        # The type of the DTS task. Valid values:
        # 
        # *   **MIGRATION**: data migration. This is the default value.
        # *   **SYNC**: data synchronization.
        # *   **SUBSCRIBE**: change tracking.
        self.job_type = job_type
        # The basis on which the returned DTS tasks are sorted. Valid values:
        # 
        # *   **CreateTime**: sorts the DTS tasks based on the points in time when the DTS tasks are created.
        # *   **FinishTime**: sorts the DTS tasks based on the points in time when the DTS tasks are complete.
        # *   **duLimit** sorts the DTS tasks based on the upper limits on DTS Units (DUs) that the DTS tasks can use. This option applies only to the DTS tasks that are run on a DTS dedicated cluster.
        # 
        # >  You can also set the **OrderDirection** parameter to specify whether to sort the DTS tasks in ascending or descending order.
        self.order_column = order_column
        # The order in which the returned DTS tasks are sorted. Valid values:
        # 
        # *   **ASC**: sorts the DTS tasks in ascending order. This is the default value.
        # *   **DESC**: sorts the DTS tasks in descending order.
        self.order_direction = order_direction
        self.owner_id = owner_id
        # The page number. Pages start from page **1**. Default value: **1**.
        self.page_number = page_number
        # The number of entries per page. Valid values: **20**, **30**, **50**, and **100**. Default value: **20**.
        self.page_size = page_size
        # The content of the query condition.
        # 
        # >  You must set the **Type** parameter to specify the type of the query condition.
        self.params = params
        # The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # This parameter is deprecated.
        # 
        # Valid values:
        # 
        # *   cn-hangzhou
        # *   cn-shanghai
        # *   cn-beijing
        # *   cn-guangzhou
        # *   cn-shenzhen
        # *   cn-chengdu
        # *   cn-heyuan
        # *   cn-hongkong
        # *   cn-qingdao
        # *   cn-zhangbei
        # *   cn-zhangjiakou
        # *   us-east-1
        # *   us-west-1
        # *   cn-hangzhou-finance
        # *   cn-shanghai-finance
        # *   cn-shanghai-finance-1
        # *   cn-shenzhen-finance
        # *   cn-shenzhen-finance-1
        # *   cn-beijing-finance-1
        # *   cn-huhehaote
        # *   cn-north-2-gov-1
        # *   eu-central-1
        # *   eu-west-1
        # *   me-central-1
        # *   me-east-1
        # *   ap-northeast-1
        # *   ap-northeast-2
        # *   ap-southeast-1
        # *   ap-southeast-2
        # *   ap-southeast-3
        # *   ap-southeast-5
        # *   ap-southeast-6
        # *   ap-southeast-7
        # *   cn-wulanchabu
        # *   cn-zhengzhou-jva
        # *   cn-wuhan-lr
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The type of the destination database instance.
        self.src_product_type = src_product_type
        # The state of the DTS task.
        # 
        # Valid values for a data migration task:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **NotConfigured**: The task is not configured.
        # *   **Migrating**: The task is in progress.
        # *   **Suspending**: The task is paused.
        # *   **MigrationFailed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Retrying**: The task is being retried.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        # 
        # Valid values for a data synchronization task:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **NotConfigured**: The task is not configured.
        # *   **Initializing**: The task is being initialized.
        # *   **InitializeFailed**: Initialization failed.
        # *   **Synchronizing**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects in the task are being modified.
        # *   **Finished**: The task is complete.
        # *   **Retrying**: The task is being retried.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        # 
        # Valid values for a change tracking task:
        # 
        # *   **NotConfigured**: The task is not configured.
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **PreCheckPass**: The task passed the precheck.
        # *   **Starting**: The task is being started.
        # *   **Normal**: The task is running as expected.
        # *   **Retrying**: The task is being retried.
        # *   **Abnormal**: The task is not running as expected.
        # *   **Upgrade**: The task is being upgraded.
        # *   **Locked**: The task is locked.
        # *   **Downgrade**: The task is being downgraded.
        self.status = status
        # The tags of the DTS task to be queried. Specify tags in the JSON format.
        # 
        # >  You can call the **ListTagResources** operation to query the tag key and tag value.
        self.tags = tags
        # The type of the query condition. Valid values:
        # 
        # *   **instance**: queries DTS tasks based on the ID of a DTS instance.
        # *   **name**: queries DTS tasks based on the name of a DTS instance. Fuzzy match is supported.
        # *   **srcRds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the source instance of a DTS task.
        # *   **rds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the destination instance of a DTS task.
        # 
        # >  You must set the **Params** parameter to specify the content of the query condition.
        self.type = type
        # Specifies whether to skip the **DbObject** parameter in the response. The DbObject parameter specifies the objects of the data migration, data synchronization, or change tracking task. Valid values:
        # 
        # - **true**: does not return **DbObject**.
        # - **false**: returns **DbObject**. If you set this parameter to false, the response time is shortened.
        self.without_db_list = without_db_list
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dest_product_type is not None:
            result['DestProductType'] = self.dest_product_type
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.order_column is not None:
            result['OrderColumn'] = self.order_column
        if self.order_direction is not None:
            result['OrderDirection'] = self.order_direction
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.params is not None:
            result['Params'] = self.params
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.src_product_type is not None:
            result['SrcProductType'] = self.src_product_type
        if self.status is not None:
            result['Status'] = self.status
        if self.tags is not None:
            result['Tags'] = self.tags
        if self.type is not None:
            result['Type'] = self.type
        if self.without_db_list is not None:
            result['WithoutDbList'] = self.without_db_list
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DestProductType') is not None:
            self.dest_product_type = m.get('DestProductType')
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('OrderColumn') is not None:
            self.order_column = m.get('OrderColumn')
        if m.get('OrderDirection') is not None:
            self.order_direction = m.get('OrderDirection')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SrcProductType') is not None:
            self.src_product_type = m.get('SrcProductType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Tags') is not None:
            self.tags = m.get('Tags')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('WithoutDbList') is not None:
            self.without_db_list = m.get('WithoutDbList')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # Indicates whether the instance needs to be upgraded. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.need_upgrade = need_upgrade
        # The progress of the task. Unit: percentage.
        self.percent = percent
        # The number of tables that have been migrated.
        self.progress = progress
        # The state of the task. For more information about the valid values, see the description of the request parameter **Status**.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # The progress of the ETL task.
        self.percent = percent
        # The number of records that have been processed by the ETL task.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data synchronization failed.
        self.error_message = error_message
        # The progress of full data synchronization. This is expressed as a percentage.
        self.percent = percent
        # The number of records that have been synchronized during full data synchronization.
        self.progress = progress
        # The state of full data synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if incremental data migration or synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance needs to be upgraded. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        # 
        # >  To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization.
        self.percent = percent
        # The number of records that have been migrated or synchronized during incremental data migration or synchronization.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Migrating**: The task is in progress.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is complete.
        # *   **Catched**: The task is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database to which the migration object in the destination instance belongs.
        self.database_name = database_name
        # The database type of the destination instance.
        self.engine_name = engine_name
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database.
        # 
        # >  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # *   **DISABLE**: SSL encryption is disabled.
        # *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
        # *   **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
        # *   **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyDtsJobListErrorDetails(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        help_url: str = None,
    ):
        # The error code returned.
        self.error_code = error_code
        # The URL of the documentation.
        self.help_url = help_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.help_url is not None:
            result['HelpUrl'] = self.help_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('HelpUrl') is not None:
            self.help_url = m.get('HelpUrl')
        return self


class DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus(TeaModel):
    def __init__(
        self,
        can_switch: bool = None,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.can_switch = can_switch
        # The error message returned if the task failed.
        self.error_message = error_message
        # The progress of the full data verification task. Unit: percentage.
        self.percent = percent
        # The progress of the full data verification task.
        self.progress = progress
        # The state of the full data verification task. Valid values:
        # 
        # - **NotStarted**: The verification is not started. 
        # - **Checking**: The verification is in progress. 
        # - **Failed**: The verification failed. 
        # - **Finished**: The verification is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_switch is not None:
            result['CanSwitch'] = self.can_switch
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CanSwitch') is not None:
            self.can_switch = m.get('CanSwitch')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # The progress of the incremental data verification task. Unit: percentage.
        self.percent = percent
        # The progress of the incremental data verification task.
        self.progress = progress
        # The state of the incremental data verification task. Valid values:
        # 
        # - **Catched**: The verification is delayed. 
        # - **NotStarted**: The verification is not started. 
        # - **Checking**: The verification is in progress. 
        # - **Failed**: The verification failed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        full_data_check: bool = None,
        inc_data_check: bool = None,
        structure_data_check: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether full data migration or synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_synchronization = data_synchronization
        # Indicates whether full data verification is performed. Valid values:
        # -  **true**: yes
        # -  **false**: no
        self.full_data_check = full_data_check
        # Indicates whether incremental data verification is performed. Valid values:
        # -  **true**: yes
        # -  **false**: no
        self.inc_data_check = inc_data_check
        self.structure_data_check = structure_data_check
        # Indicates whether schema migration or schema synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.full_data_check is not None:
            result['FullDataCheck'] = self.full_data_check
        if self.inc_data_check is not None:
            result['IncDataCheck'] = self.inc_data_check
        if self.structure_data_check is not None:
            result['StructureDataCheck'] = self.structure_data_check
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('FullDataCheck') is not None:
            self.full_data_check = m.get('FullDataCheck')
        if m.get('IncDataCheck') is not None:
            self.inc_data_check = m.get('IncDataCheck')
        if m.get('StructureDataCheck') is not None:
            self.structure_data_check = m.get('StructureDataCheck')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobsResponseBodyDtsJobListPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # *   **Success**\
        # *   **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        # 
        # >  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.
        self.failed_reason = failed_reason
        # The method to fix the precheck failure.
        # 
        # >  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The cause of the precheck failure.
        self.error_message = error_message
        # The precheck progress. This is expressed as a percentage.
        self.percent = percent
        # The precheck status. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Suspending**:
        # *   **Checking**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListRetryState(TeaModel):
    def __init__(
        self,
        err_message: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        migration_err_code: str = None,
        migration_err_help_doc_id: str = None,
        migration_err_help_doc_key: str = None,
        migration_err_msg: str = None,
        migration_err_type: str = None,
        migration_err_workaround: str = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned if these retries failed.
        self.err_message = err_message
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The error code.
        self.migration_err_code = migration_err_code
        # The ID of the error code-related documentation.
        self.migration_err_help_doc_id = migration_err_help_doc_id
        # The key of the error code-related documentation.
        self.migration_err_help_doc_key = migration_err_help_doc_key
        # The error message.
        self.migration_err_msg = migration_err_msg
        # The type of the error code.
        self.migration_err_type = migration_err_type
        # The solution to the error.
        self.migration_err_workaround = migration_err_workaround
        # The progress of the instance when DTS retries.
        self.module = module
        # The number of retries that have been performed.
        self.retry_count = retry_count
        # The object on which these retries are performed. Valid values:
        # 
        # - **srcDB**: the source database 
        # - **destDB**: the destination database 
        # - **inner_module**: an internal module of DTS
        self.retry_target = retry_target
        # The time that has elapsed from the time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.migration_err_code is not None:
            result['MigrationErrCode'] = self.migration_err_code
        if self.migration_err_help_doc_id is not None:
            result['MigrationErrHelpDocId'] = self.migration_err_help_doc_id
        if self.migration_err_help_doc_key is not None:
            result['MigrationErrHelpDocKey'] = self.migration_err_help_doc_key
        if self.migration_err_msg is not None:
            result['MigrationErrMsg'] = self.migration_err_msg
        if self.migration_err_type is not None:
            result['MigrationErrType'] = self.migration_err_type
        if self.migration_err_workaround is not None:
            result['MigrationErrWorkaround'] = self.migration_err_workaround
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('MigrationErrCode') is not None:
            self.migration_err_code = m.get('MigrationErrCode')
        if m.get('MigrationErrHelpDocId') is not None:
            self.migration_err_help_doc_id = m.get('MigrationErrHelpDocId')
        if m.get('MigrationErrHelpDocKey') is not None:
            self.migration_err_help_doc_key = m.get('MigrationErrHelpDocKey')
        if m.get('MigrationErrMsg') is not None:
            self.migration_err_msg = m.get('MigrationErrMsg')
        if m.get('MigrationErrType') is not None:
            self.migration_err_type = m.get('MigrationErrType')
        if m.get('MigrationErrWorkaround') is not None:
            self.migration_err_workaround = m.get('MigrationErrWorkaround')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if initial full data synchronization failed.
        self.error_message = error_message
        # The progress of initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been synchronized during initial full data synchronization.
        self.progress = progress
        # The state of initial full data synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if incremental data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance needs to be upgraded. Valid values:
        # 
        # - **true**\
        # - **false**\
        # 
        # > To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.
        self.need_upgrade = need_upgrade
        # The progress of incremental data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
        self.progress = progress
        # The state of incremental data synchronization.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the synchronized objects in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        help_url: str = None,
    ):
        # The error code returned.
        self.error_code = error_code
        # The URL of the documentation.
        self.help_url = help_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.help_url is not None:
            result['HelpUrl'] = self.help_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('HelpUrl') is not None:
            self.help_url = m.get('HelpUrl')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobFullDataCheckStatus(TeaModel):
    def __init__(
        self,
        can_switch: bool = None,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.can_switch = can_switch
        # The error message returned if the task failed.
        self.error_message = error_message
        # The progress of the full data verification task. Unit: percentage.
        self.percent = percent
        # The progress of the full data verification task.
        self.progress = progress
        # The state of the full data verification task. Valid values:
        # 
        # - **NotStarted**: The verification is not started. 
        # - **Checking**: The verification is in progress. 
        # - **Failed**: The verification failed. 
        # - **Finished**: The verification is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_switch is not None:
            result['CanSwitch'] = self.can_switch
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CanSwitch') is not None:
            self.can_switch = m.get('CanSwitch')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobIncDataCheckStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the task failed.
        self.error_message = error_message
        # The progress of the incremental data verification task. Unit: percentage.
        self.percent = percent
        # The progress of the incremental data verification task.
        self.progress = progress
        # The state of the incremental data verification task. Valid values:
        # 
        # - **Catched**: The verification is delayed. 
        # - **NotStarted**: The verification is not started. 
        # - **Checking**: The verification is in progress. 
        # - **Failed**: The verification failed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        full_data_check: bool = None,
        inc_data_check: bool = None,
        structure_data_check: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether initial full data synchronization is performed. Valid values:
        # 
        # -  **true**\
        # -  **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data synchronization is performed. Valid values:
        # -  **true**\
        # -  **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether full data verification is performed. Valid values:
        # -  **true**: yes
        # -  **false**: no
        self.full_data_check = full_data_check
        # Indicates whether incremental data verification is performed. Valid values:
        # -  **true**: yes
        # -  **false**: no
        self.inc_data_check = inc_data_check
        self.structure_data_check = structure_data_check
        # Indicates whether initial schema synchronization is performed. Valid values:
        # -  **true**\
        # -  **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.full_data_check is not None:
            result['FullDataCheck'] = self.full_data_check
        if self.inc_data_check is not None:
            result['IncDataCheck'] = self.inc_data_check
        if self.structure_data_check is not None:
            result['StructureDataCheck'] = self.structure_data_check
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('FullDataCheck') is not None:
            self.full_data_check = m.get('FullDataCheck')
        if m.get('IncDataCheck') is not None:
            self.inc_data_check = m.get('IncDataCheck')
        if m.get('StructureDataCheck') is not None:
            self.structure_data_check = m.get('StructureDataCheck')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times that SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # - **Success**\
        # - **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck.
        self.failed_reason = failed_reason
        # The method to fix a precheck failure.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the precheck failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # - **NotStarted**: The precheck is not started. 
        # - **Suspending**: The precheck is paused. 
        # - **Checking**: The precheck is in progress. 
        # - **Failed**: The precheck failed. 
        # - **Finished**: The precheck is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the objects to be migrated from the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureDataCheckStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.error_message = error_message
        self.percent = percent
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if initial schema synchronization failed.
        self.error_message = error_message
        # The progress of initial schema synchronization. Unit: percentage.
        self.percent = percent
        # The number of tables that have been synchronized during initial schema synchronization.
        self.progress = progress
        # The state of initial schema synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListReverseJob(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        cpu_usage: str = None,
        create_time: str = None,
        data_initialization_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus = None,
        db_object: str = None,
        dedicated_cluster_id: str = None,
        delay: int = None,
        destination_endpoint: DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        du_usage: int = None,
        error_details: List[DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails] = None,
        error_message: str = None,
        etl_safe_checkpoint: str = None,
        expire_time: str = None,
        full_data_check_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobFullDataCheckStatus = None,
        inc_data_check_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobIncDataCheckStatus = None,
        max_du: float = None,
        mem_usage: str = None,
        migration_mode: DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode = None,
        min_du: float = None,
        pay_type: str = None,
        performance: DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance = None,
        precheck_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus = None,
        reserved: str = None,
        source_endpoint: DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint = None,
        status: str = None,
        structure_data_check_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureDataCheckStatus = None,
        structure_initialization_status: DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus = None,
    ):
        # The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.checkpoint = checkpoint
        # The CPU utilization of the instance. Unit: percentage.
        self.cpu_usage = cpu_usage
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.
        self.db_object = db_object
        # The ID of the DTS dedicated cluster on which a DTS task runs.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The latency of incremental data synchronization. Unit: seconds.
        self.delay = delay
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The ID of the data synchronization instance.
        self.dts_instance_id = dts_instance_id
        # The instance class. 
        # 
        # > For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.dts_job_class = dts_job_class
        # The synchronization direction. **Reverse** is returned.
        self.dts_job_direction = dts_job_direction
        # The ID of the synchronization task.
        self.dts_job_id = dts_job_id
        # The name of the data synchronization task.
        self.dts_job_name = dts_job_name
        # The number of DUs that have been used.
        self.du_usage = du_usage
        # The error message returned.
        self.error_details = error_details
        # The error message returned if the task failed.
        self.error_message = error_message
        # The checkpoint of the ETL task.
        self.etl_safe_checkpoint = etl_safe_checkpoint
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 
        # 
        # > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The state information about the full data verification task.
        self.full_data_check_status = full_data_check_status
        # The state information about the incremental data verification task.
        self.inc_data_check_status = inc_data_check_status
        # Upper limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.max_du = max_du
        # The memory that has been used. Unit: MB.
        self.mem_usage = mem_usage
        # The initial synchronization types.
        self.migration_mode = migration_mode
        # Lower limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.min_du = min_du
        # The billing method of the DTS instance. Valid values:
        # 
        # - **PrePaid**: subscription
        # - **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
        self.status = status
        self.structure_data_check_status = structure_data_check_status
        # The state of initial schema synchronization.
        self.structure_initialization_status = structure_initialization_status

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.error_details:
            for k in self.error_details:
                if k:
                    k.validate()
        if self.full_data_check_status:
            self.full_data_check_status.validate()
        if self.inc_data_check_status:
            self.inc_data_check_status.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_data_check_status:
            self.structure_data_check_status.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.cpu_usage is not None:
            result['CpuUsage'] = self.cpu_usage
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.du_usage is not None:
            result['DuUsage'] = self.du_usage
        result['ErrorDetails'] = []
        if self.error_details is not None:
            for k in self.error_details:
                result['ErrorDetails'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_safe_checkpoint is not None:
            result['EtlSafeCheckpoint'] = self.etl_safe_checkpoint
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.full_data_check_status is not None:
            result['FullDataCheckStatus'] = self.full_data_check_status.to_map()
        if self.inc_data_check_status is not None:
            result['IncDataCheckStatus'] = self.inc_data_check_status.to_map()
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.mem_usage is not None:
            result['MemUsage'] = self.mem_usage
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_data_check_status is not None:
            result['StructureDataCheckStatus'] = self.structure_data_check_status.to_map()
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('CpuUsage') is not None:
            self.cpu_usage = m.get('CpuUsage')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('DuUsage') is not None:
            self.du_usage = m.get('DuUsage')
        self.error_details = []
        if m.get('ErrorDetails') is not None:
            for k in m.get('ErrorDetails'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails()
                self.error_details.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlSafeCheckpoint') is not None:
            self.etl_safe_checkpoint = m.get('EtlSafeCheckpoint')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FullDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobFullDataCheckStatus()
            self.full_data_check_status = temp_model.from_map(m['FullDataCheckStatus'])
        if m.get('IncDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobIncDataCheckStatus()
            self.inc_data_check_status = temp_model.from_map(m['IncDataCheckStatus'])
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MemUsage') is not None:
            self.mem_usage = m.get('MemUsage')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureDataCheckStatus()
            self.structure_data_check_status = temp_model.from_map(m['StructureDataCheckStatus'])
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        return self


class DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the objects to be migrated from the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICAT**E: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.error_message = error_message
        self.percent = percent
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema migration or initial schema synchronization failed.
        self.error_message = error_message
        # The progress of schema migration or initial schema synchronization. Unit: percentage.
        self.percent = percent
        # The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.
        self.progress = progress
        # The state of schema migration or initial schema synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyDtsJobListTagList(TeaModel):
    def __init__(
        self,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The key of the tag.
        self.tag_key = tag_key
        # The value of the tag.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobsResponseBodyDtsJobList(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        cpu_usage: str = None,
        create_time: str = None,
        data_cloud_status: DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus = None,
        data_etl_status: DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus = None,
        db_object: str = None,
        dedicated_cluster_id: str = None,
        delay: int = None,
        destination_endpoint: DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint = None,
        dts_bis_label: str = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        du_real_usage: str = None,
        du_usage: int = None,
        end_timestamp: str = None,
        error_details: List[DescribeDtsJobsResponseBodyDtsJobListErrorDetails] = None,
        error_message: str = None,
        etl_safe_checkpoint: str = None,
        expire_time: str = None,
        full_data_check_status: DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus = None,
        inc_data_check_status: DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus = None,
        job_type: str = None,
        max_du: float = None,
        mem_usage: str = None,
        migration_err_code: str = None,
        migration_err_help_doc_id: str = None,
        migration_err_help_doc_key: str = None,
        migration_err_msg: str = None,
        migration_err_type: str = None,
        migration_err_workaround: str = None,
        migration_mode: DescribeDtsJobsResponseBodyDtsJobListMigrationMode = None,
        min_du: float = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobsResponseBodyDtsJobListPerformance = None,
        precheck_status: DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus = None,
        reserved: str = None,
        resource_group_display_name: str = None,
        resource_group_id: str = None,
        retry_state: DescribeDtsJobsResponseBodyDtsJobListRetryState = None,
        reverse_job: DescribeDtsJobsResponseBodyDtsJobListReverseJob = None,
        source_endpoint: DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint = None,
        status: str = None,
        structure_data_check_status: DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus = None,
        structure_initialization_status: DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus = None,
        tag_list: List[DescribeDtsJobsResponseBodyDtsJobListTagList] = None,
    ):
        # Indicates whether the **new** change tracking feature is used.
        # 
        # >  This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data synchronization. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The CPU utilization of the instance. Unit: percentage.
        self.cpu_usage = cpu_usage
        # The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the physical gateway-based migration task.
        self.data_cloud_status = data_cloud_status
        # The state of the extract, transform, and load (ETL) task. Valid values:
        # 
        # >  This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see "Objects of DTS tasks".
        self.db_object = db_object
        # The ID of the DTS dedicated cluster on which a DTS task runs.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The latency of incremental data synchronization. Unit: seconds.
        self.delay = delay
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The environment tag of the DTS instance. Valid values:
        # 
        # - **normal**\
        # - **online**\
        self.dts_bis_label = dts_bis_label
        # The ID of the data synchronization instance.
        self.dts_instance_id = dts_instance_id
        # The instance class.
        # 
        # >  For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.dts_job_class = dts_job_class
        # The synchronization direction. The value is **Reverse**.
        self.dts_job_direction = dts_job_direction
        # The ID of the data synchronization task.
        self.dts_job_id = dts_job_id
        # The name of the data synchronization task.
        self.dts_job_name = dts_job_name
        # The DTS Units (DUs) usage of a task in a DTS dedicated cluster.
        self.du_real_usage = du_real_usage
        # The number of DUs that have been used.
        self.du_usage = du_usage
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned.
        self.error_details = error_details
        # The error message returned if the task failed.
        self.error_message = error_message
        # The checkpoint of the ETL task.
        self.etl_safe_checkpoint = etl_safe_checkpoint
        # The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # >  This parameter is returned only if the value of the **PayType** parameter is **PrePaid**.
        self.expire_time = expire_time
        # The state information about the full data verification task.
        self.full_data_check_status = full_data_check_status
        # The state information about the incremental data verification task.
        self.inc_data_check_status = inc_data_check_status
        # The type of the DTS task. Valid values:
        # 
        # - **MIGRATION**: data migration task 
        # - **SYNC**: data synchronization task 
        # - **SUBSCRIBE**: change tracking task
        self.job_type = job_type
        # Upper limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.max_du = max_du
        # The memory that has been used. Unit: MB.
        self.mem_usage = mem_usage
        # The error code.
        self.migration_err_code = migration_err_code
        # The ID of the error code-related documentation.
        self.migration_err_help_doc_id = migration_err_help_doc_id
        # The key of the error code-related documentation.
        self.migration_err_help_doc_key = migration_err_help_doc_key
        # The error message.
        self.migration_err_msg = migration_err_msg
        # The type of the error code.
        self.migration_err_type = migration_err_type
        # The solution to the error.
        self.migration_err_workaround = migration_err_workaround
        # The migration or synchronization modes.
        self.migration_mode = migration_mode
        # Lower limit of DU.
        # 
        # > Only supported by Serverless instances.
        self.min_du = min_du
        # The source of the task. Valid values:
        # 
        # *   **PTS**\
        # *   **DMS**\
        # *   **DTS**\
        self.origin_type = origin_type
        # The billing method of the DTS instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The name of the resource group.
        self.resource_group_display_name = resource_group_display_name
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction. 
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
        self.status = status
        self.structure_data_check_status = structure_data_check_status
        # The state of schema migration or initial schema synchronization.
        self.structure_initialization_status = structure_initialization_status
        # The tags of the task.
        self.tag_list = tag_list

    def validate(self):
        if self.data_cloud_status:
            self.data_cloud_status.validate()
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.error_details:
            for k in self.error_details:
                if k:
                    k.validate()
        if self.full_data_check_status:
            self.full_data_check_status.validate()
        if self.inc_data_check_status:
            self.inc_data_check_status.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.reverse_job:
            self.reverse_job.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_data_check_status:
            self.structure_data_check_status.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.cpu_usage is not None:
            result['CpuUsage'] = self.cpu_usage
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_cloud_status is not None:
            result['DataCloudStatus'] = self.data_cloud_status.to_map()
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_bis_label is not None:
            result['DtsBisLabel'] = self.dts_bis_label
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.du_real_usage is not None:
            result['DuRealUsage'] = self.du_real_usage
        if self.du_usage is not None:
            result['DuUsage'] = self.du_usage
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        result['ErrorDetails'] = []
        if self.error_details is not None:
            for k in self.error_details:
                result['ErrorDetails'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_safe_checkpoint is not None:
            result['EtlSafeCheckpoint'] = self.etl_safe_checkpoint
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.full_data_check_status is not None:
            result['FullDataCheckStatus'] = self.full_data_check_status.to_map()
        if self.inc_data_check_status is not None:
            result['IncDataCheckStatus'] = self.inc_data_check_status.to_map()
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.mem_usage is not None:
            result['MemUsage'] = self.mem_usage
        if self.migration_err_code is not None:
            result['MigrationErrCode'] = self.migration_err_code
        if self.migration_err_help_doc_id is not None:
            result['MigrationErrHelpDocId'] = self.migration_err_help_doc_id
        if self.migration_err_help_doc_key is not None:
            result['MigrationErrHelpDocKey'] = self.migration_err_help_doc_key
        if self.migration_err_msg is not None:
            result['MigrationErrMsg'] = self.migration_err_msg
        if self.migration_err_type is not None:
            result['MigrationErrType'] = self.migration_err_type
        if self.migration_err_workaround is not None:
            result['MigrationErrWorkaround'] = self.migration_err_workaround
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_display_name is not None:
            result['ResourceGroupDisplayName'] = self.resource_group_display_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_data_check_status is not None:
            result['StructureDataCheckStatus'] = self.structure_data_check_status.to_map()
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CpuUsage') is not None:
            self.cpu_usage = m.get('CpuUsage')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataCloudStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus()
            self.data_cloud_status = temp_model.from_map(m['DataCloudStatus'])
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsBisLabel') is not None:
            self.dts_bis_label = m.get('DtsBisLabel')
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('DuRealUsage') is not None:
            self.du_real_usage = m.get('DuRealUsage')
        if m.get('DuUsage') is not None:
            self.du_usage = m.get('DuUsage')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        self.error_details = []
        if m.get('ErrorDetails') is not None:
            for k in m.get('ErrorDetails'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobListErrorDetails()
                self.error_details.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlSafeCheckpoint') is not None:
            self.etl_safe_checkpoint = m.get('EtlSafeCheckpoint')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FullDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus()
            self.full_data_check_status = temp_model.from_map(m['FullDataCheckStatus'])
        if m.get('IncDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus()
            self.inc_data_check_status = temp_model.from_map(m['IncDataCheckStatus'])
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MemUsage') is not None:
            self.mem_usage = m.get('MemUsage')
        if m.get('MigrationErrCode') is not None:
            self.migration_err_code = m.get('MigrationErrCode')
        if m.get('MigrationErrHelpDocId') is not None:
            self.migration_err_help_doc_id = m.get('MigrationErrHelpDocId')
        if m.get('MigrationErrHelpDocKey') is not None:
            self.migration_err_help_doc_key = m.get('MigrationErrHelpDocKey')
        if m.get('MigrationErrMsg') is not None:
            self.migration_err_msg = m.get('MigrationErrMsg')
        if m.get('MigrationErrType') is not None:
            self.migration_err_type = m.get('MigrationErrType')
        if m.get('MigrationErrWorkaround') is not None:
            self.migration_err_workaround = m.get('MigrationErrWorkaround')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupDisplayName') is not None:
            self.resource_group_display_name = m.get('ResourceGroupDisplayName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListReverseJob()
            self.reverse_job = temp_model.from_map(m['ReverseJob'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureDataCheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListStructureDataCheckStatus()
            self.structure_data_check_status = temp_model.from_map(m['StructureDataCheckStatus'])
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobListTagList()
                self.tag_list.append(temp_model.from_map(k))
        return self


class DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if the ETL task failed.
        self.error_message = error_message
        # The progress of the ETL task. Unit: percentage.
        self.percent = percent
        # The number of entries that have been processed by the ETL task.
        self.progress = progress
        # The state of the ETL task. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete. 
        # - **Catched**: The task is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration or initial full data synchronization failed.
        self.error_message = error_message
        # The progress of full data migration or initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been migrated or synchronized during full data migration or initial full data synchronization.
        self.progress = progress
        # The state of full data migration or initial full data synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if incremental data migration or synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance needs to be upgraded. Valid values:
        # 
        # - **true**\
        # - **false**\
        # 
        # > To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.
        self.need_upgrade = need_upgrade
        # The progress of incremental data migration or synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
        self.progress = progress
        # The state of incremental data migration or synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete. 
        # - **Catched**: The task is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the migrated objects in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # - **Success**\
        # - **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck. 
        # 
        # > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method to fix a precheck failure. 
        # 
        # > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the precheck failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # - **NotStarted**: The precheck is not started. 
        # - **Suspending**: The precheck is paused. 
        # - **Checking**: The precheck is in progress. 
        # - **Failed**: The precheck failed. 
        # - **Finished**: The precheck is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListRetryState(TeaModel):
    def __init__(
        self,
        err_message: str = None,
        job_id: str = None,
        max_retry_time: int = None,
        module: str = None,
        retry_count: int = None,
        retry_target: str = None,
        retry_time: int = None,
        retrying: bool = None,
    ):
        # The error message returned if these retries failed.
        self.err_message = err_message
        # The task ID.
        self.job_id = job_id
        # The maximum duration of a retry. Unit: seconds.
        self.max_retry_time = max_retry_time
        # The progress of the instance when DTS retries.
        self.module = module
        # The number of retries that have been performed.
        self.retry_count = retry_count
        # The object on which these retries are performed. Valid values:
        # 
        # - **srcDB**: the source database 
        # - **destDB**: the destination database 
        # - **inner_module**: an internal module of DTS
        self.retry_target = retry_target
        # The time that has elapsed from the time when the first retry starts. Unit: seconds.
        self.retry_time = retry_time
        # Indicates whether the task is being retried. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.retrying = retrying

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.max_retry_time is not None:
            result['MaxRetryTime'] = self.max_retry_time
        if self.module is not None:
            result['Module'] = self.module
        if self.retry_count is not None:
            result['RetryCount'] = self.retry_count
        if self.retry_target is not None:
            result['RetryTarget'] = self.retry_target
        if self.retry_time is not None:
            result['RetryTime'] = self.retry_time
        if self.retrying is not None:
            result['Retrying'] = self.retrying
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('MaxRetryTime') is not None:
            self.max_retry_time = m.get('MaxRetryTime')
        if m.get('Module') is not None:
            self.module = m.get('Module')
        if m.get('RetryCount') is not None:
            self.retry_count = m.get('RetryCount')
        if m.get('RetryTarget') is not None:
            self.retry_target = m.get('RetryTarget')
        if m.get('RetryTime') is not None:
            self.retry_time = m.get('RetryTime')
        if m.get('Retrying') is not None:
            self.retrying = m.get('Retrying')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if initial full data synchronization failed.
        self.error_message = error_message
        # The progress of initial full data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been synchronized during initial full data synchronization.
        self.progress = progress
        # The state of initial full data synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        need_upgrade: bool = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if incremental data synchronization failed.
        self.error_message = error_message
        # Indicates whether the instance needs to be upgraded. Valid values:
        # 
        # - **true**\
        # - **false**\
        # 
        # > To upgrade a DTS instance, call the [TransferInstanceClass](https://help.aliyun.com/document_detail/281093.html) operation.
        self.need_upgrade = need_upgrade
        # The progress of incremental data synchronization. Unit: percentage.
        self.percent = percent
        # The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
        self.progress = progress
        # The state of incremental data synchronization.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.need_upgrade is not None:
            result['NeedUpgrade'] = self.need_upgrade
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('NeedUpgrade') is not None:
            self.need_upgrade = m.get('NeedUpgrade')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the synchronized objects in the destination instance.
        self.database_name = database_name
        # The database engine of the destination instance.
        self.engine_name = engine_name
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The endpoint of the destination instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the destination instance.
        self.port = port
        # The ID of the region in which the destination instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether full data migration or initial full data synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration or synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration or initial schema synchronization is performed. Valid values:
        # 
        # - **true**\
        # - **false**\
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The size of data that is migrated or synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['Flow'] = self.flow
        if self.rps is not None:
            result['Rps'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Flow') is not None:
            self.flow = m.get('Flow')
        if m.get('Rps') is not None:
            self.rps = m.get('Rps')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: str = None,
        check_item_description: str = None,
        check_result: str = None,
        failed_reason: str = None,
        repair_method: str = None,
    ):
        # The name of the precheck item.
        self.check_item = check_item
        # The description of the precheck item.
        self.check_item_description = check_item_description
        # The precheck result. Valid values:
        # 
        # - **Success**\
        # - **Failed**\
        self.check_result = check_result
        # The error message returned if the task failed to pass the precheck. 
        # 
        # > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
        self.failed_reason = failed_reason
        # The method to fix a precheck failure. 
        # 
        # > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_item is not None:
            result['CheckItem'] = self.check_item
        if self.check_item_description is not None:
            result['CheckItemDescription'] = self.check_item_description
        if self.check_result is not None:
            result['CheckResult'] = self.check_result
        if self.failed_reason is not None:
            result['FailedReason'] = self.failed_reason
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckItem') is not None:
            self.check_item = m.get('CheckItem')
        if m.get('CheckItemDescription') is not None:
            self.check_item_description = m.get('CheckItemDescription')
        if m.get('CheckResult') is not None:
            self.check_result = m.get('CheckResult')
        if m.get('FailedReason') is not None:
            self.failed_reason = m.get('FailedReason')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail] = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The error message returned if the precheck failed.
        self.error_message = error_message
        # The precheck progress. Unit: percentage.
        self.percent = percent
        # The precheck state. Valid values:
        # 
        # - **NotStarted**: The precheck is not started. 
        # - **Suspending**: The precheck is paused. 
        # - **Checking**: The precheck is in progress. 
        # - **Failed**: The precheck failed. 
        # - **Finished**: The precheck is complete.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the objects to be migrated from the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if initial schema synchronization failed.
        self.error_message = error_message
        # The progress of initial schema synchronization. Unit: percentage.
        self.percent = percent
        # The number of tables that have been synchronized during initial schema synchronization.
        self.progress = progress
        # The state of initial schema synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListReverseJob(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        create_time: str = None,
        data_initialization_status: DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus = None,
        db_object: str = None,
        delay: int = None,
        destination_endpoint: DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        error_message: str = None,
        etl_safe_checkpoint: str = None,
        expire_time: str = None,
        migration_mode: DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode = None,
        pay_type: str = None,
        performance: DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance = None,
        precheck_status: DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus = None,
        reserved: str = None,
        source_endpoint: DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus = None,
    ):
        # The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.checkpoint = checkpoint
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.
        self.db_object = db_object
        # The latency of incremental data synchronization. Unit: seconds.
        self.delay = delay
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The ID of the data synchronization instance.
        self.dts_instance_id = dts_instance_id
        # The instance class. 
        # 
        # > For more information about the test performance of each instance class, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.dts_job_class = dts_job_class
        # The synchronization direction. **Reverse** is returned.
        self.dts_job_direction = dts_job_direction
        # The ID of the synchronization task.
        self.dts_job_id = dts_job_id
        # The name of the data synchronization task.
        self.dts_job_name = dts_job_name
        # The error message returned if the task failed.
        self.error_message = error_message
        # The checkpoint of the ETL task.
        self.etl_safe_checkpoint = etl_safe_checkpoint
        # The time when the instance expires. The time follows the ISO 8601 standard in the* yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC. 
        # 
        # > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The billing method of the DTS instance. Valid values:
        # 
        # - **PrePaid**: subscription
        # - **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
        self.status = status
        # The state of initial schema synchronization.
        self.structure_initialization_status = structure_initialization_status

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_safe_checkpoint is not None:
            result['EtlSafeCheckpoint'] = self.etl_safe_checkpoint
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlSafeCheckpoint') is not None:
            self.etl_safe_checkpoint = m.get('EtlSafeCheckpoint')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        return self


class DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        instance_id: str = None,
        instance_type: str = None,
        ip: str = None,
        oracle_sid: str = None,
        port: str = None,
        region: str = None,
        ssl_solution_enum: str = None,
        user_name: str = None,
    ):
        # The name of the database that contains the objects to be migrated from the source instance.
        self.database_name = database_name
        # The database engine of the source instance.
        self.engine_name = engine_name
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The endpoint of the source instance.
        self.ip = ip
        # The SID of the Oracle database. 
        # 
        # > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
        self.oracle_sid = oracle_sid
        # The port number of the source instance.
        self.port = port
        # The ID of the region in which the source instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region = region
        # Indicates whether SSL encryption is enabled. Valid values:
        # 
        # - **DISABLE**: SSL encryption is disabled. 
        # - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded. 
        # - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database. 
        # - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
        self.ssl_solution_enum = ssl_solution_enum
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.region is not None:
            result['Region'] = self.region
        if self.ssl_solution_enum is not None:
            result['SslSolutionEnum'] = self.ssl_solution_enum
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('SslSolutionEnum') is not None:
            self.ssl_solution_enum = m.get('SslSolutionEnum')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema migration or initial schema synchronization failed.
        self.error_message = error_message
        # The progress of schema migration or initial schema synchronization. Unit: percentage.
        self.percent = percent
        # The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.
        self.progress = progress
        # The state of schema migration or initial schema synchronization. Valid values:
        # 
        # - **NotStarted**: The task is not started. 
        # - **Migrating**: The task is in progress. 
        # - **Failed**: The task failed. 
        # - **Finished**: The task is complete.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeDtsJobsResponseBodyEtlDemoListTagList(TeaModel):
    def __init__(
        self,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The tag key.
        self.tag_key = tag_key
        # The tag value.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class DescribeDtsJobsResponseBodyEtlDemoList(TeaModel):
    def __init__(
        self,
        app_name: str = None,
        begin_timestamp: str = None,
        checkpoint: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        create_time: str = None,
        data_etl_status: DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus = None,
        data_initialization_status: DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus = None,
        data_synchronization_status: DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus = None,
        db_object: str = None,
        delay: int = None,
        destination_endpoint: DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint = None,
        dts_instance_id: str = None,
        dts_job_class: str = None,
        dts_job_direction: str = None,
        dts_job_id: str = None,
        dts_job_name: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        etl_safe_checkpoint: str = None,
        expire_time: str = None,
        job_type: str = None,
        migration_mode: DescribeDtsJobsResponseBodyEtlDemoListMigrationMode = None,
        origin_type: str = None,
        pay_type: str = None,
        performance: DescribeDtsJobsResponseBodyEtlDemoListPerformance = None,
        precheck_status: DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus = None,
        reserved: str = None,
        resource_group_display_name: str = None,
        resource_group_id: str = None,
        retry_state: DescribeDtsJobsResponseBodyEtlDemoListRetryState = None,
        reverse_job: DescribeDtsJobsResponseBodyEtlDemoListReverseJob = None,
        source_endpoint: DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint = None,
        status: str = None,
        structure_initialization_status: DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus = None,
        tag_list: List[DescribeDtsJobsResponseBodyEtlDemoListTagList] = None,
    ):
        # Indicates whether the **new** change tracking feature is used. 
        # 
        # > This parameter is returned only for change tracking instances of the new version.
        self.app_name = app_name
        # The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.begin_timestamp = begin_timestamp
        # The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.checkpoint = checkpoint
        # The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information in the following format: <IP address of the downstream client>:<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:s*sZ format. The time is displayed in UTC.
        self.create_time = create_time
        # The state of the ETL task. 
        # 
        # > This parameter collection is returned only if an ETL task is configured.
        self.data_etl_status = data_etl_status
        # The state of full data migration or initial full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The state of incremental data migration or synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.db_object = db_object
        # The latency of incremental data migration or synchronization. 
        # 
        # > If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.
        self.delay = delay
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The instance class. 
        # 
        # > For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        self.dts_job_class = dts_job_class
        # The synchronization direction. Valid values:
        # 
        # - **Forward**\
        # - **Reverse**\
        # 
        # > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
        self.dts_job_direction = dts_job_direction
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The name of the data migration, data synchronization, or change tracking task.
        self.dts_job_name = dts_job_name
        # The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if the task failed.
        self.error_message = error_message
        # The checkpoint of the ETL task.
        self.etl_safe_checkpoint = etl_safe_checkpoint
        # The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
        # 
        # > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
        self.expire_time = expire_time
        # The type of the DTS task. Valid values:
        # 
        # - **MIGRATION**: data migration task 
        # - **SYNC**: data synchronization task 
        # - **SUBSCRIBE**: change tracking task
        self.job_type = job_type
        # The migration types or initial synchronization types.
        self.migration_mode = migration_mode
        # The source of the task.
        # - **PTS**\
        # - **DMS**\
        # - **DTS**\
        self.origin_type = origin_type
        # The billing method of the DTS instance. Valid values:
        # 
        # - **PrePaid**: subscription 
        # - **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data migration or synchronization instance.
        self.performance = performance
        # The precheck state.
        self.precheck_status = precheck_status
        # The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # The name of the resource group.
        self.resource_group_display_name = resource_group_display_name
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The information about the retries performed by DTS due to an exception.
        self.retry_state = retry_state
        # The details of the data synchronization task in the reverse direction. 
        # 
        # > This parameter is returned only for two-way data synchronization tasks.
        self.reverse_job = reverse_job
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
        self.status = status
        # The state of schema migration or initial schema synchronization.
        self.structure_initialization_status = structure_initialization_status
        # The tags of the task.
        self.tag_list = tag_list

    def validate(self):
        if self.data_etl_status:
            self.data_etl_status.validate()
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.retry_state:
            self.retry_state.validate()
        if self.reverse_job:
            self.reverse_job.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.tag_list:
            for k in self.tag_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_name is not None:
            result['AppName'] = self.app_name
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_etl_status is not None:
            result['DataEtlStatus'] = self.data_etl_status.to_map()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.db_object is not None:
            result['DbObject'] = self.db_object
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.dts_job_class is not None:
            result['DtsJobClass'] = self.dts_job_class
        if self.dts_job_direction is not None:
            result['DtsJobDirection'] = self.dts_job_direction
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.etl_safe_checkpoint is not None:
            result['EtlSafeCheckpoint'] = self.etl_safe_checkpoint
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.origin_type is not None:
            result['OriginType'] = self.origin_type
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_display_name is not None:
            result['ResourceGroupDisplayName'] = self.resource_group_display_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.retry_state is not None:
            result['RetryState'] = self.retry_state.to_map()
        if self.reverse_job is not None:
            result['ReverseJob'] = self.reverse_job.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        result['TagList'] = []
        if self.tag_list is not None:
            for k in self.tag_list:
                result['TagList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppName') is not None:
            self.app_name = m.get('AppName')
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataEtlStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus()
            self.data_etl_status = temp_model.from_map(m['DataEtlStatus'])
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DbObject') is not None:
            self.db_object = m.get('DbObject')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('DtsJobClass') is not None:
            self.dts_job_class = m.get('DtsJobClass')
        if m.get('DtsJobDirection') is not None:
            self.dts_job_direction = m.get('DtsJobDirection')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('EtlSafeCheckpoint') is not None:
            self.etl_safe_checkpoint = m.get('EtlSafeCheckpoint')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('OriginType') is not None:
            self.origin_type = m.get('OriginType')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupDisplayName') is not None:
            self.resource_group_display_name = m.get('ResourceGroupDisplayName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('RetryState') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListRetryState()
            self.retry_state = temp_model.from_map(m['RetryState'])
        if m.get('ReverseJob') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListReverseJob()
            self.reverse_job = temp_model.from_map(m['ReverseJob'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        self.tag_list = []
        if m.get('TagList') is not None:
            for k in m.get('TagList'):
                temp_model = DescribeDtsJobsResponseBodyEtlDemoListTagList()
                self.tag_list.append(temp_model.from_map(k))
        return self


class DescribeDtsJobsResponseBody(TeaModel):
    def __init__(
        self,
        dts_job_list: List[DescribeDtsJobsResponseBodyDtsJobList] = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        etl_demo_list: List[DescribeDtsJobsResponseBodyEtlDemoList] = None,
        http_status_code: int = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # The Data Transmission Service (DTS) tasks and the details of each task.
        self.dts_job_list = dts_job_list
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.
        # 
        # >  For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The DTS tasks and the details of each task.
        self.etl_demo_list = etl_demo_list
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The page number of the returned page.
        self.page_number = page_number
        # The number of entries returned per page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The total number of DTS tasks that meet the query condition.
        self.total_record_count = total_record_count

    def validate(self):
        if self.dts_job_list:
            for k in self.dts_job_list:
                if k:
                    k.validate()
        if self.etl_demo_list:
            for k in self.etl_demo_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DtsJobList'] = []
        if self.dts_job_list is not None:
            for k in self.dts_job_list:
                result['DtsJobList'].append(k.to_map() if k else None)
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        result['EtlDemoList'] = []
        if self.etl_demo_list is not None:
            for k in self.etl_demo_list:
                result['EtlDemoList'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dts_job_list = []
        if m.get('DtsJobList') is not None:
            for k in m.get('DtsJobList'):
                temp_model = DescribeDtsJobsResponseBodyDtsJobList()
                self.dts_job_list.append(temp_model.from_map(k))
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        self.etl_demo_list = []
        if m.get('EtlDemoList') is not None:
            for k in m.get('EtlDemoList'):
                temp_model = DescribeDtsJobsResponseBodyEtlDemoList()
                self.etl_demo_list.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeDtsJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDtsJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDtsJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDtsServiceLogRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        end_time: int = None,
        keyword: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        start_time: int = None,
        status: str = None,
        sub_job_type: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration or synchronization task.
        self.dts_job_id = dts_job_id
        # The end of the time range to query. You can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.
        # 
        # > *   To obtain the logs that are generated for DTS subtasks within a specific period of time, you can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.
        # >*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.
        self.end_time = end_time
        # The keyword that is passed to specify the query content.
        # 
        # >  Fuzzy match is used and the keyword is case-sensitive.
        self.keyword = keyword
        # The number of the page to return. The value must be an integer that is greater than 0 and less than or equal to the maximum value supported by the integer data type. Default value: **1**.
        self.page_number = page_number
        # The number of log entries to return on each page. Valid values: **20**, **50**, **100**, **500**, and **1000**. Default value: **20**.
        self.page_size = page_size
        # The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The beginning of the time range to query.
        # 
        # > *   To obtain the logs that are generated for Data Transmission Service (DTS) subtasks within a specific period of time, you can call the [DescribePreCheckStatus](https://help.aliyun.com/document_detail/209718.html) operation to query the execution time of the subtasks.
        # >*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.
        self.start_time = start_time
        # The log level. Separate multiple log levels with commas (,). Valid values:
        # 
        # *   **NORMAL**: displays the logs that are generated when the DTS task runs as expected.
        # *   **WARN**: displays the logs about severe issues that stop the DTS task from running.
        # *   **ERROR**: displays the logs about unexpected issues that stop specific processes form running.
        self.status = status
        # The type of a DTS subtask. Valid values:
        # 
        # *   **DATA_LOAD**: full migration or full synchronization
        # *   **ONLINE_WRITER**: incremental migration
        # *   **SYNC_WRITER**: incremental synchronization
        self.sub_job_type = sub_job_type
        # Whether it is a seamless integration (Zero-ETL) task, the value can be: - **true**: Yes. - **false**: No.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.sub_job_type is not None:
            result['SubJobType'] = self.sub_job_type
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubJobType') is not None:
            self.sub_job_type = m.get('SubJobType')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DescribeDtsServiceLogResponseBodyServiceLogContexts(TeaModel):
    def __init__(
        self,
        context: str = None,
        state: str = None,
        time: str = None,
    ):
        # The log content.
        self.context = context
        # The log level.
        self.state = state
        # The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
        self.time = time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.context is not None:
            result['Context'] = self.context
        if self.state is not None:
            result['State'] = self.state
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Context') is not None:
            self.context = m.get('Context')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class DescribeDtsServiceLogResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        service_log_contexts: List[DescribeDtsServiceLogResponseBodyServiceLogContexts] = None,
        success: bool = None,
        total_record_count: int = None,
    ):
        # The dynamic error code. This parameter will be removed soon.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        self.dynamic_message = dynamic_message
        # The error code returned if the request fails.
        self.err_code = err_code
        # The error message returned if the request fails.
        self.err_message = err_message
        # The HTTP status code that is returned.
        self.http_status_code = http_status_code
        # The page number of the returned page.
        self.page_number = page_number
        # The number of log entries returned per page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # The details of the logs.
        self.service_log_contexts = service_log_contexts
        # Indicates whether the request is successful.
        self.success = success
        # The total number of logs that meet the query conditions.
        self.total_record_count = total_record_count

    def validate(self):
        if self.service_log_contexts:
            for k in self.service_log_contexts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ServiceLogContexts'] = []
        if self.service_log_contexts is not None:
            for k in self.service_log_contexts:
                result['ServiceLogContexts'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.service_log_contexts = []
        if m.get('ServiceLogContexts') is not None:
            for k in m.get('ServiceLogContexts'):
                temp_model = DescribeDtsServiceLogResponseBodyServiceLogContexts()
                self.service_log_contexts.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeDtsServiceLogResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDtsServiceLogResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDtsServiceLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEndpointSwitchStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        task_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The task ID, which is returned after you call the [SwitchSynchronizationEndpoint](https://help.aliyun.com/document_detail/201858.html) operation.
        # 
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeEndpointSwitchStatusResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        error_message: str = None,
        request_id: str = None,
        status: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # This parameter is no longer available.
        self.error_message = error_message
        # The ID of the request.
        self.request_id = request_id
        # The status of the task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Initializing**: The task is being initialized.
        # *   **Switching**: The task is running.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is completed.
        self.status = status
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEndpointSwitchStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEndpointSwitchStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEndpointSwitchStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeEtlJobLogsRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the ETL task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The ID of the region in which the Data Transmission Service (DTS) instance resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the available Alibaba Cloud regions.
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeEtlJobLogsResponseBodyEtlRunningLogs(TeaModel):
    def __init__(
        self,
        content: str = None,
        content_key: str = None,
        etl_id: str = None,
        log_datetime: str = None,
        status: str = None,
        user_id: str = None,
    ):
        # The state of the ETL task.
        self.content = content
        # The module for which the logs are generated, such as the conversion module of ETL tasks.
        self.content_key = content_key
        # The ID of the ETL task.
        self.etl_id = etl_id
        # The time when the log was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
        self.log_datetime = log_datetime
        # The log level. Valid values: ERROR, WARN, INFO, and DEBUG.
        self.status = status
        # The ID of the user.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.content_key is not None:
            result['ContentKey'] = self.content_key
        if self.etl_id is not None:
            result['EtlId'] = self.etl_id
        if self.log_datetime is not None:
            result['LogDatetime'] = self.log_datetime
        if self.status is not None:
            result['Status'] = self.status
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentKey') is not None:
            self.content_key = m.get('ContentKey')
        if m.get('EtlId') is not None:
            self.etl_id = m.get('EtlId')
        if m.get('LogDatetime') is not None:
            self.log_datetime = m.get('LogDatetime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class DescribeEtlJobLogsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        etl_running_logs: List[DescribeEtlJobLogsResponseBodyEtlRunningLogs] = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message.
        self.dynamic_message = dynamic_message
        # The error code. This example indicates that the specified ETL task ID is invalid.
        self.err_code = err_code
        # The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may be deleted.
        self.err_message = err_message
        # The logs of ETL tasks.
        self.etl_running_logs = etl_running_logs
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful. If the call failed, false is returned.
        self.success = success

    def validate(self):
        if self.etl_running_logs:
            for k in self.etl_running_logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        result['EtlRunningLogs'] = []
        if self.etl_running_logs is not None:
            for k in self.etl_running_logs:
                result['EtlRunningLogs'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        self.etl_running_logs = []
        if m.get('EtlRunningLogs') is not None:
            for k in m.get('EtlRunningLogs'):
                temp_model = DescribeEtlJobLogsResponseBodyEtlRunningLogs()
                self.etl_running_logs.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeEtlJobLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeEtlJobLogsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeEtlJobLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeFullProcessListRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The ID of the region where the data migration instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:
        # 
        # *   **true**: yes.
        # *   **false**: no.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DescribeFullProcessListResponseBodyFullProcessList(TeaModel):
    def __init__(
        self,
        detail: str = None,
        exception: str = None,
        process_name: str = None,
        process_type: str = None,
        running_sql: str = None,
        state: str = None,
        task_id: str = None,
        time: int = None,
    ):
        # Details
        self.detail = detail
        # The abnormal status of the task. Valid values:**notstarted**. -**checking**. -**failed**. -**finished**.
        self.exception = exception
        # The name of the process.
        self.process_name = process_name
        # The type of the process. Valid values:
        # 
        # *   **1**: trusted
        # *   **2**: suspicious
        # *   **3**: malicious
        self.process_type = process_type
        # SQL that is running
        self.running_sql = running_sql
        # The log status.
        self.state = state
        # The ID of the task.
        self.task_id = task_id
        # The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
        self.time = time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail
        if self.exception is not None:
            result['Exception'] = self.exception
        if self.process_name is not None:
            result['ProcessName'] = self.process_name
        if self.process_type is not None:
            result['ProcessType'] = self.process_type
        if self.running_sql is not None:
            result['RunningSQL'] = self.running_sql
        if self.state is not None:
            result['State'] = self.state
        if self.task_id is not None:
            result['TaskID'] = self.task_id
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Detail') is not None:
            self.detail = m.get('Detail')
        if m.get('Exception') is not None:
            self.exception = m.get('Exception')
        if m.get('ProcessName') is not None:
            self.process_name = m.get('ProcessName')
        if m.get('ProcessType') is not None:
            self.process_type = m.get('ProcessType')
        if m.get('RunningSQL') is not None:
            self.running_sql = m.get('RunningSQL')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('TaskID') is not None:
            self.task_id = m.get('TaskID')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class DescribeFullProcessListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        config_list: Dict[str, Any] = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        full_process_list: List[DescribeFullProcessListResponseBodyFullProcessList] = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code.
        self.code = code
        # The throttling configuration. Valid values:
        # 
        # *   **dts.datamove.blaster.qps.max**: The rate at which queries are made to the source database per second.
        # *   **dts.datamove.source.rps.max**: the number of rows that are fully synchronized or migrated per second.
        # *   **dts.datamove.source.bps.max**: the amount of data processed per second for full synchronization or migration. Unit: Byte/s.
        # 
        # > 
        # 
        # *   When you set the **JobCode** parameter to **03**, you need to specify the **EnableLimit** parameter as **true**. Otherwise, the configuration cannot take effect.
        # 
        # *   When you set the **JobCode** parameter to **04** or **07**, you only need to specify the **dts.datamove.source.rps.max** and **dts.datamove.source.bps.max** parameters.
        # *   A value of \\*\\*-1\\*\\* indicates no rate limit.
        self.config_list = config_list
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # >  The request parameter **DtsJobId** is invalid if **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.
        self.dynamic_message = dynamic_message
        # The error code returned when the request failed.
        self.err_code = err_code
        # The error message returned when the request failed.
        self.err_message = err_message
        # The details of the GA instances.
        self.full_process_list = full_process_list
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.success = success

    def validate(self):
        if self.full_process_list:
            for k in self.full_process_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.config_list is not None:
            result['ConfigList'] = self.config_list
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        result['FullProcessList'] = []
        if self.full_process_list is not None:
            for k in self.full_process_list:
                result['FullProcessList'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ConfigList') is not None:
            self.config_list = m.get('ConfigList')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        self.full_process_list = []
        if m.get('FullProcessList') is not None:
            for k in m.get('FullProcessList'):
                temp_model = DescribeFullProcessListResponseBodyFullProcessList()
                self.full_process_list.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeFullProcessListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeFullProcessListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeFullProcessListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGadInstancesRequest(TeaModel):
    def __init__(
        self,
        db_engine_types: str = None,
        instance_name: str = None,
        master_db_instance_id: str = None,
        owner_id: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        slave_db_instance_id: str = None,
    ):
        self.db_engine_types = db_engine_types
        self.instance_name = instance_name
        self.master_db_instance_id = master_db_instance_id
        self.owner_id = owner_id
        self.page_number = page_number
        self.page_size = page_size
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.slave_db_instance_id = slave_db_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.db_engine_types is not None:
            result['DbEngineTypes'] = self.db_engine_types
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.master_db_instance_id is not None:
            result['MasterDbInstanceId'] = self.master_db_instance_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.slave_db_instance_id is not None:
            result['SlaveDbInstanceId'] = self.slave_db_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DbEngineTypes') is not None:
            self.db_engine_types = m.get('DbEngineTypes')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MasterDbInstanceId') is not None:
            self.master_db_instance_id = m.get('MasterDbInstanceId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SlaveDbInstanceId') is not None:
            self.slave_db_instance_id = m.get('SlaveDbInstanceId')
        return self


class DescribeGadInstancesResponseBodyInstancesInstances(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        db_engine_type: str = None,
        db_instance_count: int = None,
        instance_id: str = None,
        instance_name: str = None,
        instance_region: str = None,
        instance_type: str = None,
        master_db_instance_id: str = None,
        master_db_instance_name: str = None,
        master_db_instance_region: str = None,
        master_db_instance_zone_id: str = None,
        master_engine_arch_type: int = None,
        resource_group_id: str = None,
        status: str = None,
    ):
        self.create_time = create_time
        self.db_engine_type = db_engine_type
        self.db_instance_count = db_instance_count
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.instance_region = instance_region
        self.instance_type = instance_type
        self.master_db_instance_id = master_db_instance_id
        self.master_db_instance_name = master_db_instance_name
        self.master_db_instance_region = master_db_instance_region
        self.master_db_instance_zone_id = master_db_instance_zone_id
        self.master_engine_arch_type = master_engine_arch_type
        self.resource_group_id = resource_group_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.db_engine_type is not None:
            result['DbEngineType'] = self.db_engine_type
        if self.db_instance_count is not None:
            result['DbInstanceCount'] = self.db_instance_count
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_region is not None:
            result['InstanceRegion'] = self.instance_region
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.master_db_instance_id is not None:
            result['MasterDbInstanceId'] = self.master_db_instance_id
        if self.master_db_instance_name is not None:
            result['MasterDbInstanceName'] = self.master_db_instance_name
        if self.master_db_instance_region is not None:
            result['MasterDbInstanceRegion'] = self.master_db_instance_region
        if self.master_db_instance_zone_id is not None:
            result['MasterDbInstanceZoneId'] = self.master_db_instance_zone_id
        if self.master_engine_arch_type is not None:
            result['MasterEngineArchType'] = self.master_engine_arch_type
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DbEngineType') is not None:
            self.db_engine_type = m.get('DbEngineType')
        if m.get('DbInstanceCount') is not None:
            self.db_instance_count = m.get('DbInstanceCount')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceRegion') is not None:
            self.instance_region = m.get('InstanceRegion')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('MasterDbInstanceId') is not None:
            self.master_db_instance_id = m.get('MasterDbInstanceId')
        if m.get('MasterDbInstanceName') is not None:
            self.master_db_instance_name = m.get('MasterDbInstanceName')
        if m.get('MasterDbInstanceRegion') is not None:
            self.master_db_instance_region = m.get('MasterDbInstanceRegion')
        if m.get('MasterDbInstanceZoneId') is not None:
            self.master_db_instance_zone_id = m.get('MasterDbInstanceZoneId')
        if m.get('MasterEngineArchType') is not None:
            self.master_engine_arch_type = m.get('MasterEngineArchType')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeGadInstancesResponseBodyInstances(TeaModel):
    def __init__(
        self,
        instances: List[DescribeGadInstancesResponseBodyInstancesInstances] = None,
    ):
        self.instances = instances

    def validate(self):
        if self.instances:
            for k in self.instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Instances'] = []
        if self.instances is not None:
            for k in self.instances:
                result['Instances'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.instances = []
        if m.get('Instances') is not None:
            for k in m.get('Instances'):
                temp_model = DescribeGadInstancesResponseBodyInstancesInstances()
                self.instances.append(temp_model.from_map(k))
        return self


class DescribeGadInstancesResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        instances: DescribeGadInstancesResponseBodyInstances = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        total_record_count: int = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.instances = instances
        self.page_number = page_number
        self.page_record_count = page_record_count
        self.request_id = request_id
        self.success = success
        self.total_record_count = total_record_count

    def validate(self):
        if self.instances:
            self.instances.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instances is not None:
            result['Instances'] = self.instances.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instances') is not None:
            temp_model = DescribeGadInstancesResponseBodyInstances()
            self.instances = temp_model.from_map(m['Instances'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeGadInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeGadInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGadInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInitializationStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: **1** to **100**. Default value: **30**.
        self.page_size = page_size
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DescribeInitializationStatusResponseBodyDataInitializationDetails(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        finish_row_num: str = None,
        source_owner_dbname: str = None,
        status: str = None,
        table_name: str = None,
        total_row_num: str = None,
        used_time: str = None,
    ):
        # The name of the database to which the object in the destination instance belongs.
        self.destination_owner_dbname = destination_owner_dbname
        # The error message returned if initial full data synchronization failed.
        self.error_message = error_message
        # The total number of rows that are actually synchronized.
        # 
        # >  This parameter indicates the total number of actually synchronized rows. In contrast, the value of the **TotalRowNum** parameter is calculated based on the system tables in the source database. The values of the two parameters may be different due to time difference.
        self.finish_row_num = finish_row_num
        # The name of the database to which the object in the source instance belongs.
        self.source_owner_dbname = source_owner_dbname
        # The status of initial full data synchronization. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Migrating**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status
        # The table name.
        self.table_name = table_name
        # The total number of rows that are supposed to be synchronized.
        # 
        # >  The value of this parameter is calculated based on the system tables in the source database. In contrast, the **FinishRowNum** parameter indicates the total number of actually synchronized rows. The values of the two parameters may be different due to time difference.
        self.total_row_num = total_row_num
        # The time spent on full data synchronization.
        self.used_time = used_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.finish_row_num is not None:
            result['FinishRowNum'] = self.finish_row_num
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        if self.table_name is not None:
            result['TableName'] = self.table_name
        if self.total_row_num is not None:
            result['TotalRowNum'] = self.total_row_num
        if self.used_time is not None:
            result['UsedTime'] = self.used_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('FinishRowNum') is not None:
            self.finish_row_num = m.get('FinishRowNum')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        if m.get('TotalRowNum') is not None:
            self.total_row_num = m.get('TotalRowNum')
        if m.get('UsedTime') is not None:
            self.used_time = m.get('UsedTime')
        return self


class DescribeInitializationStatusResponseBodyDataSynchronizationDetails(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        source_owner_dbname: str = None,
        status: str = None,
        table_name: str = None,
    ):
        # The name of the database to which the object in the destination instance belongs.
        self.destination_owner_dbname = destination_owner_dbname
        # The error message returned if incremental data synchronization failed.
        self.error_message = error_message
        # The name of the database to which the object in the source instance belongs.
        self.source_owner_dbname = source_owner_dbname
        # The status of incremental data synchronization. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Migrating**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status
        # The table name.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        object_definition: str = None,
        object_name: str = None,
        object_type: str = None,
        source_owner_dbname: str = None,
        status: str = None,
    ):
        # The name of the database to which the object in the destination instance belongs.
        self.destination_owner_dbname = destination_owner_dbname
        # The error message returned if constraints failed to be created.
        self.error_message = error_message
        # The syntax to create constraints.
        self.object_definition = object_definition
        # The name of the object.
        self.object_name = object_name
        # The type of the object. Valid value: **Table**.
        self.object_type = object_type
        # The name of the database to which the object in the source instance belongs.
        self.source_owner_dbname = source_owner_dbname
        # The status of constraint creation. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Migrating**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.object_definition is not None:
            result['ObjectDefinition'] = self.object_definition
        if self.object_name is not None:
            result['ObjectName'] = self.object_name
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ObjectDefinition') is not None:
            self.object_definition = m.get('ObjectDefinition')
        if m.get('ObjectName') is not None:
            self.object_name = m.get('ObjectName')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInitializationStatusResponseBodyStructureInitializationDetails(TeaModel):
    def __init__(
        self,
        constraints: List[DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints] = None,
        destination_owner_dbname: str = None,
        error_message: str = None,
        object_definition: str = None,
        object_name: str = None,
        object_type: str = None,
        source_owner_dbname: str = None,
        status: str = None,
    ):
        # The constraints of the synchronization object, such as indexes and foreign keys.
        # 
        # >  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the synchronization object has constraints.
        self.constraints = constraints
        # The name of the database to which the object in the destination instance belongs.
        self.destination_owner_dbname = destination_owner_dbname
        # The error message returned if initial schema synchronization failed.
        self.error_message = error_message
        # The schema of the object.
        self.object_definition = object_definition
        # The name of the object.
        self.object_name = object_name
        # The type of the object. Valid values:
        # 
        # **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
        self.object_type = object_type
        # The name of the database to which the object in the source instance belongs.
        self.source_owner_dbname = source_owner_dbname
        # The status of initial schema synchronization. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Migrating**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status

    def validate(self):
        if self.constraints:
            for k in self.constraints:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Constraints'] = []
        if self.constraints is not None:
            for k in self.constraints:
                result['Constraints'].append(k.to_map() if k else None)
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.object_definition is not None:
            result['ObjectDefinition'] = self.object_definition
        if self.object_name is not None:
            result['ObjectName'] = self.object_name
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.constraints = []
        if m.get('Constraints') is not None:
            for k in m.get('Constraints'):
                temp_model = DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints()
                self.constraints.append(temp_model.from_map(k))
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ObjectDefinition') is not None:
            self.object_definition = m.get('ObjectDefinition')
        if m.get('ObjectName') is not None:
            self.object_name = m.get('ObjectName')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeInitializationStatusResponseBody(TeaModel):
    def __init__(
        self,
        data_initialization_details: List[DescribeInitializationStatusResponseBodyDataInitializationDetails] = None,
        data_synchronization_details: List[DescribeInitializationStatusResponseBodyDataSynchronizationDetails] = None,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        structure_initialization_details: List[DescribeInitializationStatusResponseBodyStructureInitializationDetails] = None,
        success: str = None,
    ):
        # The details of initial full data synchronization.
        self.data_initialization_details = data_initialization_details
        # The details of incremental data synchronization.
        # 
        # >  This parameter and the parameters it contains will be removed in the future.
        self.data_synchronization_details = data_synchronization_details
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # The details of initial schema synchronization.
        self.structure_initialization_details = structure_initialization_details
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        if self.data_initialization_details:
            for k in self.data_initialization_details:
                if k:
                    k.validate()
        if self.data_synchronization_details:
            for k in self.data_synchronization_details:
                if k:
                    k.validate()
        if self.structure_initialization_details:
            for k in self.structure_initialization_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DataInitializationDetails'] = []
        if self.data_initialization_details is not None:
            for k in self.data_initialization_details:
                result['DataInitializationDetails'].append(k.to_map() if k else None)
        result['DataSynchronizationDetails'] = []
        if self.data_synchronization_details is not None:
            for k in self.data_synchronization_details:
                result['DataSynchronizationDetails'].append(k.to_map() if k else None)
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['StructureInitializationDetails'] = []
        if self.structure_initialization_details is not None:
            for k in self.structure_initialization_details:
                result['StructureInitializationDetails'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data_initialization_details = []
        if m.get('DataInitializationDetails') is not None:
            for k in m.get('DataInitializationDetails'):
                temp_model = DescribeInitializationStatusResponseBodyDataInitializationDetails()
                self.data_initialization_details.append(temp_model.from_map(k))
        self.data_synchronization_details = []
        if m.get('DataSynchronizationDetails') is not None:
            for k in m.get('DataSynchronizationDetails'):
                temp_model = DescribeInitializationStatusResponseBodyDataSynchronizationDetails()
                self.data_synchronization_details.append(temp_model.from_map(k))
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.structure_initialization_details = []
        if m.get('StructureInitializationDetails') is not None:
            for k in m.get('StructureInitializationDetails'):
                temp_model = DescribeInitializationStatusResponseBodyStructureInitializationDetails()
                self.structure_initialization_details.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInitializationStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeInitializationStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInitializationStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobMonitorRuleRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeJobMonitorRuleResponseBodyMonitorRules(TeaModel):
    def __init__(
        self,
        delay_rule_time: int = None,
        job_id: str = None,
        job_type: str = None,
        notice_value: int = None,
        period: int = None,
        phone: str = None,
        state: str = None,
        times: int = None,
        type: str = None,
    ):
        # The threshold that triggers the alert.
        # 
        # *   If the request parameter **Type** of the [CreateJobMonitorRule](https://help.aliyun.com/document_detail/212332.html) operation is set to **delay**, the unit of DelayRuleTime is seconds.
        # *   If the request parameter **Type** of the [CreateJobMonitorRule](https://help.aliyun.com/document_detail/212332.html) operation is set to **full_timeout**, the unit of DelayRuleTime is hours.
        self.delay_rule_time = delay_rule_time
        # Task ID.
        self.job_id = job_id
        # The task type of the DTS instance, with values: - **normal**: Migration or synchronization task. - **full_check**: Associated full check task. - **etl_check**: Associated incremental check task.
        self.job_type = job_type
        # Alarm threshold.
        self.notice_value = notice_value
        # The statistical period for incremental validation tasks, in minutes.
        # > Currently supported values are 1 minute, 5 minutes, 10 minutes, and 30 minutes.
        self.period = period
        # The mobile phone numbers that receive alert notifications. Multiple mobile numbers are separated by commas (,).
        self.phone = phone
        # Indicates whether the monitoring rule is enabled. Valid values:
        # 
        # *   **Y**: The monitoring rule is enabled.
        # *   **N**: The monitoring rule is disabled.
        self.state = state
        # The number of cycles for the incremental validation task.
        self.times = times
        # The type of the monitoring rule. Valid values:
        # 
        # *   **delay**: If the task latency reaches the threshold, an alert is triggered.
        # *   **error**: If an exception occurs, an alert is triggered.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay_rule_time is not None:
            result['DelayRuleTime'] = self.delay_rule_time
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_type is not None:
            result['JobType'] = self.job_type
        if self.notice_value is not None:
            result['NoticeValue'] = self.notice_value
        if self.period is not None:
            result['Period'] = self.period
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.state is not None:
            result['State'] = self.state
        if self.times is not None:
            result['Times'] = self.times
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DelayRuleTime') is not None:
            self.delay_rule_time = m.get('DelayRuleTime')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobType') is not None:
            self.job_type = m.get('JobType')
        if m.get('NoticeValue') is not None:
            self.notice_value = m.get('NoticeValue')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Times') is not None:
            self.times = m.get('Times')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeJobMonitorRuleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        monitor_rules: List[DescribeJobMonitorRuleResponseBodyMonitorRules] = None,
        request_id: str = None,
        success: bool = None,
        topics: List[str] = None,
    ):
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The monitoring rules of the DTS task.
        self.monitor_rules = monitor_rules
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful. Valid values:
        # 
        # *   **true**: The call was successful.
        # *   **false**:The call failed.
        self.success = success
        # The topics of all subtasks in the distributed change tracking task.
        self.topics = topics

    def validate(self):
        if self.monitor_rules:
            for k in self.monitor_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['MonitorRules'] = []
        if self.monitor_rules is not None:
            for k in self.monitor_rules:
                result['MonitorRules'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.topics is not None:
            result['Topics'] = self.topics
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.monitor_rules = []
        if m.get('MonitorRules') is not None:
            for k in m.get('MonitorRules'):
                temp_model = DescribeJobMonitorRuleResponseBodyMonitorRules()
                self.monitor_rules.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Topics') is not None:
            self.topics = m.get('Topics')
        return self


class DescribeJobMonitorRuleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeJobMonitorRuleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobMonitorRuleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMetricListRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        dts_job_id: str = None,
        end_time: int = None,
        env: str = None,
        metric_name: str = None,
        metric_type: str = None,
        owner_id: str = None,
        param: str = None,
        period: int = None,
        resource_group_id: str = None,
        start_time: int = None,
    ):
        # The ID of the Alibaba Cloud account.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the data migration or synchronization task.
        self.dts_job_id = dts_job_id
        # The timestamp that indicates the end of the time range to query. Unit: milliseconds.
        self.end_time = end_time
        # Default value: **ALIYUN**.
        self.env = env
        # *   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
        # *   **diskusage_utilization**: the disk usage.
        # *   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
        # *   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
        # *   **cpu_total**: the CPU utilization.
        # *   **memory_usedutilization**: the memory usage.
        # *   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.
        # 
        # This parameter is required.
        self.metric_name = metric_name
        # Indicates whether the metrics of the cluster or a node are queried. Valid values:
        # 
        # *   **CLUSTER**: The metrics of the cluster are queried.
        # *   **NODE**: The metrics of a node are queried.
        self.metric_type = metric_type
        self.owner_id = owner_id
        # The monitored object. If the **MetricType** parameter is set to **NODE**, set this parameter to the ID of the node that is monitored.
        # 
        # This parameter is required.
        self.param = param
        # The monitoring interval. Unit: seconds. The minimum value is 15.
        self.period = period
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The timestamp that indicates the beginning of the time range to query. Unit: milliseconds.
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.env is not None:
            result['Env'] = self.env
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.metric_type is not None:
            result['MetricType'] = self.metric_type
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.param is not None:
            result['Param'] = self.param
        if self.period is not None:
            result['Period'] = self.period
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Env') is not None:
            self.env = m.get('Env')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('MetricType') is not None:
            self.metric_type = m.get('MetricType')
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('Param') is not None:
            self.param = m.get('Param')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class DescribeMetricListResponseBodyDataPoints(TeaModel):
    def __init__(
        self,
        statistics: float = None,
        timestamp: int = None,
    ):
        # The statistical value.
        self.statistics = statistics
        # The timestamp of the record. Unit: milliseconds.
        self.timestamp = timestamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.statistics is not None:
            result['Statistics'] = self.statistics
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Statistics') is not None:
            self.statistics = m.get('Statistics')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class DescribeMetricListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data_points: List[DescribeMetricListResponseBodyDataPoints] = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        metric_name: str = None,
        metric_type: str = None,
        param: str = None,
        period: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned by the backend service. The number is incremented.
        self.code = code
        # The monitoring statistics.
        self.data_points = data_points
        # The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code returned for an exception.
        self.http_status_code = http_status_code
        # *   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
        # *   **diskusage_utilization**: the disk usage.
        # *   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
        # *   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
        # *   **cpu_total**: the CPU utilization.
        # *   **memory_usedutilization**: the memory usage.
        # *   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.
        self.metric_name = metric_name
        # Indicates whether the metrics of the cluster or a node are queried. Valid values:
        # 
        # *   **CLUSTER**: The metrics of the cluster are queried.
        # *   **NODE**: The metrics of a node are queried.
        self.metric_type = metric_type
        # The monitored object.
        # 
        # *   If the **MetricType** parameter is set to **NODE**, the value of this parameter is the ID of the node that is monitored.****\
        # *   If the **MetricType** parameter is set to **CLUSTER**, the value of this parameter is the ID of the dedicated cluster. You can obtain the ID by calling the ListDedicatedCluster operation.
        self.param = param
        # The monitoring interval. Unit: seconds. Minimum value: 15.
        self.period = period
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        if self.data_points:
            for k in self.data_points:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['DataPoints'] = []
        if self.data_points is not None:
            for k in self.data_points:
                result['DataPoints'].append(k.to_map() if k else None)
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.metric_name is not None:
            result['MetricName'] = self.metric_name
        if self.metric_type is not None:
            result['MetricType'] = self.metric_type
        if self.param is not None:
            result['Param'] = self.param
        if self.period is not None:
            result['Period'] = self.period
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data_points = []
        if m.get('DataPoints') is not None:
            for k in m.get('DataPoints'):
                temp_model = DescribeMetricListResponseBodyDataPoints()
                self.data_points.append(temp_model.from_map(k))
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MetricName') is not None:
            self.metric_name = m.get('MetricName')
        if m.get('MetricType') is not None:
            self.metric_type = m.get('MetricType')
        if m.get('Param') is not None:
            self.param = m.get('Param')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeMetricListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMetricListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMetricListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMigrationJobAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # ID of the Alibaba Cloud primary account. No need to set this parameter as it will be deprecated soon.
        self.account_id = account_id
        # Used to ensure the idempotence of requests. This parameter value should be generated by the client, ensuring uniqueness across different requests. The maximum length is 64 ASCII characters, and the value must not contain non-ASCII characters.
        self.client_token = client_token
        # Data migration instance ID, which can be queried by calling the DescribeMigrationJobs interface.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The ID of the region where the data migration instance is located. For more details, please refer to the [list of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeMigrationJobAlertResponseBody(TeaModel):
    def __init__(
        self,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        err_code: str = None,
        err_message: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        migration_job_id: str = None,
        migration_job_name: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # Phone number of the contact for delay alarm.
        self.delay_alert_phone = delay_alert_phone
        # Whether to monitor the delay status, return values:
        # - **enable**: Yes. - **disable**: No.
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering a delayed alarm, in seconds.
        self.delay_over_seconds = delay_over_seconds
        # Error code returned when the call fails.
        self.err_code = err_code
        # Indicates whether the call was successful.
        self.err_message = err_message
        # Phone number of the contact for abnormal alarm notifications
        self.error_alert_phone = error_alert_phone
        # Whether to monitor for abnormal status, return values:
        # - **enable**: Yes. - **disable**: No.
        self.error_alert_status = error_alert_status
        # Data migration instance ID.
        self.migration_job_id = migration_job_id
        # Name of the data migration task.
        self.migration_job_name = migration_job_name
        # The ID of the request.
        self.request_id = request_id
        # Whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.migration_job_name is not None:
            result['MigrationJobName'] = self.migration_job_name
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('MigrationJobName') is not None:
            self.migration_job_name = m.get('MigrationJobName')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeMigrationJobAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMigrationJobAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMigrationJobAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMigrationJobDetailRequestMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.data_initialization = data_initialization
        # The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
        self.data_synchronization = data_synchronization
        # When you call this operation, the data migration task must be in the Migrating, Failed, Paused, or Finished state.
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeMigrationJobDetailRequest(TeaModel):
    def __init__(
        self,
        migration_mode: DescribeMigrationJobDetailRequestMigrationMode = None,
        account_id: str = None,
        client_token: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.migration_mode = migration_mode
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
        self.account_id = account_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.client_token = client_token
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: 30, 50, and 100. Default value: 30.
        self.page_size = page_size
        # The ID of the region where the data migration instance resides. For more information, see List of supported regions.
        self.region_id = region_id
        # Specifies whether to query the details of schema migration. Valid values:
        # 
        # *   **true**: yes
        # 
        # *   **false**: no
        # 
        # > Default value: **false**\
        self.resource_group_id = resource_group_id

    def validate(self):
        if self.migration_mode:
            self.migration_mode.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MigrationMode') is not None:
            temp_model = DescribeMigrationJobDetailRequestMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        finish_row_num: str = None,
        migration_time: str = None,
        source_owner_dbname: str = None,
        status: str = None,
        table_name: str = None,
        total_row_num: str = None,
    ):
        # The status of full data migration. Valid values:
        # 
        # - **NotStarted**: Full data migration is not started.
        # - **Migrating**: Full data migration is in progress.
        # - **Failed**: Full data migration failed.
        # - **Finished**: Full data migration is completed.
        self.destination_owner_dbname = destination_owner_dbname
        # The page number of the returned page.
        self.error_message = error_message
        # The details of full data migration.
        self.finish_row_num = finish_row_num
        # The name of the database to which the migration object in the source instance belongs.
        self.migration_time = migration_time
        # Indicates whether the call was successful.
        self.source_owner_dbname = source_owner_dbname
        # The total number of entries that are returned.
        self.status = status
        # The error message returned if the call failed.
        self.table_name = table_name
        # The table name.
        self.total_row_num = total_row_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.finish_row_num is not None:
            result['FinishRowNum'] = self.finish_row_num
        if self.migration_time is not None:
            result['MigrationTime'] = self.migration_time
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        if self.table_name is not None:
            result['TableName'] = self.table_name
        if self.total_row_num is not None:
            result['TotalRowNum'] = self.total_row_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('FinishRowNum') is not None:
            self.finish_row_num = m.get('FinishRowNum')
        if m.get('MigrationTime') is not None:
            self.migration_time = m.get('MigrationTime')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        if m.get('TotalRowNum') is not None:
            self.total_row_num = m.get('TotalRowNum')
        return self


class DescribeMigrationJobDetailResponseBodyDataInitializationDetailList(TeaModel):
    def __init__(
        self,
        data_initialization_detail: List[DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail] = None,
    ):
        self.data_initialization_detail = data_initialization_detail

    def validate(self):
        if self.data_initialization_detail:
            for k in self.data_initialization_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DataInitializationDetail'] = []
        if self.data_initialization_detail is not None:
            for k in self.data_initialization_detail:
                result['DataInitializationDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data_initialization_detail = []
        if m.get('DataInitializationDetail') is not None:
            for k in m.get('DataInitializationDetail'):
                temp_model = DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail()
                self.data_initialization_detail.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        source_owner_dbname: str = None,
        status: str = None,
        table_name: str = None,
    ):
        # The status of incremental data migration. Valid values:
        # 
        # *   **NotStarted**: Incremental data migration is not started.
        # *   **Migrating**: Incremental data migration is in progress.
        # *   **Failed**: Incremental data migration failed.
        # *   **Finished**: Incremental data migration is completed.
        self.destination_owner_dbname = destination_owner_dbname
        # The total number of records that are supposed to be migrated by the task.
        self.error_message = error_message
        # The time taken by full data migration.
        self.source_owner_dbname = source_owner_dbname
        # The number of records that have been migrated.
        self.status = status
        # The name of the database to which the migration object in the destination instance belongs.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList(TeaModel):
    def __init__(
        self,
        data_synchronization_detail: List[DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail] = None,
    ):
        self.data_synchronization_detail = data_synchronization_detail

    def validate(self):
        if self.data_synchronization_detail:
            for k in self.data_synchronization_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DataSynchronizationDetail'] = []
        if self.data_synchronization_detail is not None:
            for k in self.data_synchronization_detail:
                result['DataSynchronizationDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data_synchronization_detail = []
        if m.get('DataSynchronizationDetail') is not None:
            for k in m.get('DataSynchronizationDetail'):
                temp_model = DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail()
                self.data_synchronization_detail.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail(TeaModel):
    def __init__(
        self,
        destination_owner_dbname: str = None,
        error_message: str = None,
        object_definition: str = None,
        object_name: str = None,
        object_type: str = None,
        source_owner_dbname: str = None,
        status: str = None,
    ):
        # The status of constraint creation. Valid values:
        # 
        # - **NotStarted**\
        # - **Migrating**\
        # - **Failed**\
        # - **Finished**\
        self.destination_owner_dbname = destination_owner_dbname
        # The constraints of the migration object, such as indexes and foreign keys. 
        # 
        # >  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the migration object has constraints.
        self.error_message = error_message
        # The name of the database to which the migration object in the destination instance belongs.
        self.object_definition = object_definition
        # The name of the database to which the migration object in the source instance belongs.
        self.object_name = object_name
        # The name of migration object.
        self.object_type = object_type
        # The error message returned if schema migration failed.
        self.source_owner_dbname = source_owner_dbname
        # The type of the migration object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.object_definition is not None:
            result['ObjectDefinition'] = self.object_definition
        if self.object_name is not None:
            result['ObjectName'] = self.object_name
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ObjectDefinition') is not None:
            self.object_definition = m.get('ObjectDefinition')
        if m.get('ObjectName') is not None:
            self.object_name = m.get('ObjectName')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList(TeaModel):
    def __init__(
        self,
        structure_initialization_detail: List[DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail] = None,
    ):
        self.structure_initialization_detail = structure_initialization_detail

    def validate(self):
        if self.structure_initialization_detail:
            for k in self.structure_initialization_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['StructureInitializationDetail'] = []
        if self.structure_initialization_detail is not None:
            for k in self.structure_initialization_detail:
                result['StructureInitializationDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.structure_initialization_detail = []
        if m.get('StructureInitializationDetail') is not None:
            for k in m.get('StructureInitializationDetail'):
                temp_model = DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail()
                self.structure_initialization_detail.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail(TeaModel):
    def __init__(
        self,
        constraint_list: DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList = None,
        destination_owner_dbname: str = None,
        error_message: str = None,
        object_definition: str = None,
        object_name: str = None,
        object_type: str = None,
        source_owner_dbname: str = None,
        status: str = None,
    ):
        # The schema of the migration object.
        self.constraint_list = constraint_list
        # The status of schema migration. Valid values:
        # 
        # - **NotStarted**: Schema migration is not started.
        # - **Migrating**: Schema migration is in progress.
        # - **Failed**: Schema migration failed.
        # - **Finished**: Schema migration is completed.
        self.destination_owner_dbname = destination_owner_dbname
        # The details of schema migration.
        self.error_message = error_message
        # The task has failed for too long and cannot be restored
        self.object_definition = object_definition
        # The name of the database to which the migration object in the source instance belongs.
        self.object_name = object_name
        # The name of the database to which the migration object in the destination instance belongs.
        self.object_type = object_type
        # The error message returned if incremental data migration failed.
        self.source_owner_dbname = source_owner_dbname
        # The table name.
        self.status = status

    def validate(self):
        if self.constraint_list:
            self.constraint_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.constraint_list is not None:
            result['ConstraintList'] = self.constraint_list.to_map()
        if self.destination_owner_dbname is not None:
            result['DestinationOwnerDBName'] = self.destination_owner_dbname
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.object_definition is not None:
            result['ObjectDefinition'] = self.object_definition
        if self.object_name is not None:
            result['ObjectName'] = self.object_name
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        if self.source_owner_dbname is not None:
            result['SourceOwnerDBName'] = self.source_owner_dbname
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConstraintList') is not None:
            temp_model = DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList()
            self.constraint_list = temp_model.from_map(m['ConstraintList'])
        if m.get('DestinationOwnerDBName') is not None:
            self.destination_owner_dbname = m.get('DestinationOwnerDBName')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ObjectDefinition') is not None:
            self.object_definition = m.get('ObjectDefinition')
        if m.get('ObjectName') is not None:
            self.object_name = m.get('ObjectName')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        if m.get('SourceOwnerDBName') is not None:
            self.source_owner_dbname = m.get('SourceOwnerDBName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList(TeaModel):
    def __init__(
        self,
        structure_initialization_detail: List[DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail] = None,
    ):
        self.structure_initialization_detail = structure_initialization_detail

    def validate(self):
        if self.structure_initialization_detail:
            for k in self.structure_initialization_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['StructureInitializationDetail'] = []
        if self.structure_initialization_detail is not None:
            for k in self.structure_initialization_detail:
                result['StructureInitializationDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.structure_initialization_detail = []
        if m.get('StructureInitializationDetail') is not None:
            for k in m.get('StructureInitializationDetail'):
                temp_model = DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail()
                self.structure_initialization_detail.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobDetailResponseBody(TeaModel):
    def __init__(
        self,
        data_initialization_detail_list: DescribeMigrationJobDetailResponseBodyDataInitializationDetailList = None,
        data_synchronization_detail_list: DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList = None,
        err_code: str = None,
        err_message: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        structure_initialization_detail_list: DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The maximum number of data migration instances that can be displayed on one page.
        self.data_initialization_detail_list = data_initialization_detail_list
        # The error message returned if full data migration failed.
        self.data_synchronization_detail_list = data_synchronization_detail_list
        # Specifies whether to query the details of incremental data migration. Valid values:
        # 
        # *   **true**: yes
        # 
        # *   **false**: no
        # 
        # > Default value: **false**\
        self.err_code = err_code
        # The ID of the request.
        self.err_message = err_message
        # The error code returned if the call failed.
        self.page_number = page_number
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
        self.page_record_count = page_record_count
        # Specifies whether to query the details of full data migration. Valid values:
        # 
        # *   **true**: yes
        # 
        # *   **false**: no
        # 
        # > Default value: **false**\
        self.request_id = request_id
        # The name of the database to which the migration object in the source instance belongs.
        self.structure_initialization_detail_list = structure_initialization_detail_list
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.success = success
        # Resource group ID.
        self.total_record_count = total_record_count

    def validate(self):
        if self.data_initialization_detail_list:
            self.data_initialization_detail_list.validate()
        if self.data_synchronization_detail_list:
            self.data_synchronization_detail_list.validate()
        if self.structure_initialization_detail_list:
            self.structure_initialization_detail_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization_detail_list is not None:
            result['DataInitializationDetailList'] = self.data_initialization_detail_list.to_map()
        if self.data_synchronization_detail_list is not None:
            result['DataSynchronizationDetailList'] = self.data_synchronization_detail_list.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.structure_initialization_detail_list is not None:
            result['StructureInitializationDetailList'] = self.structure_initialization_detail_list.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitializationDetailList') is not None:
            temp_model = DescribeMigrationJobDetailResponseBodyDataInitializationDetailList()
            self.data_initialization_detail_list = temp_model.from_map(m['DataInitializationDetailList'])
        if m.get('DataSynchronizationDetailList') is not None:
            temp_model = DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList()
            self.data_synchronization_detail_list = temp_model.from_map(m['DataSynchronizationDetailList'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('StructureInitializationDetailList') is not None:
            temp_model = DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList()
            self.structure_initialization_detail_list = temp_model.from_map(m['StructureInitializationDetailList'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeMigrationJobDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMigrationJobDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMigrationJobDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMigrationJobStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeMigrationJobStatusResponseBodyDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration failed.
        self.error_message = error_message
        # The migration progress. Unit: %.
        self.percent = percent
        # The number of records that have been migrated during full data migration.
        self.progress = progress
        # The status of full data migration. Valid values:
        # 
        # *   **NotStarted**: Full data migration is not started.
        # *   **Migrating**: Full data migration is in progress.
        # *   **Failed**: Full data migration failed.
        # *   **Finished**: Full data migration is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        delay: str = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The UNIX timestamp generated when the latest incremental data is migrated. Unit: seconds.
        self.checkpoint = checkpoint
        # The latency of incremental data migration. Unit: seconds.
        self.delay = delay
        # The error message returned if incremental data migration failed.
        self.error_message = error_message
        # The progress of incremental data migration. Unit: %.
        self.percent = percent
        # The status of incremental data migration. Valid values:
        # 
        # *   **NotStarted**: Incremental data migration is not started.
        # *   **Migrating**: Incremental data migration is in progress.
        # *   **Failed**: Incremental data migration failed.
        # *   **Finished**: Incremental data migration is completed.
        # *   **Catched**: Incremental data migration is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobStatusResponseBodyDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
        oracle_sid: str = None,
    ):
        # The name of the database to which the migration object in the destination instance belongs.
        self.database_name = database_name
        # The database type of the destination instance.
        self.engine_name = engine_name
        # The endpoint of the destination instance.
        self.ip = ip
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The database service port of the destination instance.
        self.port = port
        # The database account of the destination instance.
        self.user_name = user_name
        # The system ID (SID) of the Oracle database.
        # 
        # >  This parameter is returned only if the database type of the destination instance is **Oracle**.
        self.oracle_sid = oracle_sid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.oracle_sid is not None:
            result['oracleSID'] = self.oracle_sid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('oracleSID') is not None:
            self.oracle_sid = m.get('oracleSID')
        return self


class DescribeMigrationJobStatusResponseBodyMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether full data migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['dataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['dataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['structureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dataInitialization') is not None:
            self.data_initialization = m.get('dataInitialization')
        if m.get('dataSynchronization') is not None:
            self.data_synchronization = m.get('dataSynchronization')
        if m.get('structureInitialization') is not None:
            self.structure_initialization = m.get('structureInitialization')
        return self


class DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem(TeaModel):
    def __init__(
        self,
        check_status: str = None,
        error_message: str = None,
        item_name: str = None,
        repair_method: str = None,
    ):
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.check_status = check_status
        # The error message returned if the task failed to pass the precheck.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.error_message = error_message
        # The name of the precheck item.
        self.item_name = item_name
        # The method to fix the precheck failure.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['CheckStatus'] = self.check_status
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckStatus') is not None:
            self.check_status = m.get('CheckStatus')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_item: List[DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem] = None,
    ):
        self.check_item = check_item

    def validate(self):
        if self.check_item:
            for k in self.check_item:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CheckItem'] = []
        if self.check_item is not None:
            for k in self.check_item:
                result['CheckItem'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.check_item = []
        if m.get('CheckItem') is not None:
            for k in m.get('CheckItem'):
                temp_model = DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem()
                self.check_item.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobStatusResponseBodyPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The precheck progress. Unit: %.
        self.percent = percent
        # The precheck status. Valid values:
        # 
        # *   **NotStarted**\
        # *   **Suspending**:
        # *   **Checking**\
        # *   **Failed**\
        # *   **Finished**\
        self.status = status

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Detail') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail()
            self.detail = temp_model.from_map(m['Detail'])
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobStatusResponseBodySourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
        oracle_sid: str = None,
    ):
        # The name of the database to which the migration object in the source instance belongs.
        self.database_name = database_name
        # The database type of the source instance.
        self.engine_name = engine_name
        # The endpoint of the source instance.
        self.ip = ip
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        # 
        # *   **RDS**: ApsaraDB RDS instance
        # *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
        # *   **MongoDB**: ApsaraDB for MongoDB instance
        # *   **POLARDB**: PolarDB for MySQL cluster (available only for the China site)
        self.instance_type = instance_type
        # The database service port of the source instance.
        self.port = port
        # The database account of the source instance.
        self.user_name = user_name
        # The SID of the Oracle database.
        # 
        # >  This parameter is returned only if the database type of the source instance is **Oracle**.
        self.oracle_sid = oracle_sid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.oracle_sid is not None:
            result['oracleSID'] = self.oracle_sid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('oracleSID') is not None:
            self.oracle_sid = m.get('oracleSID')
        return self


class DescribeMigrationJobStatusResponseBodyStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema migration failed.
        self.error_message = error_message
        # The progress of schema migration. Unit: %.
        self.percent = percent
        # The number of tables whose schemas have been migrated.
        self.progress = progress
        # The status of schema migration. Valid values:
        # 
        # *   **NotStarted**: Schema migration is not started.
        # *   **Migrating**: Schema migration is in progress.
        # *   **Failed**: Schema migration failed.
        # *   **Finished**: Schema migration is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobStatusResponseBody(TeaModel):
    def __init__(
        self,
        data_initialization_status: DescribeMigrationJobStatusResponseBodyDataInitializationStatus = None,
        data_synchronization_status: DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus = None,
        destination_endpoint: DescribeMigrationJobStatusResponseBodyDestinationEndpoint = None,
        err_code: str = None,
        err_message: str = None,
        migration_job_class: str = None,
        migration_job_id: str = None,
        migration_job_name: str = None,
        migration_job_status: str = None,
        migration_mode: DescribeMigrationJobStatusResponseBodyMigrationMode = None,
        migration_object: str = None,
        pay_type: str = None,
        precheck_status: DescribeMigrationJobStatusResponseBodyPrecheckStatus = None,
        request_id: str = None,
        source_endpoint: DescribeMigrationJobStatusResponseBodySourceEndpoint = None,
        structure_initialization_status: DescribeMigrationJobStatusResponseBodyStructureInitializationStatus = None,
        success: str = None,
        task_id: str = None,
    ):
        # The status of full data migration.
        self.data_initialization_status = data_initialization_status
        # The status of incremental data migration.
        self.data_synchronization_status = data_synchronization_status
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
        self.migration_job_class = migration_job_class
        # The ID of the data migration instance.
        self.migration_job_id = migration_job_id
        # The name of the data migration task.
        self.migration_job_name = migration_job_name
        # The status of the data migration task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Migrating**: The task is migrating data.
        # *   **Suspending**: The task is paused.
        # *   **MigrationFailed**: The task failed to migrate data.
        # *   **Finished**: The task is completed.
        self.migration_job_status = migration_job_status
        # The migration types.
        self.migration_mode = migration_mode
        # The objects that are migrated by the task.
        self.migration_object = migration_object
        # The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).
        self.pay_type = pay_type
        # The precheck details.
        self.precheck_status = precheck_status
        # The ID of the request.
        self.request_id = request_id
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The status of schema migration.
        self.structure_initialization_status = structure_initialization_status
        # Indicates whether the call was successful.
        self.success = success
        self.task_id = task_id

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.migration_job_class is not None:
            result['MigrationJobClass'] = self.migration_job_class
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.migration_job_name is not None:
            result['MigrationJobName'] = self.migration_job_name
        if self.migration_job_status is not None:
            result['MigrationJobStatus'] = self.migration_job_status
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.migration_object is not None:
            result['MigrationObject'] = self.migration_object
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('MigrationJobClass') is not None:
            self.migration_job_class = m.get('MigrationJobClass')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('MigrationJobName') is not None:
            self.migration_job_name = m.get('MigrationJobName')
        if m.get('MigrationJobStatus') is not None:
            self.migration_job_status = m.get('MigrationJobStatus')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MigrationObject') is not None:
            self.migration_object = m.get('MigrationObject')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodySourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeMigrationJobStatusResponseBodyStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeMigrationJobStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMigrationJobStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMigrationJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeMigrationJobsRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
        # *   This parameter cannot be an empty string.
        # 
        # This parameter is required.
        self.key = key
        # The tag value. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag value.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
        # *   This parameter can be an empty string.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeMigrationJobsRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        migration_job_name: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        tag: List[DescribeMigrationJobsRequestTag] = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The name of the data migration task.
        # 
        # >  Fuzzy match is supported.
        self.migration_job_name = migration_job_name
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
        self.page_size = page_size
        # The ID of the region where the data migration instances reside. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The tag of the data migration instance, used as a filter. When this is not empty, only the instance tasks with this tag will be returned.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.migration_job_name is not None:
            result['MigrationJobName'] = self.migration_job_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('MigrationJobName') is not None:
            self.migration_job_name = m.get('MigrationJobName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeMigrationJobsRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data migration failed.
        self.error_message = error_message
        # The migration progress. Unit: %.
        self.percent = percent
        # The number of records that have been migrated during full data migration.
        self.progress = progress
        # The status of full data migration. Valid values:
        # 
        # *   **NotStarted**: Full data migration is not started.
        # *   **Migrating**: Full data migration is in progress.
        # *   **Failed**: Full data migration failed.
        # *   **Finished**: Full data migration is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization(TeaModel):
    def __init__(
        self,
        delay: str = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The latency of incremental data migration. Unit: seconds.
        self.delay = delay
        # The error message returned if incremental data migration failed.
        self.error_message = error_message
        # The progress of incremental data migration. Unit: %.
        self.percent = percent
        # The status of incremental data migration. Valid values:
        # 
        # *   **NotStarted**: Incremental data migration is not started.
        # *   **Migrating**: Incremental data migration is in progress.
        # *   **Failed**: Incremental data migration failed.
        # *   **Finished**: Incremental data migration is completed.
        # *   **Catched**: Incremental data migration is not delayed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        oracle_sid: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The name of the database to which the migration object in the destination instance belongs.
        self.database_name = database_name
        # The database type of the destination instance.
        self.engine_name = engine_name
        # The endpoint of the destination instance.
        self.ip = ip
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # This parameter is returned only if the database type of the destination instance is **Oracle**.
        self.oracle_sid = oracle_sid
        # The database service port of the destination instance.
        self.port = port
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode(TeaModel):
    def __init__(
        self,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        structure_initialization: bool = None,
    ):
        # Indicates whether full data migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_initialization = data_initialization
        # Indicates whether incremental data migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_synchronization = data_synchronization
        # Indicates whether schema migration is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.structure_initialization = structure_initialization

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList(TeaModel):
    def __init__(
        self,
        table: List[str] = None,
    ):
        self.table = table

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table is not None:
            result['Table'] = self.table
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Table') is not None:
            self.table = m.get('Table')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        table_list: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList = None,
        whole_database: str = None,
    ):
        # The name of the database to which the migration object in the source instance belongs.
        self.database_name = database_name
        # The names of the migrated tables.
        self.table_list = table_list
        # Indicates whether an entire database is migrated. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.whole_database = whole_database

    def validate(self):
        if self.table_list:
            self.table_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.table_list is not None:
            result['TableList'] = self.table_list.to_map()
        if self.whole_database is not None:
            result['WholeDatabase'] = self.whole_database
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('TableList') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList()
            self.table_list = temp_model.from_map(m['TableList'])
        if m.get('WholeDatabase') is not None:
            self.whole_database = m.get('WholeDatabase')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject(TeaModel):
    def __init__(
        self,
        synchronous_object: List[DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject] = None,
    ):
        self.synchronous_object = synchronous_object

    def validate(self):
        if self.synchronous_object:
            for k in self.synchronous_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SynchronousObject'] = []
        if self.synchronous_object is not None:
            for k in self.synchronous_object:
                result['SynchronousObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.synchronous_object = []
        if m.get('SynchronousObject') is not None:
            for k in m.get('SynchronousObject'):
                temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject()
                self.synchronous_object.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck(TeaModel):
    def __init__(
        self,
        percent: str = None,
        status: str = None,
    ):
        # The precheck progress. Unit: %.
        self.percent = percent
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        oracle_sid: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The name of the database to which the migration object in the source instance belongs.
        self.database_name = database_name
        # The database type of the source instance.
        self.engine_name = engine_name
        # The endpoint of the source instance.
        self.ip = ip
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # This parameter is returned only if the database type of the source instance is **Oracle**.
        self.oracle_sid = oracle_sid
        # The database service port of the source instance.
        self.port = port
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.oracle_sid is not None:
            result['OracleSID'] = self.oracle_sid
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('OracleSID') is not None:
            self.oracle_sid = m.get('OracleSID')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema migration failed.
        self.error_message = error_message
        # The progress of schema migration. Unit: %.
        self.percent = percent
        # The number of tables whose schemas have been migrated.
        self.progress = progress
        # The status of schema migration. Valid values:
        # 
        # *   **NotStarted**: Schema migration is not started.
        # *   **Migrating**: Schema migration is in progress.
        # *   **Failed**: Schema migration failed.
        # *   **Finished**: Schema migration is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key.
        self.key = key
        # The tag value that corresponds to the tag key.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags(TeaModel):
    def __init__(
        self,
        tag: List[DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob(TeaModel):
    def __init__(
        self,
        data_initialization: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization = None,
        data_synchronization: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization = None,
        destination_endpoint: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint = None,
        instance_create_time: str = None,
        job_create_time: str = None,
        migration_job_class: str = None,
        migration_job_id: str = None,
        migration_job_name: str = None,
        migration_job_status: str = None,
        migration_mode: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode = None,
        migration_object: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject = None,
        pay_type: str = None,
        precheck: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck = None,
        source_endpoint: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint = None,
        structure_initialization: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization = None,
        tags: DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags = None,
    ):
        # The details of full data migration.
        self.data_initialization = data_initialization
        # The details of incremental data migration.
        self.data_synchronization = data_synchronization
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The time when the data migration instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.instance_create_time = instance_create_time
        # The time when the data migration task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.job_create_time = job_create_time
        # The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html).
        self.migration_job_class = migration_job_class
        # The ID of the data migration instance.
        self.migration_job_id = migration_job_id
        # The name of the data migration task.
        self.migration_job_name = migration_job_name
        # The status of the data migration task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Migrating**: The task is migrating data.
        # *   **Suspending**: The task is paused.
        # *   **MigrationFailed**: The task failed to migrate data.
        # *   **Finished**: The task is completed.
        self.migration_job_status = migration_job_status
        # The migration types.
        self.migration_mode = migration_mode
        # The objects that are migrated by the task.
        self.migration_object = migration_object
        # The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).
        self.pay_type = pay_type
        # The precheck details.
        self.precheck = precheck
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The details of schema migration.
        self.structure_initialization = structure_initialization
        # The collection of tags.
        self.tags = tags

    def validate(self):
        if self.data_initialization:
            self.data_initialization.validate()
        if self.data_synchronization:
            self.data_synchronization.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.migration_mode:
            self.migration_mode.validate()
        if self.migration_object:
            self.migration_object.validate()
        if self.precheck:
            self.precheck.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization:
            self.structure_initialization.validate()
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization.to_map()
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization.to_map()
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.instance_create_time is not None:
            result['InstanceCreateTime'] = self.instance_create_time
        if self.job_create_time is not None:
            result['JobCreateTime'] = self.job_create_time
        if self.migration_job_class is not None:
            result['MigrationJobClass'] = self.migration_job_class
        if self.migration_job_id is not None:
            result['MigrationJobID'] = self.migration_job_id
        if self.migration_job_name is not None:
            result['MigrationJobName'] = self.migration_job_name
        if self.migration_job_status is not None:
            result['MigrationJobStatus'] = self.migration_job_status
        if self.migration_mode is not None:
            result['MigrationMode'] = self.migration_mode.to_map()
        if self.migration_object is not None:
            result['MigrationObject'] = self.migration_object.to_map()
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.precheck is not None:
            result['Precheck'] = self.precheck.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization.to_map()
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitialization') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization()
            self.data_initialization = temp_model.from_map(m['DataInitialization'])
        if m.get('DataSynchronization') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization()
            self.data_synchronization = temp_model.from_map(m['DataSynchronization'])
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('InstanceCreateTime') is not None:
            self.instance_create_time = m.get('InstanceCreateTime')
        if m.get('JobCreateTime') is not None:
            self.job_create_time = m.get('JobCreateTime')
        if m.get('MigrationJobClass') is not None:
            self.migration_job_class = m.get('MigrationJobClass')
        if m.get('MigrationJobID') is not None:
            self.migration_job_id = m.get('MigrationJobID')
        if m.get('MigrationJobName') is not None:
            self.migration_job_name = m.get('MigrationJobName')
        if m.get('MigrationJobStatus') is not None:
            self.migration_job_status = m.get('MigrationJobStatus')
        if m.get('MigrationMode') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode()
            self.migration_mode = temp_model.from_map(m['MigrationMode'])
        if m.get('MigrationObject') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject()
            self.migration_object = temp_model.from_map(m['MigrationObject'])
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Precheck') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck()
            self.precheck = temp_model.from_map(m['Precheck'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('StructureInitialization') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization()
            self.structure_initialization = temp_model.from_map(m['StructureInitialization'])
        if m.get('Tags') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags()
            self.tags = temp_model.from_map(m['Tags'])
        return self


class DescribeMigrationJobsResponseBodyMigrationJobs(TeaModel):
    def __init__(
        self,
        migration_job: List[DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob] = None,
    ):
        self.migration_job = migration_job

    def validate(self):
        if self.migration_job:
            for k in self.migration_job:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MigrationJob'] = []
        if self.migration_job is not None:
            for k in self.migration_job:
                result['MigrationJob'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.migration_job = []
        if m.get('MigrationJob') is not None:
            for k in m.get('MigrationJob'):
                temp_model = DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob()
                self.migration_job.append(temp_model.from_map(k))
        return self


class DescribeMigrationJobsResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        migration_jobs: DescribeMigrationJobsResponseBodyMigrationJobs = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The list of data migration instances and the details of each instance.
        self.migration_jobs = migration_jobs
        # The page number of the returned page.
        self.page_number = page_number
        # The maximum number of entries that can be displayed on the current page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The total number of data migration instances that belong to your Alibaba Cloud account.
        self.total_record_count = total_record_count

    def validate(self):
        if self.migration_jobs:
            self.migration_jobs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.migration_jobs is not None:
            result['MigrationJobs'] = self.migration_jobs.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('MigrationJobs') is not None:
            temp_model = DescribeMigrationJobsResponseBodyMigrationJobs()
            self.migration_jobs = temp_model.from_map(m['MigrationJobs'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeMigrationJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeMigrationJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeMigrationJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePreCheckCreateGadOrderResultRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        task_id: str = None,
    ):
        self.instance_id = instance_id
        self.owner_id = owner_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItemsPreCheckItems(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        status: str = None,
    ):
        self.code = code
        self.message = message
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItems(TeaModel):
    def __init__(
        self,
        pre_check_items: List[DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItemsPreCheckItems] = None,
    ):
        self.pre_check_items = pre_check_items

    def validate(self):
        if self.pre_check_items:
            for k in self.pre_check_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['PreCheckItems'] = []
        if self.pre_check_items is not None:
            for k in self.pre_check_items:
                result['PreCheckItems'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.pre_check_items = []
        if m.get('PreCheckItems') is not None:
            for k in m.get('PreCheckItems'):
                temp_model = DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItemsPreCheckItems()
                self.pre_check_items.append(temp_model.from_map(k))
        return self


class DescribePreCheckCreateGadOrderResultResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        instance_id: str = None,
        pre_check_items: DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItems = None,
        pre_check_result: bool = None,
        region_id: str = None,
        request_id: str = None,
        success: str = None,
        task_id: str = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.pre_check_items = pre_check_items
        self.pre_check_result = pre_check_result
        self.region_id = region_id
        self.request_id = request_id
        self.success = success
        self.task_id = task_id

    def validate(self):
        if self.pre_check_items:
            self.pre_check_items.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.pre_check_items is not None:
            result['PreCheckItems'] = self.pre_check_items.to_map()
        if self.pre_check_result is not None:
            result['PreCheckResult'] = self.pre_check_result
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PreCheckItems') is not None:
            temp_model = DescribePreCheckCreateGadOrderResultResponseBodyPreCheckItems()
            self.pre_check_items = temp_model.from_map(m['PreCheckItems'])
        if m.get('PreCheckResult') is not None:
            self.pre_check_result = m.get('PreCheckResult')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribePreCheckCreateGadOrderResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePreCheckCreateGadOrderResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePreCheckCreateGadOrderResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribePreCheckStatusRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        job_code: str = None,
        name: str = None,
        page_no: str = None,
        page_size: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        struct_phase: str = None,
        struct_type: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The task code that specifies the type of the DTS subtask. Valid values:
        # 
        # *   **01**: precheck.
        # *   **02**: schema migration or initial schema synchronization.
        # *   **03**: full data migration or initial full data synchronization.
        # *   **04**: incremental data migration or synchronization.
        # 
        # This parameter is required.
        self.job_code = job_code
        # The filter item used to filter tables in fuzzy match.
        self.name = name
        # The page number. Pages start from page 1. Default value: **1**.
        self.page_no = page_no
        # The number of entries per page. Default value: **20**.
        self.page_size = page_size
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The filter item used to filter tables, views, and functions during schema migration.
        self.struct_phase = struct_phase
        # The type of schema definition. Valid values:
        # 
        # *   **before**: schema migration or initial schema synchronization.
        # *   **after**: DDL operations performed during incremental data migration or synchronization.
        self.struct_type = struct_type
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.job_code is not None:
            result['JobCode'] = self.job_code
        if self.name is not None:
            result['Name'] = self.name
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.struct_phase is not None:
            result['StructPhase'] = self.struct_phase
        if self.struct_type is not None:
            result['StructType'] = self.struct_type
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('JobCode') is not None:
            self.job_code = m.get('JobCode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructPhase') is not None:
            self.struct_phase = m.get('StructPhase')
        if m.get('StructType') is not None:
            self.struct_type = m.get('StructType')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs(TeaModel):
    def __init__(
        self,
        err_data: str = None,
        err_msg: str = None,
        err_type: str = None,
        log_level: str = None,
    ):
        # Error message
        self.err_data = err_data
        # Error message from DTS when a specific project encounters an error.
        self.err_msg = err_msg
        # Error type.
        self.err_type = err_type
        # The level of the log.
        self.log_level = log_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_data is not None:
            result['ErrData'] = self.err_data
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.err_type is not None:
            result['ErrType'] = self.err_type
        if self.log_level is not None:
            result['LogLevel'] = self.log_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrData') is not None:
            self.err_data = m.get('ErrData')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('ErrType') is not None:
            self.err_type = m.get('ErrType')
        if m.get('LogLevel') is not None:
            self.log_level = m.get('LogLevel')
        return self


class DescribePreCheckStatusResponseBodyAnalysisJobProgress(TeaModel):
    def __init__(
        self,
        boot_time: str = None,
        can_skip: bool = None,
        current: str = None,
        ddl_sql: str = None,
        delay_seconds: int = None,
        dest_schema: str = None,
        diff_row: int = None,
        err_detail: str = None,
        err_msg: str = None,
        finish_time: str = None,
        id: str = None,
        ignore_flag: str = None,
        item: str = None,
        job_id: str = None,
        logs: List[DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs] = None,
        names: str = None,
        order_num: int = None,
        parent_obj: str = None,
        repair_method: str = None,
        skip: bool = None,
        source_schema: str = None,
        state: str = None,
        sub: str = None,
        target_names: str = None,
        total: int = None,
    ):
        # The specific project start time, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).
        self.boot_time = boot_time
        # Whether to support skipping this sub-item.
        self.can_skip = can_skip
        # The number of currently running subtasks.
        self.current = current
        # The DDL operation to be executed.
        self.ddl_sql = ddl_sql
        # Task delay time
        self.delay_seconds = delay_seconds
        # Name of the database to which the migration objects in the target instance belong.
        self.dest_schema = dest_schema
        # This parameter will be deprecated.
        self.diff_row = diff_row
        # Error details when the project encounters an error.
        self.err_detail = err_detail
        # Specific error message.
        self.err_msg = err_msg
        # The end time of the evaluation task, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).
        self.finish_time = finish_time
        # The ID of this evaluation item in the database.
        self.id = id
        # Whether to directly ignore this specific item and move to the next one. Return values:
        # - **N**: No. - **Y**: Yes.
        self.ignore_flag = ignore_flag
        # Name of the evaluation item
        self.item = item
        # The ID of the evaluation task.
        self.job_id = job_id
        # Sub-assessment item.
        self.logs = logs
        # Name of the evaluation item
        self.names = names
        # The number of the evaluation item.
        self.order_num = order_num
        # This parameter will be deprecated.
        self.parent_obj = parent_obj
        # Remediation method for the evaluation item.
        self.repair_method = repair_method
        # If this evaluation item fails, whether you set to skip this item. Return values: * **true**: Yes * **false**: No
        self.skip = skip
        # Name of the database to which the migration objects in the source instance belong.
        self.source_schema = source_schema
        # The result of the evaluation, with return values being: - **Failed**: Failure. - **Success**: Success.
        self.state = state
        # Progress of sub-projects under a specific project. > If it returns <b>[]</b>, it indicates there are no sub-projects.
        self.sub = sub
        # Name of the target object
        self.target_names = target_names
        # The total number of specific items in the sub-task.
        self.total = total

    def validate(self):
        if self.logs:
            for k in self.logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.can_skip is not None:
            result['CanSkip'] = self.can_skip
        if self.current is not None:
            result['Current'] = self.current
        if self.ddl_sql is not None:
            result['DdlSql'] = self.ddl_sql
        if self.delay_seconds is not None:
            result['DelaySeconds'] = self.delay_seconds
        if self.dest_schema is not None:
            result['DestSchema'] = self.dest_schema
        if self.diff_row is not None:
            result['DiffRow'] = self.diff_row
        if self.err_detail is not None:
            result['ErrDetail'] = self.err_detail
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.id is not None:
            result['Id'] = self.id
        if self.ignore_flag is not None:
            result['IgnoreFlag'] = self.ignore_flag
        if self.item is not None:
            result['Item'] = self.item
        if self.job_id is not None:
            result['JobId'] = self.job_id
        result['Logs'] = []
        if self.logs is not None:
            for k in self.logs:
                result['Logs'].append(k.to_map() if k else None)
        if self.names is not None:
            result['Names'] = self.names
        if self.order_num is not None:
            result['OrderNum'] = self.order_num
        if self.parent_obj is not None:
            result['ParentObj'] = self.parent_obj
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        if self.skip is not None:
            result['Skip'] = self.skip
        if self.source_schema is not None:
            result['SourceSchema'] = self.source_schema
        if self.state is not None:
            result['State'] = self.state
        if self.sub is not None:
            result['Sub'] = self.sub
        if self.target_names is not None:
            result['TargetNames'] = self.target_names
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('CanSkip') is not None:
            self.can_skip = m.get('CanSkip')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('DdlSql') is not None:
            self.ddl_sql = m.get('DdlSql')
        if m.get('DelaySeconds') is not None:
            self.delay_seconds = m.get('DelaySeconds')
        if m.get('DestSchema') is not None:
            self.dest_schema = m.get('DestSchema')
        if m.get('DiffRow') is not None:
            self.diff_row = m.get('DiffRow')
        if m.get('ErrDetail') is not None:
            self.err_detail = m.get('ErrDetail')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IgnoreFlag') is not None:
            self.ignore_flag = m.get('IgnoreFlag')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        self.logs = []
        if m.get('Logs') is not None:
            for k in m.get('Logs'):
                temp_model = DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs()
                self.logs.append(temp_model.from_map(k))
        if m.get('Names') is not None:
            self.names = m.get('Names')
        if m.get('OrderNum') is not None:
            self.order_num = m.get('OrderNum')
        if m.get('ParentObj') is not None:
            self.parent_obj = m.get('ParentObj')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        if m.get('Skip') is not None:
            self.skip = m.get('Skip')
        if m.get('SourceSchema') is not None:
            self.source_schema = m.get('SourceSchema')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Sub') is not None:
            self.sub = m.get('Sub')
        if m.get('TargetNames') is not None:
            self.target_names = m.get('TargetNames')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs(TeaModel):
    def __init__(
        self,
        err_data: str = None,
        err_msg: str = None,
        err_type: str = None,
        log_level: str = None,
    ):
        # Error record.
        self.err_data = err_data
        # Specific error message.
        self.err_msg = err_msg
        # Type of error.
        self.err_type = err_type
        # The level of the log.
        self.log_level = log_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_data is not None:
            result['ErrData'] = self.err_data
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.err_type is not None:
            result['ErrType'] = self.err_type
        if self.log_level is not None:
            result['LogLevel'] = self.log_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrData') is not None:
            self.err_data = m.get('ErrData')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('ErrType') is not None:
            self.err_type = m.get('ErrType')
        if m.get('LogLevel') is not None:
            self.log_level = m.get('LogLevel')
        return self


class DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress(TeaModel):
    def __init__(
        self,
        boot_time: str = None,
        can_skip: bool = None,
        current: str = None,
        ddl_sql: str = None,
        delay_seconds: int = None,
        dest_schema: str = None,
        diff_row: int = None,
        err_detail: str = None,
        err_msg: str = None,
        finish_time: str = None,
        id: str = None,
        ignore_flag: str = None,
        item: str = None,
        job_id: str = None,
        logs: List[DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs] = None,
        names: str = None,
        order_num: int = None,
        parent_obj: str = None,
        repair_method: str = None,
        skip: bool = None,
        source_schema: str = None,
        state: str = None,
        sub: str = None,
        target_names: str = None,
        total: int = None,
    ):
        # The specific project start time, formatted as <i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z (UTC time).
        self.boot_time = boot_time
        # Whether DTS supports skipping a project after it fails. Return values: * **true**: Yes * **false**: No
        self.can_skip = can_skip
        # The number of currently running tasks.
        self.current = current
        # The DDL operation to be executed.
        self.ddl_sql = ddl_sql
        # Task delay time
        self.delay_seconds = delay_seconds
        # Name of the database to which the migration objects in the target instance belong.
        self.dest_schema = dest_schema
        # This parameter will be deprecated.
        self.diff_row = diff_row
        # Details of the error when a specific project fails.
        self.err_detail = err_detail
        # Error message prompt when a specific project encounters an error.
        self.err_msg = err_msg
        # Task completion time, formatted as yyyy-MM-ddTHH:mm:ssZ (UTC time).
        self.finish_time = finish_time
        # The ID of the record in the metadata database.
        self.id = id
        # Whether to directly ignore this specific item and move to the next one. Return values:
        # - **N**: No. - **Y**: Yes.
        self.ignore_flag = ignore_flag
        # Specific project name.
        self.item = item
        # Task ID.
        self.job_id = job_id
        # Error execution log information.
        self.logs = logs
        # Specific project name.
        self.names = names
        # Project number.
        self.order_num = order_num
        # This parameter will be deprecated.
        self.parent_obj = parent_obj
        # The corresponding remediation method when the pre-check fails.
        self.repair_method = repair_method
        # After this specific item fails, do you set to skip this item. Return values: * **true**: Yes * **false**: No
        self.skip = skip
        # Name of the database to which the migration objects in the source instance belong.
        self.source_schema = source_schema
        # Check result, the return value is: - **Failed**: Failure. - **Success**: Completed.
        self.state = state
        # Progress of sub-projects under a specific project. > If it returns <b>[]</b>, it indicates there are no sub-projects.
        self.sub = sub
        # Name of the target object
        self.target_names = target_names
        # The total number of projects.
        self.total = total

    def validate(self):
        if self.logs:
            for k in self.logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.can_skip is not None:
            result['CanSkip'] = self.can_skip
        if self.current is not None:
            result['Current'] = self.current
        if self.ddl_sql is not None:
            result['DdlSql'] = self.ddl_sql
        if self.delay_seconds is not None:
            result['DelaySeconds'] = self.delay_seconds
        if self.dest_schema is not None:
            result['DestSchema'] = self.dest_schema
        if self.diff_row is not None:
            result['DiffRow'] = self.diff_row
        if self.err_detail is not None:
            result['ErrDetail'] = self.err_detail
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.id is not None:
            result['Id'] = self.id
        if self.ignore_flag is not None:
            result['IgnoreFlag'] = self.ignore_flag
        if self.item is not None:
            result['Item'] = self.item
        if self.job_id is not None:
            result['JobId'] = self.job_id
        result['Logs'] = []
        if self.logs is not None:
            for k in self.logs:
                result['Logs'].append(k.to_map() if k else None)
        if self.names is not None:
            result['Names'] = self.names
        if self.order_num is not None:
            result['OrderNum'] = self.order_num
        if self.parent_obj is not None:
            result['ParentObj'] = self.parent_obj
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        if self.skip is not None:
            result['Skip'] = self.skip
        if self.source_schema is not None:
            result['SourceSchema'] = self.source_schema
        if self.state is not None:
            result['State'] = self.state
        if self.sub is not None:
            result['Sub'] = self.sub
        if self.target_names is not None:
            result['TargetNames'] = self.target_names
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('CanSkip') is not None:
            self.can_skip = m.get('CanSkip')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('DdlSql') is not None:
            self.ddl_sql = m.get('DdlSql')
        if m.get('DelaySeconds') is not None:
            self.delay_seconds = m.get('DelaySeconds')
        if m.get('DestSchema') is not None:
            self.dest_schema = m.get('DestSchema')
        if m.get('DiffRow') is not None:
            self.diff_row = m.get('DiffRow')
        if m.get('ErrDetail') is not None:
            self.err_detail = m.get('ErrDetail')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IgnoreFlag') is not None:
            self.ignore_flag = m.get('IgnoreFlag')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        self.logs = []
        if m.get('Logs') is not None:
            for k in m.get('Logs'):
                temp_model = DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs()
                self.logs.append(temp_model.from_map(k))
        if m.get('Names') is not None:
            self.names = m.get('Names')
        if m.get('OrderNum') is not None:
            self.order_num = m.get('OrderNum')
        if m.get('ParentObj') is not None:
            self.parent_obj = m.get('ParentObj')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        if m.get('Skip') is not None:
            self.skip = m.get('Skip')
        if m.get('SourceSchema') is not None:
            self.source_schema = m.get('SourceSchema')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Sub') is not None:
            self.sub = m.get('Sub')
        if m.get('TargetNames') is not None:
            self.target_names = m.get('TargetNames')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBodyFullNetCheckJobStatus(TeaModel):
    def __init__(
        self,
        code: str = None,
        dest_region: str = None,
        dest_region_cidr: str = None,
        destination_endpoint_type: str = None,
        error_item: int = None,
        host_region: str = None,
        job_id: str = None,
        job_name: str = None,
        job_progress: List[DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress] = None,
        source_endpoint_type: str = None,
        src_region: str = None,
        src_region_cidr: str = None,
        state: str = None,
        total: int = None,
    ):
        # Task code, **01** represents pre-check.
        self.code = code
        # ID of the region to which the target network segment belongs.
        self.dest_region = dest_region
        # Destination network segment.
        self.dest_region_cidr = dest_region_cidr
        # The access method of the target instance, with return values as follows: - **ALIYUN**: Access method is **cloud instance**. - **OTHER**: Access method is **public IP**. - **ECS**: Access method is **ECS self-built database**. - **EXPRESS**: Access method is **Express Connect / VPN Gateway / Smart Gateway**. - **CEN**: Access method is **Cloud Enterprise Network (CEN)**. - **DG**: Access method is **Database Gateway (DG)**.
        self.destination_endpoint_type = destination_endpoint_type
        # Number of pre-check failed items
        self.error_item = error_item
        # The region ID of the instance\\"s running node.
        self.host_region = host_region
        # Task ID.
        self.job_id = job_id
        # Task name.
        self.job_name = job_name
        # A list of specific items for the task and their execution progress.
        self.job_progress = job_progress
        # The access method of the source instance, with return values as follows: - **ALIYUN**: Access method is **cloud instance**. - **OTHER**: Access method is **public IP**. - **ECS**: Access method is **ECS self-built database**. - **EXPRESS**: Access method is **dedicated line/VPN gateway/smart gateway**. - **CEN**: Access method is **Cloud Enterprise Network CEN**. - **DG**: Access method is **Database Gateway DG**.
        self.source_endpoint_type = source_endpoint_type
        # ID of the region to which the source network segment belongs.
        self.src_region = src_region
        # Source network segment.
        self.src_region_cidr = src_region_cidr
        # Check result, the return value is: - **Failed**: Failure. - **Success**: Completed.
        self.state = state
        # Total number of items in the project.
        self.total = total

    def validate(self):
        if self.job_progress:
            for k in self.job_progress:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dest_region is not None:
            result['DestRegion'] = self.dest_region
        if self.dest_region_cidr is not None:
            result['DestRegionCidr'] = self.dest_region_cidr
        if self.destination_endpoint_type is not None:
            result['DestinationEndpointType'] = self.destination_endpoint_type
        if self.error_item is not None:
            result['ErrorItem'] = self.error_item
        if self.host_region is not None:
            result['HostRegion'] = self.host_region
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_name is not None:
            result['JobName'] = self.job_name
        result['JobProgress'] = []
        if self.job_progress is not None:
            for k in self.job_progress:
                result['JobProgress'].append(k.to_map() if k else None)
        if self.source_endpoint_type is not None:
            result['SourceEndpointType'] = self.source_endpoint_type
        if self.src_region is not None:
            result['SrcRegion'] = self.src_region
        if self.src_region_cidr is not None:
            result['SrcRegionCidr'] = self.src_region_cidr
        if self.state is not None:
            result['State'] = self.state
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DestRegion') is not None:
            self.dest_region = m.get('DestRegion')
        if m.get('DestRegionCidr') is not None:
            self.dest_region_cidr = m.get('DestRegionCidr')
        if m.get('DestinationEndpointType') is not None:
            self.destination_endpoint_type = m.get('DestinationEndpointType')
        if m.get('ErrorItem') is not None:
            self.error_item = m.get('ErrorItem')
        if m.get('HostRegion') is not None:
            self.host_region = m.get('HostRegion')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        self.job_progress = []
        if m.get('JobProgress') is not None:
            for k in m.get('JobProgress'):
                temp_model = DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress()
                self.job_progress.append(temp_model.from_map(k))
        if m.get('SourceEndpointType') is not None:
            self.source_endpoint_type = m.get('SourceEndpointType')
        if m.get('SrcRegion') is not None:
            self.src_region = m.get('SrcRegion')
        if m.get('SrcRegionCidr') is not None:
            self.src_region_cidr = m.get('SrcRegionCidr')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBodyJobProgressLogs(TeaModel):
    def __init__(
        self,
        err_data: str = None,
        err_msg: str = None,
        err_type: str = None,
        log_level: str = None,
    ):
        # The error message.
        self.err_data = err_data
        # The error message that is returned when an error occurs on the subtask.
        self.err_msg = err_msg
        # The error type.
        self.err_type = err_type
        # The level of logs.
        self.log_level = log_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_data is not None:
            result['ErrData'] = self.err_data
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.err_type is not None:
            result['ErrType'] = self.err_type
        if self.log_level is not None:
            result['LogLevel'] = self.log_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrData') is not None:
            self.err_data = m.get('ErrData')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('ErrType') is not None:
            self.err_type = m.get('ErrType')
        if m.get('LogLevel') is not None:
            self.log_level = m.get('LogLevel')
        return self


class DescribePreCheckStatusResponseBodyJobProgress(TeaModel):
    def __init__(
        self,
        boot_time: str = None,
        can_skip: bool = None,
        current: str = None,
        ddl_sql: str = None,
        delay_seconds: int = None,
        dest_schema: str = None,
        diff_row: int = None,
        err_detail: str = None,
        err_msg: str = None,
        finish_time: str = None,
        id: str = None,
        ignore_flag: str = None,
        item: str = None,
        job_id: str = None,
        logs: List[DescribePreCheckStatusResponseBodyJobProgressLogs] = None,
        names: str = None,
        order_num: int = None,
        parent_obj: str = None,
        repair_method: str = None,
        skip: bool = None,
        source_schema: str = None,
        state: str = None,
        sub: str = None,
        target_names: str = None,
        total: int = None,
    ):
        # The time when the subtask was started. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
        self.boot_time = boot_time
        # Indicates whether the subtask can be ignored if it fails.
        self.can_skip = can_skip
        # The number of the subtasks that are running.
        self.current = current
        # The DDL statements.
        self.ddl_sql = ddl_sql
        # The latency of incremental data migration or synchronization.
        # 
        # > If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.
        self.delay_seconds = delay_seconds
        # The name of the database to which the object in the destination instance belongs.
        self.dest_schema = dest_schema
        # This parameter will be removed in the future.
        self.diff_row = diff_row
        # The error details of the subtask failure.
        self.err_detail = err_detail
        # The error message of the subtask failure.
        self.err_msg = err_msg
        # The time when the subtask was complete. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
        self.finish_time = finish_time
        # The ID of the entry in the metadatabase.
        self.id = id
        # Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:
        # 
        # *   **N**: no.
        # *   **Y**: yes.
        self.ignore_flag = ignore_flag
        # The shortened name of the subtask.
        self.item = item
        # The subtask ID.
        self.job_id = job_id
        # The logs of subtask failures.
        self.logs = logs
        # The name of the subtask.
        self.names = names
        # The serial number of the subtask.
        self.order_num = order_num
        # This parameter will be removed in the future.
        self.parent_obj = parent_obj
        # The method to fix the subtask failure.
        self.repair_method = repair_method
        # Indicates whether the subtask is ignored if it fails. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.skip = skip
        # The name of the database to which the object in the source instance belongs.
        self.source_schema = source_schema
        # The status of the subtask. Valid values:
        # 
        # *   **NotStarted**: The subtask is not started.
        # *   **Checking**: The subtask is being checked.
        # *   **Migrating**: The subtask is in progress. Data is being migrated.
        # *   **Failed**: The subtask failed.
        # *   **Warning**: The subtask encounters an exception.
        # *   **Success**: The subtask is complete.
        self.state = state
        # The sub-item progress of the subtask.
        # 
        # > If \\*\\*[]\\*\\* is returned, the subtask has no sub-items.
        self.sub = sub
        # The names of the objects that are migrated or synchronized.
        self.target_names = target_names
        # The total number of sub-items of the subtask.
        self.total = total

    def validate(self):
        if self.logs:
            for k in self.logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.can_skip is not None:
            result['CanSkip'] = self.can_skip
        if self.current is not None:
            result['Current'] = self.current
        if self.ddl_sql is not None:
            result['DdlSql'] = self.ddl_sql
        if self.delay_seconds is not None:
            result['DelaySeconds'] = self.delay_seconds
        if self.dest_schema is not None:
            result['DestSchema'] = self.dest_schema
        if self.diff_row is not None:
            result['DiffRow'] = self.diff_row
        if self.err_detail is not None:
            result['ErrDetail'] = self.err_detail
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.id is not None:
            result['Id'] = self.id
        if self.ignore_flag is not None:
            result['IgnoreFlag'] = self.ignore_flag
        if self.item is not None:
            result['Item'] = self.item
        if self.job_id is not None:
            result['JobId'] = self.job_id
        result['Logs'] = []
        if self.logs is not None:
            for k in self.logs:
                result['Logs'].append(k.to_map() if k else None)
        if self.names is not None:
            result['Names'] = self.names
        if self.order_num is not None:
            result['OrderNum'] = self.order_num
        if self.parent_obj is not None:
            result['ParentObj'] = self.parent_obj
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        if self.skip is not None:
            result['Skip'] = self.skip
        if self.source_schema is not None:
            result['SourceSchema'] = self.source_schema
        if self.state is not None:
            result['State'] = self.state
        if self.sub is not None:
            result['Sub'] = self.sub
        if self.target_names is not None:
            result['TargetNames'] = self.target_names
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('CanSkip') is not None:
            self.can_skip = m.get('CanSkip')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('DdlSql') is not None:
            self.ddl_sql = m.get('DdlSql')
        if m.get('DelaySeconds') is not None:
            self.delay_seconds = m.get('DelaySeconds')
        if m.get('DestSchema') is not None:
            self.dest_schema = m.get('DestSchema')
        if m.get('DiffRow') is not None:
            self.diff_row = m.get('DiffRow')
        if m.get('ErrDetail') is not None:
            self.err_detail = m.get('ErrDetail')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IgnoreFlag') is not None:
            self.ignore_flag = m.get('IgnoreFlag')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        self.logs = []
        if m.get('Logs') is not None:
            for k in m.get('Logs'):
                temp_model = DescribePreCheckStatusResponseBodyJobProgressLogs()
                self.logs.append(temp_model.from_map(k))
        if m.get('Names') is not None:
            self.names = m.get('Names')
        if m.get('OrderNum') is not None:
            self.order_num = m.get('OrderNum')
        if m.get('ParentObj') is not None:
            self.parent_obj = m.get('ParentObj')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        if m.get('Skip') is not None:
            self.skip = m.get('Skip')
        if m.get('SourceSchema') is not None:
            self.source_schema = m.get('SourceSchema')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Sub') is not None:
            self.sub = m.get('Sub')
        if m.get('TargetNames') is not None:
            self.target_names = m.get('TargetNames')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis(TeaModel):
    def __init__(
        self,
        cn_doc_url: str = None,
        code: str = None,
        endpoint_type: str = None,
        international_doc_url: str = None,
        result: str = None,
    ):
        # Document address for China region.
        self.cn_doc_url = cn_doc_url
        # Diagnostic code.
        self.code = code
        # Access point, the return values are: - **source**: source end. - **destination**: destination end. - **unknown**: unknown.
        self.endpoint_type = endpoint_type
        # Overseas region document address.
        self.international_doc_url = international_doc_url
        # Reserved field for diagnostic results, default is empty.
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cn_doc_url is not None:
            result['CnDocUrl'] = self.cn_doc_url
        if self.code is not None:
            result['Code'] = self.code
        if self.endpoint_type is not None:
            result['EndpointType'] = self.endpoint_type
        if self.international_doc_url is not None:
            result['InternationalDocUrl'] = self.international_doc_url
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CnDocUrl') is not None:
            self.cn_doc_url = m.get('CnDocUrl')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('EndpointType') is not None:
            self.endpoint_type = m.get('EndpointType')
        if m.get('InternationalDocUrl') is not None:
            self.international_doc_url = m.get('InternationalDocUrl')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DescribePreCheckStatusResponseBodyNetworkDiagnosisResult(TeaModel):
    def __init__(
        self,
        diagnosis: List[DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis] = None,
        model_version: str = None,
    ):
        # Network diagnostic report
        self.diagnosis = diagnosis
        # Diagnose model version.
        self.model_version = model_version

    def validate(self):
        if self.diagnosis:
            for k in self.diagnosis:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Diagnosis'] = []
        if self.diagnosis is not None:
            for k in self.diagnosis:
                result['Diagnosis'].append(k.to_map() if k else None)
        if self.model_version is not None:
            result['ModelVersion'] = self.model_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.diagnosis = []
        if m.get('Diagnosis') is not None:
            for k in m.get('Diagnosis'):
                temp_model = DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis()
                self.diagnosis.append(temp_model.from_map(k))
        if m.get('ModelVersion') is not None:
            self.model_version = m.get('ModelVersion')
        return self


class DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs(TeaModel):
    def __init__(
        self,
        err_data: str = None,
        err_msg: str = None,
        err_type: str = None,
        log_level: str = None,
    ):
        # The record of errors.
        self.err_data = err_data
        # The error message.
        self.err_msg = err_msg
        # The error type.
        self.err_type = err_type
        # The level of logs.
        self.log_level = log_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_data is not None:
            result['ErrData'] = self.err_data
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.err_type is not None:
            result['ErrType'] = self.err_type
        if self.log_level is not None:
            result['LogLevel'] = self.log_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrData') is not None:
            self.err_data = m.get('ErrData')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('ErrType') is not None:
            self.err_type = m.get('ErrType')
        if m.get('LogLevel') is not None:
            self.log_level = m.get('LogLevel')
        return self


class DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress(TeaModel):
    def __init__(
        self,
        boot_time: str = None,
        can_skip: bool = None,
        current: str = None,
        ddl_sql: str = None,
        delay_seconds: int = None,
        dest_schema: str = None,
        diff_row: int = None,
        err_detail: str = None,
        err_msg: str = None,
        finish_time: str = None,
        id: str = None,
        ignore_flag: str = None,
        item: str = None,
        job_id: str = None,
        logs: List[DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs] = None,
        names: str = None,
        order_num: int = None,
        parent_obj: str = None,
        repair_method: str = None,
        skip: bool = None,
        source_schema: str = None,
        state: str = None,
        sub: str = None,
        target_names: str = None,
        total: int = None,
    ):
        # The time when the subtask was started. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.boot_time = boot_time
        # Indicates whether the subtask can be ignored if it fails. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.can_skip = can_skip
        # The number of the subtasks that are running.
        self.current = current
        # The DDL statements.
        self.ddl_sql = ddl_sql
        # The latency of incremental data migration or synchronization.
        self.delay_seconds = delay_seconds
        # The name of the database to which the object in the destination instance belongs.
        self.dest_schema = dest_schema
        # This parameter will be removed in the future.
        self.diff_row = diff_row
        # The error details of the subtask failure.
        self.err_detail = err_detail
        # The error message of the subtask failure.
        self.err_msg = err_msg
        # The time when the subtask was complete. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.finish_time = finish_time
        # The ID of the entry in the metadatabase.
        self.id = id
        # Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:
        # 
        # *   **N**: no.
        # *   **Y**: yes.
        self.ignore_flag = ignore_flag
        # The name of the subtask.
        self.item = item
        # The subtask ID.
        self.job_id = job_id
        # The operations logs of errors.
        self.logs = logs
        # The name of the subtask.
        self.names = names
        # The serial number of the subtask.
        self.order_num = order_num
        # This parameter will be removed in the future.
        self.parent_obj = parent_obj
        # The method to fix a precheck failure.
        self.repair_method = repair_method
        # Indicates whether the subtask was ignored. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.skip = skip
        # The name of the database to which the object in the source instance belongs.
        self.source_schema = source_schema
        # The status of the subtask. Valid values:
        # 
        # *   **NotStarted**: The subtask is not started.
        # *   **Suspending**: The subtask is paused.
        # *   **Checking**: The subtask is being checked.
        # *   **Migrating**: The subtask is in progress. Data is being migrated.
        # *   **Failed**: The subtask failed.
        # *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
        # *   **Finished**: The subtask is complete.
        self.state = state
        # The sub-item progress of the subtask.
        # 
        # > If \\*\\*[]\\*\\* is returned, the subtask has no sub-item.
        self.sub = sub
        # The names of the objects that are migrated or synchronized.
        self.target_names = target_names
        # The total number of subtasks.
        self.total = total

    def validate(self):
        if self.logs:
            for k in self.logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_time is not None:
            result['BootTime'] = self.boot_time
        if self.can_skip is not None:
            result['CanSkip'] = self.can_skip
        if self.current is not None:
            result['Current'] = self.current
        if self.ddl_sql is not None:
            result['DdlSql'] = self.ddl_sql
        if self.delay_seconds is not None:
            result['DelaySeconds'] = self.delay_seconds
        if self.dest_schema is not None:
            result['DestSchema'] = self.dest_schema
        if self.diff_row is not None:
            result['DiffRow'] = self.diff_row
        if self.err_detail is not None:
            result['ErrDetail'] = self.err_detail
        if self.err_msg is not None:
            result['ErrMsg'] = self.err_msg
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.id is not None:
            result['Id'] = self.id
        if self.ignore_flag is not None:
            result['IgnoreFlag'] = self.ignore_flag
        if self.item is not None:
            result['Item'] = self.item
        if self.job_id is not None:
            result['JobId'] = self.job_id
        result['Logs'] = []
        if self.logs is not None:
            for k in self.logs:
                result['Logs'].append(k.to_map() if k else None)
        if self.names is not None:
            result['Names'] = self.names
        if self.order_num is not None:
            result['OrderNum'] = self.order_num
        if self.parent_obj is not None:
            result['ParentObj'] = self.parent_obj
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        if self.skip is not None:
            result['Skip'] = self.skip
        if self.source_schema is not None:
            result['SourceSchema'] = self.source_schema
        if self.state is not None:
            result['State'] = self.state
        if self.sub is not None:
            result['Sub'] = self.sub
        if self.target_names is not None:
            result['TargetNames'] = self.target_names
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BootTime') is not None:
            self.boot_time = m.get('BootTime')
        if m.get('CanSkip') is not None:
            self.can_skip = m.get('CanSkip')
        if m.get('Current') is not None:
            self.current = m.get('Current')
        if m.get('DdlSql') is not None:
            self.ddl_sql = m.get('DdlSql')
        if m.get('DelaySeconds') is not None:
            self.delay_seconds = m.get('DelaySeconds')
        if m.get('DestSchema') is not None:
            self.dest_schema = m.get('DestSchema')
        if m.get('DiffRow') is not None:
            self.diff_row = m.get('DiffRow')
        if m.get('ErrDetail') is not None:
            self.err_detail = m.get('ErrDetail')
        if m.get('ErrMsg') is not None:
            self.err_msg = m.get('ErrMsg')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IgnoreFlag') is not None:
            self.ignore_flag = m.get('IgnoreFlag')
        if m.get('Item') is not None:
            self.item = m.get('Item')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        self.logs = []
        if m.get('Logs') is not None:
            for k in m.get('Logs'):
                temp_model = DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs()
                self.logs.append(temp_model.from_map(k))
        if m.get('Names') is not None:
            self.names = m.get('Names')
        if m.get('OrderNum') is not None:
            self.order_num = m.get('OrderNum')
        if m.get('ParentObj') is not None:
            self.parent_obj = m.get('ParentObj')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        if m.get('Skip') is not None:
            self.skip = m.get('Skip')
        if m.get('SourceSchema') is not None:
            self.source_schema = m.get('SourceSchema')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Sub') is not None:
            self.sub = m.get('Sub')
        if m.get('TargetNames') is not None:
            self.target_names = m.get('TargetNames')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBodySubDistributedJobStatus(TeaModel):
    def __init__(
        self,
        code: str = None,
        error_item: int = None,
        job_id: str = None,
        job_name: str = None,
        job_progress: List[DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress] = None,
        state: str = None,
        total: int = None,
    ):
        # The task code that indicates the type of the subtask. Valid values:
        # 
        # *   **01**: precheck.
        # *   **02**: schema migration or initial schema synchronization.
        # *   **03**: full data migration or initial full data synchronization.
        # *   **04**: incremental data migration or synchronization.
        self.code = code
        # The number of subtasks that failed.
        self.error_item = error_item
        # The subtask ID.
        self.job_id = job_id
        # The name of distributed subtasks associated with the subtask.
        self.job_name = job_name
        # The subtasks and the progress of each subtask.
        self.job_progress = job_progress
        # The status of the subtask. Valid values:
        # 
        # *   **NotStarted**: The subtask is not started.
        # *   **Suspending**: The subtask is paused.
        # *   **Checking**: The subtask is being checked.
        # *   **Migrating**: The subtask is in progress. Data is being migrated.
        # *   **Failed**: The subtask failed.
        # *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
        # *   **Finished**: The subtask is complete.
        self.state = state
        # The total number of entries that are returned.
        self.total = total

    def validate(self):
        if self.job_progress:
            for k in self.job_progress:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.error_item is not None:
            result['ErrorItem'] = self.error_item
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_name is not None:
            result['JobName'] = self.job_name
        result['JobProgress'] = []
        if self.job_progress is not None:
            for k in self.job_progress:
                result['JobProgress'].append(k.to_map() if k else None)
        if self.state is not None:
            result['State'] = self.state
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ErrorItem') is not None:
            self.error_item = m.get('ErrorItem')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        self.job_progress = []
        if m.get('JobProgress') is not None:
            for k in m.get('JobProgress'):
                temp_model = DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress()
                self.job_progress.append(temp_model.from_map(k))
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class DescribePreCheckStatusResponseBody(TeaModel):
    def __init__(
        self,
        analysis_job_progress: List[DescribePreCheckStatusResponseBodyAnalysisJobProgress] = None,
        code: str = None,
        error_analysis_item: int = None,
        error_item: int = None,
        full_net_check_job_status: List[DescribePreCheckStatusResponseBodyFullNetCheckJobStatus] = None,
        http_status_code: int = None,
        job_id: str = None,
        job_name: str = None,
        job_progress: List[DescribePreCheckStatusResponseBodyJobProgress] = None,
        network_diagnosis_result: DescribePreCheckStatusResponseBodyNetworkDiagnosisResult = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        state: str = None,
        sub_distributed_job_status: List[DescribePreCheckStatusResponseBodySubDistributedJobStatus] = None,
        success: bool = None,
        total: int = None,
        total_record_count: int = None,
    ):
        # Display list of evaluation tasks
        self.analysis_job_progress = analysis_job_progress
        # The task code that indicates the type of the subtask. Valid values:
        # 
        # *   **01**: precheck.
        # *   **02**: schema migration or initial schema synchronization.
        # *   **03**: full data migration or initial full data synchronization.
        # *   **04**: incremental data migration or synchronization.
        self.code = code
        # Number of failed evaluation items
        self.error_analysis_item = error_analysis_item
        # The total number of subtask failures.
        self.error_item = error_item
        # Network-wide inspection results.
        self.full_net_check_job_status = full_net_check_job_status
        # The status code that is returned.
        self.http_status_code = http_status_code
        # The ID of the data migration or synchronization task.
        self.job_id = job_id
        # The name of the subtask.
        self.job_name = job_name
        # The subtasks and the progress of each subtask.
        self.job_progress = job_progress
        # Network diagnosis result
        self.network_diagnosis_result = network_diagnosis_result
        # The page number. Pages start from page 1. Default value: **1**.
        self.page_number = page_number
        # The number of entries per page.
        self.page_record_count = page_record_count
        # The request ID.
        self.request_id = request_id
        # The status of the subtask. Valid values:
        # 
        # *   **NotStarted**: The subtask is not started.
        # *   **Suspending**: The subtask is paused.
        # *   **Checking**: The subtask is being checked.
        # *   **Migrating**: The subtask is in progress. Data is being migrated.
        # *   **Failed**: The subtask failed.
        # *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
        # *   **Finished**: The subtask is complete.
        self.state = state
        # The information about the distributed subtasks.
        self.sub_distributed_job_status = sub_distributed_job_status
        # Indicates whether the request is successful.
        self.success = success
        # The total number of subtasks.
        self.total = total
        # The total number of entries that are returned.
        self.total_record_count = total_record_count

    def validate(self):
        if self.analysis_job_progress:
            for k in self.analysis_job_progress:
                if k:
                    k.validate()
        if self.full_net_check_job_status:
            for k in self.full_net_check_job_status:
                if k:
                    k.validate()
        if self.job_progress:
            for k in self.job_progress:
                if k:
                    k.validate()
        if self.network_diagnosis_result:
            self.network_diagnosis_result.validate()
        if self.sub_distributed_job_status:
            for k in self.sub_distributed_job_status:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnalysisJobProgress'] = []
        if self.analysis_job_progress is not None:
            for k in self.analysis_job_progress:
                result['AnalysisJobProgress'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.error_analysis_item is not None:
            result['ErrorAnalysisItem'] = self.error_analysis_item
        if self.error_item is not None:
            result['ErrorItem'] = self.error_item
        result['FullNetCheckJobStatus'] = []
        if self.full_net_check_job_status is not None:
            for k in self.full_net_check_job_status:
                result['FullNetCheckJobStatus'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_name is not None:
            result['JobName'] = self.job_name
        result['JobProgress'] = []
        if self.job_progress is not None:
            for k in self.job_progress:
                result['JobProgress'].append(k.to_map() if k else None)
        if self.network_diagnosis_result is not None:
            result['NetworkDiagnosisResult'] = self.network_diagnosis_result.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.state is not None:
            result['State'] = self.state
        result['SubDistributedJobStatus'] = []
        if self.sub_distributed_job_status is not None:
            for k in self.sub_distributed_job_status:
                result['SubDistributedJobStatus'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.analysis_job_progress = []
        if m.get('AnalysisJobProgress') is not None:
            for k in m.get('AnalysisJobProgress'):
                temp_model = DescribePreCheckStatusResponseBodyAnalysisJobProgress()
                self.analysis_job_progress.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ErrorAnalysisItem') is not None:
            self.error_analysis_item = m.get('ErrorAnalysisItem')
        if m.get('ErrorItem') is not None:
            self.error_item = m.get('ErrorItem')
        self.full_net_check_job_status = []
        if m.get('FullNetCheckJobStatus') is not None:
            for k in m.get('FullNetCheckJobStatus'):
                temp_model = DescribePreCheckStatusResponseBodyFullNetCheckJobStatus()
                self.full_net_check_job_status.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobName') is not None:
            self.job_name = m.get('JobName')
        self.job_progress = []
        if m.get('JobProgress') is not None:
            for k in m.get('JobProgress'):
                temp_model = DescribePreCheckStatusResponseBodyJobProgress()
                self.job_progress.append(temp_model.from_map(k))
        if m.get('NetworkDiagnosisResult') is not None:
            temp_model = DescribePreCheckStatusResponseBodyNetworkDiagnosisResult()
            self.network_diagnosis_result = temp_model.from_map(m['NetworkDiagnosisResult'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('State') is not None:
            self.state = m.get('State')
        self.sub_distributed_job_status = []
        if m.get('SubDistributedJobStatus') is not None:
            for k in m.get('SubDistributedJobStatus'):
                temp_model = DescribePreCheckStatusResponseBodySubDistributedJobStatus()
                self.sub_distributed_job_status.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribePreCheckStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribePreCheckStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribePreCheckStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSubscriptionInstanceAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class DescribeSubscriptionInstanceAlertResponseBody(TeaModel):
    def __init__(
        self,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        err_code: str = None,
        err_message: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        request_id: str = None,
        subscription_instance_id: str = None,
        subscription_instance_name: str = None,
        success: str = None,
    ):
        # The mobile phone numbers that receive latency-related alerts.
        self.delay_alert_phone = delay_alert_phone
        # Indicates whether task latency is monitored. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering latency alerts. The unit is seconds and the value is an integer. The recommended value is 10 seconds.
        self.delay_over_seconds = delay_over_seconds
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The mobile phone numbers that receive status-related alerts.
        self.error_alert_phone = error_alert_phone
        # Indicates whether task status is monitored. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        self.error_alert_status = error_alert_status
        # The ID of the request.
        self.request_id = request_id
        # The ID of the change tracking instance.
        self.subscription_instance_id = subscription_instance_id
        # The name of the change tracking instance.
        self.subscription_instance_name = subscription_instance_name
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceID'] = self.subscription_instance_id
        if self.subscription_instance_name is not None:
            result['SubscriptionInstanceName'] = self.subscription_instance_name
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SubscriptionInstanceID') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceID')
        if m.get('SubscriptionInstanceName') is not None:
            self.subscription_instance_name = m.get('SubscriptionInstanceName')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSubscriptionInstanceAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSubscriptionInstanceAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSubscriptionInstanceAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSubscriptionInstanceStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_type: str = None,
    ):
        # The ID of the instance that hosts the source database.
        self.instance_id = instance_id
        # The instance type of the source database.
        # 
        # >  This parameter is returned only for change tracking instances of the new version.
        self.instance_type = instance_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether data definition language (DDL) operations are tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.ddl = ddl
        # Indicates whether data manipulation language (DML) operations are tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['DDL'] = self.ddl
        if self.dml is not None:
            result['DML'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DDL') is not None:
            self.ddl = m.get('DDL')
        if m.get('DML') is not None:
            self.dml = m.get('DML')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpchost: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpchost = vpchost

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpchost is not None:
            result['VPCHost'] = self.vpchost
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VPCHost') is not None:
            self.vpchost = m.get('VPCHost')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList(TeaModel):
    def __init__(
        self,
        table: List[str] = None,
    ):
        self.table = table

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table is not None:
            result['Table'] = self.table
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Table') is not None:
            self.table = m.get('Table')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        table_list: DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList = None,
        whole_database: str = None,
    ):
        # The name of the database to which the object belongs.
        self.database_name = database_name
        # The table name.
        self.table_list = table_list
        # Indicates whether the data of an entire database is tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.whole_database = whole_database

    def validate(self):
        if self.table_list:
            self.table_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.table_list is not None:
            result['TableList'] = self.table_list.to_map()
        if self.whole_database is not None:
            result['WholeDatabase'] = self.whole_database
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('TableList') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList()
            self.table_list = temp_model.from_map(m['TableList'])
        if m.get('WholeDatabase') is not None:
            self.whole_database = m.get('WholeDatabase')
        return self


class DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject(TeaModel):
    def __init__(
        self,
        synchronous_object: List[DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject] = None,
    ):
        self.synchronous_object = synchronous_object

    def validate(self):
        if self.synchronous_object:
            for k in self.synchronous_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SynchronousObject'] = []
        if self.synchronous_object is not None:
            for k in self.synchronous_object:
                result['SynchronousObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.synchronous_object = []
        if m.get('SynchronousObject') is not None:
            for k in m.get('SynchronousObject'):
                temp_model = DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject()
                self.synchronous_object.append(temp_model.from_map(k))
        return self


class DescribeSubscriptionInstanceStatusResponseBody(TeaModel):
    def __init__(
        self,
        begin_timestamp: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        end_timestamp: str = None,
        err_code: str = None,
        err_message: str = None,
        error_message: str = None,
        pay_type: str = None,
        request_id: str = None,
        source_endpoint: DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint = None,
        status: str = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType = None,
        subscription_host: DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost = None,
        subscription_instance_id: str = None,
        subscription_instance_name: str = None,
        subscription_object: DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject = None,
        success: str = None,
        task_id: str = None,
    ):
        # The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.begin_timestamp = begin_timestamp
        # The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.end_timestamp = end_timestamp
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The error message returned if change tracking failed.
        self.error_message = error_message
        # The billing method of the change tracking instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The ID of the request.
        self.request_id = request_id
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The status of the change tracking task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Starting**: The task is being started.
        # *   **Normal**: The task is running as expected.
        # *   **Abnormal**: The task is not running as expected.
        self.status = status
        # The topic of the change tracking instance.
        # 
        # >  This parameter is returned only if your change tracking instance is of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The types of operations that are tracked by the task.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The ID of the change tracking instance.
        self.subscription_instance_id = subscription_instance_id
        # The name of the change tracking instance.
        self.subscription_instance_name = subscription_instance_name
        # The objects for change tracking.
        self.subscription_object = subscription_object
        # Indicates whether the call was successful.
        self.success = success
        # The ID of the change tracking task.
        self.task_id = task_id

    def validate(self):
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.subscription_object:
            self.subscription_object.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceID'] = self.subscription_instance_id
        if self.subscription_instance_name is not None:
            result['SubscriptionInstanceName'] = self.subscription_instance_name
        if self.subscription_object is not None:
            result['SubscriptionObject'] = self.subscription_object.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SubscriptionInstanceID') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceID')
        if m.get('SubscriptionInstanceName') is not None:
            self.subscription_instance_name = m.get('SubscriptionInstanceName')
        if m.get('SubscriptionObject') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject()
            self.subscription_object = temp_model.from_map(m['SubscriptionObject'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeSubscriptionInstanceStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSubscriptionInstanceStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSubscriptionInstanceStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSubscriptionInstancesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
        # *   This parameter cannot be an empty string.
        # 
        # This parameter is required.
        self.key = key
        # The tag value.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
        # *   This parameter can be an empty string.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeSubscriptionInstancesRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_name: str = None,
        tag: List[DescribeSubscriptionInstancesRequestTag] = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
        self.page_size = page_size
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/49442.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the change tracking instance.
        # 
        # >  If you specify this parameter, DTS returns all the change tracking instances that match the specified name.
        self.subscription_instance_name = subscription_instance_name
        # Tags of the data migration instance, used as a filter. When this is not empty, only instances with this tag will be returned.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_name is not None:
            result['SubscriptionInstanceName'] = self.subscription_instance_name
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceName') is not None:
            self.subscription_instance_name = m.get('SubscriptionInstanceName')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeSubscriptionInstancesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_type: str = None,
    ):
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        # 
        # >  This parameter is returned only for change tracking instances of the new version.
        self.instance_type = instance_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceID'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceID') is not None:
            self.instance_id = m.get('InstanceID')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType(TeaModel):
    def __init__(
        self,
        ddl: bool = None,
        dml: bool = None,
    ):
        # Indicates whether data definition language (DDL) operations are tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.ddl = ddl
        # Indicates whether data manipulation language (DML) operations are tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.dml = dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ddl is not None:
            result['DDL'] = self.ddl
        if self.dml is not None:
            result['DML'] = self.dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DDL') is not None:
            self.ddl = m.get('DDL')
        if m.get('DML') is not None:
            self.dml = m.get('DML')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost(TeaModel):
    def __init__(
        self,
        private_host: str = None,
        public_host: str = None,
        vpchost: str = None,
    ):
        # The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.private_host = private_host
        # The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.public_host = public_host
        # The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
        self.vpchost = vpchost

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.private_host is not None:
            result['PrivateHost'] = self.private_host
        if self.public_host is not None:
            result['PublicHost'] = self.public_host
        if self.vpchost is not None:
            result['VPCHost'] = self.vpchost
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateHost') is not None:
            self.private_host = m.get('PrivateHost')
        if m.get('PublicHost') is not None:
            self.public_host = m.get('PublicHost')
        if m.get('VPCHost') is not None:
            self.vpchost = m.get('VPCHost')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList(TeaModel):
    def __init__(
        self,
        table: List[str] = None,
    ):
        self.table = table

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table is not None:
            result['Table'] = self.table
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Table') is not None:
            self.table = m.get('Table')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject(TeaModel):
    def __init__(
        self,
        database_name: str = None,
        table_list: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList = None,
        whole_database: str = None,
    ):
        # The name of the database to which the object belongs.
        self.database_name = database_name
        # The table name.
        self.table_list = table_list
        # Indicates whether the data of an entire database is tracked. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.whole_database = whole_database

    def validate(self):
        if self.table_list:
            self.table_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.database_name is not None:
            result['DatabaseName'] = self.database_name
        if self.table_list is not None:
            result['TableList'] = self.table_list.to_map()
        if self.whole_database is not None:
            result['WholeDatabase'] = self.whole_database
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DatabaseName') is not None:
            self.database_name = m.get('DatabaseName')
        if m.get('TableList') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList()
            self.table_list = temp_model.from_map(m['TableList'])
        if m.get('WholeDatabase') is not None:
            self.whole_database = m.get('WholeDatabase')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject(TeaModel):
    def __init__(
        self,
        synchronous_object: List[DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject] = None,
    ):
        self.synchronous_object = synchronous_object

    def validate(self):
        if self.synchronous_object:
            for k in self.synchronous_object:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SynchronousObject'] = []
        if self.synchronous_object is not None:
            for k in self.synchronous_object:
                result['SynchronousObject'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.synchronous_object = []
        if m.get('SynchronousObject') is not None:
            for k in m.get('SynchronousObject'):
                temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject()
                self.synchronous_object.append(temp_model.from_map(k))
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key.
        self.key = key
        # The tag value that corresponds to the tag key.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags(TeaModel):
    def __init__(
        self,
        tag: List[DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance(TeaModel):
    def __init__(
        self,
        begin_timestamp: str = None,
        consumption_checkpoint: str = None,
        consumption_client: str = None,
        end_timestamp: str = None,
        error_message: str = None,
        instance_create_time: str = None,
        job_create_time: str = None,
        pay_type: str = None,
        source_endpoint: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint = None,
        status: str = None,
        subscribe_topic: str = None,
        subscription_data_type: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType = None,
        subscription_host: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost = None,
        subscription_instance_id: str = None,
        subscription_instance_name: str = None,
        subscription_object: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject = None,
        tags: DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags = None,
    ):
        # The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.begin_timestamp = begin_timestamp
        # The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.consumption_checkpoint = consumption_checkpoint
        # The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
        self.consumption_client = consumption_client
        # The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.end_timestamp = end_timestamp
        # The error message returned if change tracking failed.
        self.error_message = error_message
        # The time when the change tracking instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
        self.instance_create_time = instance_create_time
        # The time when the change tracking task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.job_create_time = job_create_time
        # The billing method of the change tracking instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The status of the change tracking task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Starting**: The task is being started.
        # *   **Normal**: The task is running as expected.
        # *   **Abnormal**: The task is not running as expected.
        self.status = status
        # The topic of the change tracking instance.
        # 
        # >  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
        self.subscribe_topic = subscribe_topic
        # The types of operations that are tracked by the task.
        self.subscription_data_type = subscription_data_type
        # The endpoint of the change tracking instance.
        self.subscription_host = subscription_host
        # The ID of the change tracking instance.
        self.subscription_instance_id = subscription_instance_id
        # The name of the change tracking instance.
        self.subscription_instance_name = subscription_instance_name
        # The objects for change tracking.
        self.subscription_object = subscription_object
        # The collection of tags.
        self.tags = tags

    def validate(self):
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.subscription_data_type:
            self.subscription_data_type.validate()
        if self.subscription_host:
            self.subscription_host.validate()
        if self.subscription_object:
            self.subscription_object.validate()
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_timestamp is not None:
            result['BeginTimestamp'] = self.begin_timestamp
        if self.consumption_checkpoint is not None:
            result['ConsumptionCheckpoint'] = self.consumption_checkpoint
        if self.consumption_client is not None:
            result['ConsumptionClient'] = self.consumption_client
        if self.end_timestamp is not None:
            result['EndTimestamp'] = self.end_timestamp
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.instance_create_time is not None:
            result['InstanceCreateTime'] = self.instance_create_time
        if self.job_create_time is not None:
            result['JobCreateTime'] = self.job_create_time
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.subscribe_topic is not None:
            result['SubscribeTopic'] = self.subscribe_topic
        if self.subscription_data_type is not None:
            result['SubscriptionDataType'] = self.subscription_data_type.to_map()
        if self.subscription_host is not None:
            result['SubscriptionHost'] = self.subscription_host.to_map()
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceID'] = self.subscription_instance_id
        if self.subscription_instance_name is not None:
            result['SubscriptionInstanceName'] = self.subscription_instance_name
        if self.subscription_object is not None:
            result['SubscriptionObject'] = self.subscription_object.to_map()
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTimestamp') is not None:
            self.begin_timestamp = m.get('BeginTimestamp')
        if m.get('ConsumptionCheckpoint') is not None:
            self.consumption_checkpoint = m.get('ConsumptionCheckpoint')
        if m.get('ConsumptionClient') is not None:
            self.consumption_client = m.get('ConsumptionClient')
        if m.get('EndTimestamp') is not None:
            self.end_timestamp = m.get('EndTimestamp')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('InstanceCreateTime') is not None:
            self.instance_create_time = m.get('InstanceCreateTime')
        if m.get('JobCreateTime') is not None:
            self.job_create_time = m.get('JobCreateTime')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubscribeTopic') is not None:
            self.subscribe_topic = m.get('SubscribeTopic')
        if m.get('SubscriptionDataType') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType()
            self.subscription_data_type = temp_model.from_map(m['SubscriptionDataType'])
        if m.get('SubscriptionHost') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost()
            self.subscription_host = temp_model.from_map(m['SubscriptionHost'])
        if m.get('SubscriptionInstanceID') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceID')
        if m.get('SubscriptionInstanceName') is not None:
            self.subscription_instance_name = m.get('SubscriptionInstanceName')
        if m.get('SubscriptionObject') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject()
            self.subscription_object = temp_model.from_map(m['SubscriptionObject'])
        if m.get('Tags') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags()
            self.tags = temp_model.from_map(m['Tags'])
        return self


class DescribeSubscriptionInstancesResponseBodySubscriptionInstances(TeaModel):
    def __init__(
        self,
        subscription_instance: List[DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance] = None,
    ):
        self.subscription_instance = subscription_instance

    def validate(self):
        if self.subscription_instance:
            for k in self.subscription_instance:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SubscriptionInstance'] = []
        if self.subscription_instance is not None:
            for k in self.subscription_instance:
                result['SubscriptionInstance'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.subscription_instance = []
        if m.get('SubscriptionInstance') is not None:
            for k in m.get('SubscriptionInstance'):
                temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance()
                self.subscription_instance.append(temp_model.from_map(k))
        return self


class DescribeSubscriptionInstancesResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        subscription_instances: DescribeSubscriptionInstancesResponseBodySubscriptionInstances = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The page number of the returned page.
        self.page_number = page_number
        # The maximum number of entries that can be displayed on the current page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # The list of change tracking instances and the details of each instance.
        self.subscription_instances = subscription_instances
        # Indicates whether the call was successful.
        self.success = success
        # The total number of change tracking instances that belong to your Alibaba Cloud account.
        self.total_record_count = total_record_count

    def validate(self):
        if self.subscription_instances:
            self.subscription_instances.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.subscription_instances is not None:
            result['SubscriptionInstances'] = self.subscription_instances.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SubscriptionInstances') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBodySubscriptionInstances()
            self.subscription_instances = temp_model.from_map(m['SubscriptionInstances'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeSubscriptionInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSubscriptionInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSubscriptionInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSubscriptionMetaRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        sid: str = None,
        sub_migration_job_ids: Dict[str, Any] = None,
        topics: Dict[str, Any] = None,
    ):
        # The ID of the distributed change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the region in which the change tracking instance resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the consumer group.
        # 
        # This parameter is required.
        self.sid = sid
        # The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).
        # 
        # >  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.
        self.sub_migration_job_ids = sub_migration_job_ids
        # The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).
        # 
        # >  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.
        self.topics = topics

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.sid is not None:
            result['Sid'] = self.sid
        if self.sub_migration_job_ids is not None:
            result['SubMigrationJobIds'] = self.sub_migration_job_ids
        if self.topics is not None:
            result['Topics'] = self.topics
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Sid') is not None:
            self.sid = m.get('Sid')
        if m.get('SubMigrationJobIds') is not None:
            self.sub_migration_job_ids = m.get('SubMigrationJobIds')
        if m.get('Topics') is not None:
            self.topics = m.get('Topics')
        return self


class DescribeSubscriptionMetaShrinkRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        sid: str = None,
        sub_migration_job_ids_shrink: str = None,
        topics_shrink: str = None,
    ):
        # The ID of the distributed change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the region in which the change tracking instance resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the consumer group.
        # 
        # This parameter is required.
        self.sid = sid
        # The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).
        # 
        # >  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.
        self.sub_migration_job_ids_shrink = sub_migration_job_ids_shrink
        # The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).
        # 
        # >  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.
        self.topics_shrink = topics_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.sid is not None:
            result['Sid'] = self.sid
        if self.sub_migration_job_ids_shrink is not None:
            result['SubMigrationJobIds'] = self.sub_migration_job_ids_shrink
        if self.topics_shrink is not None:
            result['Topics'] = self.topics_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Sid') is not None:
            self.sid = m.get('Sid')
        if m.get('SubMigrationJobIds') is not None:
            self.sub_migration_job_ids_shrink = m.get('SubMigrationJobIds')
        if m.get('Topics') is not None:
            self.topics_shrink = m.get('Topics')
        return self


class DescribeSubscriptionMetaResponseBodySubscriptionMetaList(TeaModel):
    def __init__(
        self,
        checkpoint: int = None,
        dblist: str = None,
        dproxy_url: str = None,
        sid: str = None,
        topic: str = None,
    ):
        # The consumer offset of the subtask. It is a UNIX timestamp that is generated when the client consumes the first data record. Unit: seconds.
        # 
        # >  You can use a search engine to obtain a UNIX timestamp converter.
        self.checkpoint = checkpoint
        # The objects of the subtask. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        self.dblist = dblist
        # The endpoint and port number of the change tracking instance.
        self.dproxy_url = dproxy_url
        # The consumer group ID of the subtask.
        self.sid = sid
        # The topic of the subtask.
        self.topic = topic

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.dblist is not None:
            result['DBList'] = self.dblist
        if self.dproxy_url is not None:
            result['DProxyUrl'] = self.dproxy_url
        if self.sid is not None:
            result['Sid'] = self.sid
        if self.topic is not None:
            result['Topic'] = self.topic
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DBList') is not None:
            self.dblist = m.get('DBList')
        if m.get('DProxyUrl') is not None:
            self.dproxy_url = m.get('DProxyUrl')
        if m.get('Sid') is not None:
            self.sid = m.get('Sid')
        if m.get('Topic') is not None:
            self.topic = m.get('Topic')
        return self


class DescribeSubscriptionMetaResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        subscription_meta_list: List[DescribeSubscriptionMetaResponseBodySubscriptionMetaList] = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # The details of the subtasks.
        self.subscription_meta_list = subscription_meta_list
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        if self.subscription_meta_list:
            for k in self.subscription_meta_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SubscriptionMetaList'] = []
        if self.subscription_meta_list is not None:
            for k in self.subscription_meta_list:
                result['SubscriptionMetaList'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.subscription_meta_list = []
        if m.get('SubscriptionMetaList') is not None:
            for k in m.get('SubscriptionMetaList'):
                temp_model = DescribeSubscriptionMetaResponseBodySubscriptionMetaList()
                self.subscription_meta_list.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSubscriptionMetaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSubscriptionMetaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSubscriptionMetaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSyncStatusRequest(TeaModel):
    def __init__(
        self,
        direction: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.direction = direction
        self.dts_instance_id = dts_instance_id
        self.dts_job_id = dts_job_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.direction is not None:
            result['Direction'] = self.direction
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Direction') is not None:
            self.direction = m.get('Direction')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeSyncStatusResponseBodySyncStatusList(TeaModel):
    def __init__(
        self,
        checkpoint: int = None,
        code: str = None,
        delay: int = None,
        job_id: str = None,
        rate: str = None,
        status: str = None,
    ):
        self.checkpoint = checkpoint
        self.code = code
        self.delay = delay
        self.job_id = job_id
        self.rate = rate
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.code is not None:
            result['Code'] = self.code
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.rate is not None:
            result['Rate'] = self.rate
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Rate') is not None:
            self.rate = m.get('Rate')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSyncStatusResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        page_number: int = None,
        request_id: str = None,
        success: bool = None,
        sync_status_list: List[DescribeSyncStatusResponseBodySyncStatusList] = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.page_number = page_number
        self.request_id = request_id
        self.success = success
        self.sync_status_list = sync_status_list

    def validate(self):
        if self.sync_status_list:
            for k in self.sync_status_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['SyncStatusList'] = []
        if self.sync_status_list is not None:
            for k in self.sync_status_list:
                result['SyncStatusList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.sync_status_list = []
        if m.get('SyncStatusList') is not None:
            for k in m.get('SyncStatusList'):
                temp_model = DescribeSyncStatusResponseBodySyncStatusList()
                self.sync_status_list.append(temp_model.from_map(k))
        return self


class DescribeSyncStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSyncStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSyncStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationJobAlertRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # >  Default value: **Forward**.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DescribeSynchronizationJobAlertResponseBody(TeaModel):
    def __init__(
        self,
        delay_alert_phone: str = None,
        delay_alert_status: str = None,
        delay_over_seconds: str = None,
        err_code: str = None,
        err_message: str = None,
        error_alert_phone: str = None,
        error_alert_status: str = None,
        request_id: str = None,
        success: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
        synchronization_job_name: str = None,
    ):
        # The mobile phone numbers that receive latency-related alerts.
        self.delay_alert_phone = delay_alert_phone
        # Indicates whether task latency is monitored. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        self.delay_alert_status = delay_alert_status
        # The threshold for triggering latency alerts. Unit: seconds.
        self.delay_over_seconds = delay_over_seconds
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The mobile phone numbers that receive status-related alerts.
        self.error_alert_phone = error_alert_phone
        # Indicates whether task status is monitored. Valid values:
        # 
        # *   **enable**: yes
        # *   **disable**: no
        self.error_alert_status = error_alert_status
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # 
        # *   **Reverse**\
        # 
        # > This parameter is returned only when the topology of data synchronization is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance.
        self.synchronization_job_id = synchronization_job_id
        # The name of the data synchronization task.
        self.synchronization_job_name = synchronization_job_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay_alert_phone is not None:
            result['DelayAlertPhone'] = self.delay_alert_phone
        if self.delay_alert_status is not None:
            result['DelayAlertStatus'] = self.delay_alert_status
        if self.delay_over_seconds is not None:
            result['DelayOverSeconds'] = self.delay_over_seconds
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_alert_phone is not None:
            result['ErrorAlertPhone'] = self.error_alert_phone
        if self.error_alert_status is not None:
            result['ErrorAlertStatus'] = self.error_alert_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_job_name is not None:
            result['SynchronizationJobName'] = self.synchronization_job_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DelayAlertPhone') is not None:
            self.delay_alert_phone = m.get('DelayAlertPhone')
        if m.get('DelayAlertStatus') is not None:
            self.delay_alert_status = m.get('DelayAlertStatus')
        if m.get('DelayOverSeconds') is not None:
            self.delay_over_seconds = m.get('DelayOverSeconds')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorAlertPhone') is not None:
            self.error_alert_phone = m.get('ErrorAlertPhone')
        if m.get('ErrorAlertStatus') is not None:
            self.error_alert_status = m.get('ErrorAlertStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationJobName') is not None:
            self.synchronization_job_name = m.get('SynchronizationJobName')
        return self


class DescribeSynchronizationJobAlertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationJobAlertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationJobAlertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationJobReplicatorCompareRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DescribeSynchronizationJobReplicatorCompareResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
        synchronization_replicator_compare_enable: bool = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # Indicates whether image matching is enabled. Valid values:
        # 
        # *   **true**: Image matching is enabled.
        # *   **false**: Image matching is disabled.
        self.synchronization_replicator_compare_enable = synchronization_replicator_compare_enable

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.synchronization_replicator_compare_enable is not None:
            result['SynchronizationReplicatorCompareEnable'] = self.synchronization_replicator_compare_enable
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SynchronizationReplicatorCompareEnable') is not None:
            self.synchronization_replicator_compare_enable = m.get('SynchronizationReplicatorCompareEnable')
        return self


class DescribeSynchronizationJobReplicatorCompareResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationJobReplicatorCompareResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationJobReplicatorCompareResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationJobStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # >  Default value: **Forward**.
        # 
        # The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data synchronization failed.
        self.error_message = error_message
        # The progress of full data synchronization. Unit: %.
        self.percent = percent
        # The number of records that have been synchronized during full data synchronization.
        self.progress = progress
        # The status of full data synchronization. Valid values:
        # 
        # *   **NotStarted**: Full data synchronization is not started.
        # *   **Migrating**: Full data synchronization is in progress.
        # *   **Failed**: Full data synchronization failed.
        # *   **Finished**: Full data synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        delay: str = None,
        delay_millis: int = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The UNIX timestamp generated when the latest data record was synchronized.
        self.checkpoint = checkpoint
        # The synchronization latency, in seconds.
        self.delay = delay
        # The synchronization latency, in milliseconds.
        self.delay_millis = delay_millis
        # The error message returned if incremental data synchronization failed.
        self.error_message = error_message
        # The progress of incremental data synchronization. Unit: %.
        self.percent = percent
        # The status of incremental data synchronization. Valid values:
        # 
        # *   **NotStarted**: Incremental data synchronization is not started.
        # *   **Migrating**: Incremental data synchronization is in progress.
        # *   **Failed**: Incremental data synchronization failed.
        # *   **Finished**: Incremental data synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.delay_millis is not None:
            result['DelayMillis'] = self.delay_millis
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DelayMillis') is not None:
            self.delay_millis = m.get('DelayMillis')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint(TeaModel):
    def __init__(
        self,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The database type of the destination instance.
        self.engine_name = engine_name
        # The endpoint of the destination instance.
        self.ip = ip
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The database service port of the destination instance.
        self.port = port
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeSynchronizationJobStatusResponseBodyPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The data traffic that is synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['FLOW'] = self.flow
        if self.rps is not None:
            result['RPS'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FLOW') is not None:
            self.flow = m.get('FLOW')
        if m.get('RPS') is not None:
            self.rps = m.get('RPS')
        return self


class DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_status: str = None,
        error_message: str = None,
        item_name: str = None,
        repair_method: str = None,
    ):
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.check_status = check_status
        # The error message returned if the task failed to pass the precheck.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.error_message = error_message
        # The name of the precheck item.
        self.item_name = item_name
        # The method to fix the precheck failure.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['CheckStatus'] = self.check_status
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckStatus') is not None:
            self.check_status = m.get('CheckStatus')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeSynchronizationJobStatusResponseBodyPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail] = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The precheck progress. Unit: %.
        self.percent = percent
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobStatusResponseBodySourceEndpoint(TeaModel):
    def __init__(
        self,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The database type of the source instance.
        self.engine_name = engine_name
        # The endpoint of the source instance.
        self.ip = ip
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The database service port of the source instance.
        self.port = port
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema synchronization failed.
        self.error_message = error_message
        # The progress of schema synchronization. Unit: %.
        self.percent = percent
        # The number of tables whose schemas have been synchronized.
        self.progress = progress
        # The status of schema synchronization. Valid values:
        # 
        # *   **NotStarted**: Schema synchronization is not started.
        # *   **Migrating**: Schema synchronization is in progress.
        # *   **Failed**: Schema synchronization failed.
        # *   **Finished**: Schema synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes(TeaModel):
    def __init__(
        self,
        table_name: str = None,
    ):
        # The name of the excluded table.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes(TeaModel):
    def __init__(
        self,
        table_name: str = None,
    ):
        # The name of the synchronized table.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeSynchronizationJobStatusResponseBodySynchronizationObjects(TeaModel):
    def __init__(
        self,
        new_schema_name: str = None,
        schema_name: str = None,
        table_excludes: List[DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes] = None,
        table_includes: List[DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes] = None,
    ):
        # The database name that is used in the destination instance.
        self.new_schema_name = new_schema_name
        # The name of the synchronized database.
        self.schema_name = schema_name
        # The source tables that are excluded from the data synchronization task.
        self.table_excludes = table_excludes
        # The tables that are synchronized by the task.
        self.table_includes = table_includes

    def validate(self):
        if self.table_excludes:
            for k in self.table_excludes:
                if k:
                    k.validate()
        if self.table_includes:
            for k in self.table_includes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_schema_name is not None:
            result['NewSchemaName'] = self.new_schema_name
        if self.schema_name is not None:
            result['SchemaName'] = self.schema_name
        result['TableExcludes'] = []
        if self.table_excludes is not None:
            for k in self.table_excludes:
                result['TableExcludes'].append(k.to_map() if k else None)
        result['TableIncludes'] = []
        if self.table_includes is not None:
            for k in self.table_includes:
                result['TableIncludes'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NewSchemaName') is not None:
            self.new_schema_name = m.get('NewSchemaName')
        if m.get('SchemaName') is not None:
            self.schema_name = m.get('SchemaName')
        self.table_excludes = []
        if m.get('TableExcludes') is not None:
            for k in m.get('TableExcludes'):
                temp_model = DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes()
                self.table_excludes.append(temp_model.from_map(k))
        self.table_includes = []
        if m.get('TableIncludes') is not None:
            for k in m.get('TableIncludes'):
                temp_model = DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes()
                self.table_includes.append(temp_model.from_map(k))
        return self


class DescribeSynchronizationJobStatusResponseBody(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        data_initialization: str = None,
        data_initialization_status: DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus = None,
        data_synchronization_status: DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus = None,
        delay: str = None,
        delay_millis: int = None,
        destination_endpoint: DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint = None,
        err_code: str = None,
        err_message: str = None,
        error_message: str = None,
        expire_time: str = None,
        pay_type: str = None,
        performance: DescribeSynchronizationJobStatusResponseBodyPerformance = None,
        precheck_status: DescribeSynchronizationJobStatusResponseBodyPrecheckStatus = None,
        request_id: str = None,
        source_endpoint: DescribeSynchronizationJobStatusResponseBodySourceEndpoint = None,
        status: str = None,
        structure_initialization: str = None,
        structure_initialization_status: DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus = None,
        success: str = None,
        synchronization_direction: str = None,
        synchronization_job_class: str = None,
        synchronization_job_id: str = None,
        synchronization_job_name: str = None,
        synchronization_objects: List[DescribeSynchronizationJobStatusResponseBodySynchronizationObjects] = None,
        task_id: str = None,
    ):
        # The UNIX timestamp generated when the latest data record was synchronized.
        # 
        # >  You can use a search engine to obtain a UNIX timestamp converter.
        self.checkpoint = checkpoint
        # Indicates whether full data synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_initialization = data_initialization
        # The status of full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The status of incremental data synchronization.
        self.data_synchronization_status = data_synchronization_status
        # The synchronization latency, in seconds.
        self.delay = delay
        # The synchronization delay, in milliseconds.
        self.delay_millis = delay_millis
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The error message returned if data synchronization failed.
        self.error_message = error_message
        # The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        # 
        # >  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.
        self.expire_time = expire_time
        # The billing method of the data synchronization instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data synchronization instance.
        self.performance = performance
        # The precheck status.
        self.precheck_status = precheck_status
        # The ID of the request.
        self.request_id = request_id
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The status of the data synchronization task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Initializing**: The task is performing initial synchronization.
        # *   **InitializeFailed**: Initial synchronization failed.
        # *   **Synchronizing**: The task is synchronizing data.
        # *   **Failed**: The task failed to synchronize data.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects in the task are being modified.
        # *   **Finished**: The task is completed.
        self.status = status
        # Indicates whether schema synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.structure_initialization = structure_initialization
        # The status of schema synchronization.
        self.structure_initialization_status = structure_initialization_status
        # Indicates whether the call was successful.
        self.success = success
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        self.synchronization_direction = synchronization_direction
        # The specification of the data synchronization instance.
        self.synchronization_job_class = synchronization_job_class
        # The ID of the data synchronization instance.
        self.synchronization_job_id = synchronization_job_id
        # The name of the data synchronization task.
        self.synchronization_job_name = synchronization_job_name
        # The objects that are synchronized by the task.
        self.synchronization_objects = synchronization_objects
        self.task_id = task_id

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.synchronization_objects:
            for k in self.synchronization_objects:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.delay_millis is not None:
            result['DelayMillis'] = self.delay_millis
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_class is not None:
            result['SynchronizationJobClass'] = self.synchronization_job_class
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_job_name is not None:
            result['SynchronizationJobName'] = self.synchronization_job_name
        result['SynchronizationObjects'] = []
        if self.synchronization_objects is not None:
            for k in self.synchronization_objects:
                result['SynchronizationObjects'].append(k.to_map() if k else None)
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DelayMillis') is not None:
            self.delay_millis = m.get('DelayMillis')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodySourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobClass') is not None:
            self.synchronization_job_class = m.get('SynchronizationJobClass')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationJobName') is not None:
            self.synchronization_job_name = m.get('SynchronizationJobName')
        self.synchronization_objects = []
        if m.get('SynchronizationObjects') is not None:
            for k in m.get('SynchronizationObjects'):
                temp_model = DescribeSynchronizationJobStatusResponseBodySynchronizationObjects()
                self.synchronization_objects.append(temp_model.from_map(k))
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeSynchronizationJobStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationJobStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationJobStatusListRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_job_id_list_json_str: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instances reside. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The IDs of the data synchronization instances. The value is a JSON array. You can call the [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance IDs.
        # 
        # This parameter is required.
        self.synchronization_job_id_list_json_str = synchronization_job_id_list_json_str

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_job_id_list_json_str is not None:
            result['SynchronizationJobIdListJsonStr'] = self.synchronization_job_id_list_json_str
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationJobIdListJsonStr') is not None:
            self.synchronization_job_id_list_json_str = m.get('SynchronizationJobIdListJsonStr')
        return self


class DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList(TeaModel):
    def __init__(
        self,
        checkpoint: str = None,
        status: str = None,
        synchronization_direction: str = None,
    ):
        # The UNIX timestamp generated when the latest data record was synchronized.
        # 
        # >  You can use a search engine to obtain a UNIX timestamp converter.
        self.checkpoint = checkpoint
        # The status of the data synchronization task in this direction. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Initializing**: The task is performing initial synchronization.
        # *   **InitializeFailed**: Initial synchronization failed.
        # *   **Synchronizing**: The task is synchronizing data.
        # *   **Failed**: The task failed to synchronize data.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects in the task are being modified.
        # *   **Finished**: The task is completed.
        self.status = status
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        self.synchronization_direction = synchronization_direction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkpoint is not None:
            result['Checkpoint'] = self.checkpoint
        if self.status is not None:
            result['Status'] = self.status
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Checkpoint') is not None:
            self.checkpoint = m.get('Checkpoint')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        return self


class DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList(TeaModel):
    def __init__(
        self,
        synchronization_direction_info_list: List[DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList] = None,
        synchronization_job_id: str = None,
    ):
        # The details of data synchronization tasks in each direction.
        self.synchronization_direction_info_list = synchronization_direction_info_list
        # The ID of the data synchronization instance.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        if self.synchronization_direction_info_list:
            for k in self.synchronization_direction_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SynchronizationDirectionInfoList'] = []
        if self.synchronization_direction_info_list is not None:
            for k in self.synchronization_direction_info_list:
                result['SynchronizationDirectionInfoList'].append(k.to_map() if k else None)
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.synchronization_direction_info_list = []
        if m.get('SynchronizationDirectionInfoList') is not None:
            for k in m.get('SynchronizationDirectionInfoList'):
                temp_model = DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList()
                self.synchronization_direction_info_list.append(temp_model.from_map(k))
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class DescribeSynchronizationJobStatusListResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        synchronization_job_list_status_list: List[DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList] = None,
        total_record_count: int = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The page number of the returned page.
        self.page_number = page_number
        # The number of data synchronization instances displayed on one page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The status of the data synchronization tasks.
        self.synchronization_job_list_status_list = synchronization_job_list_status_list
        # The total number of data synchronization instances.
        self.total_record_count = total_record_count

    def validate(self):
        if self.synchronization_job_list_status_list:
            for k in self.synchronization_job_list_status_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['SynchronizationJobListStatusList'] = []
        if self.synchronization_job_list_status_list is not None:
            for k in self.synchronization_job_list_status_list:
                result['SynchronizationJobListStatusList'].append(k.to_map() if k else None)
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.synchronization_job_list_status_list = []
        if m.get('SynchronizationJobListStatusList') is not None:
            for k in m.get('SynchronizationJobListStatusList'):
                temp_model = DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList()
                self.synchronization_job_list_status_list.append(temp_model.from_map(k))
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeSynchronizationJobStatusListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationJobStatusListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationJobStatusListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationJobsRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
        # *   This parameter cannot be an empty string.
        # 
        # This parameter is required.
        self.key = key
        # The tag value. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag value.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
        # *   This parameter can be an empty string.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeSynchronizationJobsRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        page_num: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_job_name: str = None,
        tag: List[DescribeSynchronizationJobsRequestTag] = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
        self.page_num = page_num
        # The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
        self.page_size = page_size
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The name of the data synchronization task.
        # 
        # >  Fuzzy matching is supported.
        self.synchronization_job_name = synchronization_job_name
        # The tag key. You can call the [ListTagResources](https://help.aliyun.com/document_detail/191187.html) operation to query the tag key.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
        # *   This parameter cannot be an empty string.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_num is not None:
            result['PageNum'] = self.page_num
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_job_name is not None:
            result['SynchronizationJobName'] = self.synchronization_job_name
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNum') is not None:
            self.page_num = m.get('PageNum')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationJobName') is not None:
            self.synchronization_job_name = m.get('SynchronizationJobName')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = DescribeSynchronizationJobsRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data synchronization failed.
        self.error_message = error_message
        # The progress of full data synchronization. Unit: %.
        self.percent = percent
        # The number of records that have been synchronized during full data synchronization.
        self.progress = progress
        # The status of full data synchronization. Valid values:
        # 
        # *   **NotStarted**: Full data synchronization is not started.
        # *   **Migrating**: Full data synchronization is in progress.
        # *   **Failed**: Full data synchronization failed.
        # *   **Finished**: Full data synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        delay: str = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The synchronization latency.
        # 
        # >  This parameter is no longer available.
        self.delay = delay
        # The error message returned if incremental data synchronization failed.
        # 
        # >  This parameter is no longer available.
        self.error_message = error_message
        # The progress of incremental data synchronization. Unit: %.
        # 
        # >  This parameter is no longer available.
        self.percent = percent
        # The status of incremental data synchronization.
        # 
        # >  This parameter is no longer available.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint(TeaModel):
    def __init__(
        self,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The database type of the destination instance.
        self.engine_name = engine_name
        # The endpoint of the destination instance.
        self.ip = ip
        # The ID of the destination instance.
        self.instance_id = instance_id
        # The type of the destination instance.
        self.instance_type = instance_type
        # The database service port of the destination instance.
        self.port = port
        # The database account of the destination instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance(TeaModel):
    def __init__(
        self,
        flow: str = None,
        rps: str = None,
    ):
        # The data traffic that is synchronized per second. Unit: MB/s.
        self.flow = flow
        # The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
        self.rps = rps

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flow is not None:
            result['FLOW'] = self.flow
        if self.rps is not None:
            result['RPS'] = self.rps
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FLOW') is not None:
            self.flow = m.get('FLOW')
        if m.get('RPS') is not None:
            self.rps = m.get('RPS')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_status: str = None,
        error_message: str = None,
        item_name: str = None,
        repair_method: str = None,
    ):
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.check_status = check_status
        # The error message returned if the task failed to pass the precheck.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.error_message = error_message
        # The name of the precheck item.
        self.item_name = item_name
        # The method to fix the precheck failure.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['CheckStatus'] = self.check_status
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckStatus') is not None:
            self.check_status = m.get('CheckStatus')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail] = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The precheck progress. Unit: %.
        self.percent = percent
        # The precheck result. Valid values:
        # 
        # *   **Success**: The task passed the precheck.
        # *   **Failed**: The task failed to pass the precheck.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint(TeaModel):
    def __init__(
        self,
        engine_name: str = None,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        user_name: str = None,
    ):
        # The database type of the source instance.
        self.engine_name = engine_name
        # The endpoint of the source instance.
        self.ip = ip
        # The ID of the source instance.
        self.instance_id = instance_id
        # The type of the source instance.
        self.instance_type = instance_type
        # The database service port of the source instance.
        self.port = port
        # The database account of the source instance.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.engine_name is not None:
            result['EngineName'] = self.engine_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EngineName') is not None:
            self.engine_name = m.get('EngineName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema synchronization failed.
        self.error_message = error_message
        # The progress of schema synchronization. Unit: %.
        self.percent = percent
        # The number of tables whose schemas have been synchronized.
        self.progress = progress
        # The status of schema synchronization. Valid values:
        # 
        # *   **NotStarted**: Schema synchronization is not started.
        # *   **Migrating**: Schema synchronization is in progress.
        # *   **Failed**: Schema synchronization failed.
        # *   **Finished**: Schema synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes(TeaModel):
    def __init__(
        self,
        table_name: str = None,
    ):
        # The name of the excluded table.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes(TeaModel):
    def __init__(
        self,
        table_name: str = None,
    ):
        # The name of the synchronized table.
        self.table_name = table_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.table_name is not None:
            result['TableName'] = self.table_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TableName') is not None:
            self.table_name = m.get('TableName')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects(TeaModel):
    def __init__(
        self,
        new_schema_name: str = None,
        schema_name: str = None,
        table_excludes: List[DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes] = None,
        table_includes: List[DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes] = None,
    ):
        # The database name that is used in the destination instance.
        self.new_schema_name = new_schema_name
        # The name of the synchronized database.
        self.schema_name = schema_name
        # The source tables that are excluded from the data synchronization task.
        self.table_excludes = table_excludes
        # The tables that are synchronized by the task.
        self.table_includes = table_includes

    def validate(self):
        if self.table_excludes:
            for k in self.table_excludes:
                if k:
                    k.validate()
        if self.table_includes:
            for k in self.table_includes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_schema_name is not None:
            result['NewSchemaName'] = self.new_schema_name
        if self.schema_name is not None:
            result['SchemaName'] = self.schema_name
        result['TableExcludes'] = []
        if self.table_excludes is not None:
            for k in self.table_excludes:
                result['TableExcludes'].append(k.to_map() if k else None)
        result['TableIncludes'] = []
        if self.table_includes is not None:
            for k in self.table_includes:
                result['TableIncludes'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NewSchemaName') is not None:
            self.new_schema_name = m.get('NewSchemaName')
        if m.get('SchemaName') is not None:
            self.schema_name = m.get('SchemaName')
        self.table_excludes = []
        if m.get('TableExcludes') is not None:
            for k in m.get('TableExcludes'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes()
                self.table_excludes.append(temp_model.from_map(k))
        self.table_includes = []
        if m.get('TableIncludes') is not None:
            for k in m.get('TableIncludes'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes()
                self.table_includes.append(temp_model.from_map(k))
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key.
        self.key = key
        # The tag value that corresponds to the tag key.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeSynchronizationJobsResponseBodySynchronizationInstances(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        data_initialization: str = None,
        data_initialization_status: DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus = None,
        data_synchronization_status: DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus = None,
        delay: str = None,
        destination_endpoint: DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint = None,
        error_message: str = None,
        expire_time: str = None,
        instance_create_time: str = None,
        job_create_time: str = None,
        pay_type: str = None,
        performance: DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance = None,
        precheck_status: DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus = None,
        source_endpoint: DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint = None,
        status: str = None,
        structure_initialization: str = None,
        structure_initialization_status: DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus = None,
        synchronization_direction: str = None,
        synchronization_job_class: str = None,
        synchronization_job_id: str = None,
        synchronization_job_name: str = None,
        synchronization_objects: List[DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects] = None,
        tags: List[DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags] = None,
    ):
        # The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd* *HH:mm:ss*.0 format (UTC+8).
        self.create_time = create_time
        # Indicates whether full data synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.data_initialization = data_initialization
        # The status of full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The status of incremental data synchronization.
        # 
        # >  This parameter and its sub-parameters are no longer available.
        self.data_synchronization_status = data_synchronization_status
        # The synchronization latency, in seconds.
        self.delay = delay
        # The connection settings of the destination instance.
        self.destination_endpoint = destination_endpoint
        # The error message returned if data synchronization failed.
        self.error_message = error_message
        # The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        # 
        # >  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.
        self.expire_time = expire_time
        # The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.instance_create_time = instance_create_time
        # The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
        self.job_create_time = job_create_time
        # The billing method of the data synchronization instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.pay_type = pay_type
        # The performance of the data synchronization instance.
        self.performance = performance
        # The precheck status.
        self.precheck_status = precheck_status
        # The connection settings of the source instance.
        self.source_endpoint = source_endpoint
        # The status of the data synchronization task. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Initializing**: The task is performing initial synchronization.
        # *   **InitializeFailed**: Initial synchronization failed.
        # *   **Synchronizing**: The task is synchronizing data.
        # *   **Failed**: The task failed to synchronize data.
        # *   **Suspending**: The task is paused.
        # *   **Modifying**: The objects in the task are being modified.
        # *   **Finished**: The task is completed.
        self.status = status
        # Indicates whether schema synchronization is performed. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.structure_initialization = structure_initialization
        # The status of schema synchronization.
        self.structure_initialization_status = structure_initialization_status
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        self.synchronization_direction = synchronization_direction
        # The specification of the data synchronization instance.
        self.synchronization_job_class = synchronization_job_class
        # The ID of the data synchronization instance.
        self.synchronization_job_id = synchronization_job_id
        # The name of the data synchronization task.
        self.synchronization_job_name = synchronization_job_name
        # The objects that are synchronized by the task.
        self.synchronization_objects = synchronization_objects
        # The collection of tags.
        self.tags = tags

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.destination_endpoint:
            self.destination_endpoint.validate()
        if self.performance:
            self.performance.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()
        if self.synchronization_objects:
            for k in self.synchronization_objects:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.destination_endpoint is not None:
            result['DestinationEndpoint'] = self.destination_endpoint.to_map()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.instance_create_time is not None:
            result['InstanceCreateTime'] = self.instance_create_time
        if self.job_create_time is not None:
            result['JobCreateTime'] = self.job_create_time
        if self.pay_type is not None:
            result['PayType'] = self.pay_type
        if self.performance is not None:
            result['Performance'] = self.performance.to_map()
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_class is not None:
            result['SynchronizationJobClass'] = self.synchronization_job_class
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_job_name is not None:
            result['SynchronizationJobName'] = self.synchronization_job_name
        result['SynchronizationObjects'] = []
        if self.synchronization_objects is not None:
            for k in self.synchronization_objects:
                result['SynchronizationObjects'].append(k.to_map() if k else None)
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('DestinationEndpoint') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint()
            self.destination_endpoint = temp_model.from_map(m['DestinationEndpoint'])
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('InstanceCreateTime') is not None:
            self.instance_create_time = m.get('InstanceCreateTime')
        if m.get('JobCreateTime') is not None:
            self.job_create_time = m.get('JobCreateTime')
        if m.get('PayType') is not None:
            self.pay_type = m.get('PayType')
        if m.get('Performance') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance()
            self.performance = temp_model.from_map(m['Performance'])
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('SourceEndpoint') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobClass') is not None:
            self.synchronization_job_class = m.get('SynchronizationJobClass')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationJobName') is not None:
            self.synchronization_job_name = m.get('SynchronizationJobName')
        self.synchronization_objects = []
        if m.get('SynchronizationObjects') is not None:
            for k in m.get('SynchronizationObjects'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects()
                self.synchronization_objects.append(temp_model.from_map(k))
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags()
                self.tags.append(temp_model.from_map(k))
        return self


class DescribeSynchronizationJobsResponseBody(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        synchronization_instances: List[DescribeSynchronizationJobsResponseBodySynchronizationInstances] = None,
        total_record_count: int = None,
    ):
        # The page number of the returned page.
        self.page_number = page_number
        # The maximum number of entries that can be displayed on the current page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # The list of data synchronization instances and the details of each instance.
        self.synchronization_instances = synchronization_instances
        # The total number of data synchronization instances that belong to your Alibaba Cloud account.
        self.total_record_count = total_record_count

    def validate(self):
        if self.synchronization_instances:
            for k in self.synchronization_instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SynchronizationInstances'] = []
        if self.synchronization_instances is not None:
            for k in self.synchronization_instances:
                result['SynchronizationInstances'].append(k.to_map() if k else None)
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.synchronization_instances = []
        if m.get('SynchronizationInstances') is not None:
            for k in m.get('SynchronizationInstances'):
                temp_model = DescribeSynchronizationJobsResponseBodySynchronizationInstances()
                self.synchronization_instances.append(temp_model.from_map(k))
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class DescribeSynchronizationJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeSynchronizationObjectModifyStatusRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        task_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        self.owner_id = owner_id
        # The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The task ID, which is returned after you call the [ModifySynchronizationObject](https://help.aliyun.com/document_detail/49451.html) operation to modify the objects to be synchronized.
        # 
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if full data synchronization failed.
        self.error_message = error_message
        # The progress of full data synchronization. Unit: %.
        self.percent = percent
        # The number of records that have been synchronized during full data synchronization.
        self.progress = progress
        # The status of full data synchronization. Valid values:
        # 
        # *   **NotStarted**: Full data synchronization is not started.
        # *   **Migrating**: Full data synchronization is in progress.
        # *   **Failed**: Full data synchronization failed.
        # *   **Finished**: Full data synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus(TeaModel):
    def __init__(
        self,
        delay: str = None,
        error_message: str = None,
        percent: str = None,
        status: str = None,
    ):
        # The synchronization latency, in seconds.
        self.delay = delay
        # The error message returned if incremental data synchronization failed.
        self.error_message = error_message
        # The progress of incremental data synchronization. Unit: %.
        self.percent = percent
        # The status of incremental data synchronization. Valid values:
        # 
        # *   **NotStarted**: Incremental data synchronization is not started.
        # *   **Migrating**: Incremental data synchronization is in progress.
        # *   **Failed**: Incremental data synchronization failed.
        # *   **Finished**: Incremental data synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delay is not None:
            result['Delay'] = self.delay
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Delay') is not None:
            self.delay = m.get('Delay')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail(TeaModel):
    def __init__(
        self,
        check_status: str = None,
        error_message: str = None,
        item_name: str = None,
        repair_method: str = None,
    ):
        # The precheck result. Valid values:
        # 
        # *   Success: The task passed the precheck.
        # *   Failed: The task failed to pass the precheck.
        self.check_status = check_status
        # The error message returned if the task failed to pass the precheck.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
        self.error_message = error_message
        # The name of the precheck item.
        self.item_name = item_name
        # The method to fix the precheck failure.
        # 
        # >  This parameter is returned only if the return value of the **CheckStatus** parameter is Failed.
        self.repair_method = repair_method

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['CheckStatus'] = self.check_status
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.repair_method is not None:
            result['RepairMethod'] = self.repair_method
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckStatus') is not None:
            self.check_status = m.get('CheckStatus')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('RepairMethod') is not None:
            self.repair_method = m.get('RepairMethod')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus(TeaModel):
    def __init__(
        self,
        detail: List[DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail] = None,
        percent: str = None,
        status: str = None,
    ):
        # The result of each precheck item.
        self.detail = detail
        # The precheck progress. Unit: %.
        self.percent = percent
        # The precheck status.
        self.status = status

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus(TeaModel):
    def __init__(
        self,
        error_message: str = None,
        percent: str = None,
        progress: str = None,
        status: str = None,
    ):
        # The error message returned if schema synchronization failed.
        self.error_message = error_message
        # The progress of schema synchronization. Unit: %.
        self.percent = percent
        # The number of tables whose schemas have been synchronized.
        self.progress = progress
        # The status of schema synchronization. Valid values:
        # 
        # *   **NotStarted**: Schema synchronization is not started.
        # *   **Migrating**: Schema synchronization is in progress.
        # *   **Failed**: Schema synchronization failed.
        # *   **Finished**: Schema synchronization is completed.
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.percent is not None:
            result['Percent'] = self.percent
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('Percent') is not None:
            self.percent = m.get('Percent')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeSynchronizationObjectModifyStatusResponseBody(TeaModel):
    def __init__(
        self,
        data_initialization_status: DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus = None,
        data_synchronization_status: DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus = None,
        err_code: str = None,
        err_message: str = None,
        error_message: str = None,
        precheck_status: DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus = None,
        request_id: str = None,
        status: str = None,
        structure_initialization_status: DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus = None,
        success: str = None,
    ):
        # The status of full data synchronization.
        self.data_initialization_status = data_initialization_status
        # The status of incremental data synchronization.
        # 
        # >  This parameter and its sub-parameters will be removed in the future.
        self.data_synchronization_status = data_synchronization_status
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The error message returned if the task failed to modify the objects to be synchronized.
        self.error_message = error_message
        # The precheck status.
        self.precheck_status = precheck_status
        # The ID of the request.
        self.request_id = request_id
        # The status of the task that changes the objects to be synchronized. Valid values:
        # 
        # *   **NotStarted**: The task is not started.
        # *   **Prechecking**: The task is being prechecked.
        # *   **PrecheckFailed**: The task failed to pass the precheck.
        # *   **Migrating**: The task is running.
        # *   **Failed**: The task failed.
        # *   **Finished**: The task is completed.
        self.status = status
        # The status of schema synchronization.
        self.structure_initialization_status = structure_initialization_status
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        if self.data_initialization_status:
            self.data_initialization_status.validate()
        if self.data_synchronization_status:
            self.data_synchronization_status.validate()
        if self.precheck_status:
            self.precheck_status.validate()
        if self.structure_initialization_status:
            self.structure_initialization_status.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_initialization_status is not None:
            result['DataInitializationStatus'] = self.data_initialization_status.to_map()
        if self.data_synchronization_status is not None:
            result['DataSynchronizationStatus'] = self.data_synchronization_status.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.error_message is not None:
            result['ErrorMessage'] = self.error_message
        if self.precheck_status is not None:
            result['PrecheckStatus'] = self.precheck_status.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.structure_initialization_status is not None:
            result['StructureInitializationStatus'] = self.structure_initialization_status.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataInitializationStatus') is not None:
            temp_model = DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus()
            self.data_initialization_status = temp_model.from_map(m['DataInitializationStatus'])
        if m.get('DataSynchronizationStatus') is not None:
            temp_model = DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus()
            self.data_synchronization_status = temp_model.from_map(m['DataSynchronizationStatus'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('ErrorMessage') is not None:
            self.error_message = m.get('ErrorMessage')
        if m.get('PrecheckStatus') is not None:
            temp_model = DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus()
            self.precheck_status = temp_model.from_map(m['PrecheckStatus'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StructureInitializationStatus') is not None:
            temp_model = DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus()
            self.structure_initialization_status = temp_model.from_map(m['StructureInitializationStatus'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeSynchronizationObjectModifyStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeSynchronizationObjectModifyStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeSynchronizationObjectModifyStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagKeysRequest(TeaModel):
    def __init__(
        self,
        category: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
    ):
        # The type of the tag. Valid values:
        # 
        # *   **Custom**: The tag is added by a user.
        # *   **System**: The tag is added by the system.
        # 
        # >  By default, if the parameter is left empty, custom tags and system tags are returned.
        self.category = category
        # The number of the page to return. Pages start from page 1. Default value: 1. This parameter is used together with PageSize.
        self.page_number = page_number
        # The number of tags to return on each page if the DTS instance has multiple tags. Default value: 20.
        self.page_size = page_size
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        self.resource_id = resource_id
        # The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.
        self.resource_type = resource_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class DescribeTagKeysResponseBody(TeaModel):
    def __init__(
        self,
        category: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        tag_keys: List[str] = None,
        total_count: int = None,
    ):
        # The type of the tag.
        self.category = category
        # The start page of the returned pages.
        self.page_number = page_number
        # The number of tags returned per page.
        self.page_size = page_size
        # The ID of the request.
        self.request_id = request_id
        # The key of the tag.
        self.tag_keys = tag_keys
        # The total number of returned tag keys.
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tag_keys is not None:
            result['TagKeys'] = self.tag_keys
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TagKeys') is not None:
            self.tag_keys = m.get('TagKeys')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeTagKeysResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTagKeysResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagKeysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagValuesRequest(TeaModel):
    def __init__(
        self,
        category: str = None,
        key: str = None,
        page_number: int = None,
        page_size: int = None,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: str = None,
        resource_type: str = None,
    ):
        # The type of the tag key. Valid values:
        # 
        # *   **Custom**: The tag key is created by users.
        # *   **System**: The tag key is created by the system.
        # 
        # >  By default, if the parameter is left empty, both custom tag keys and system tag keys are returned.
        self.category = category
        # The tag key.
        # 
        # >  This parameter is required.
        self.key = key
        # The page number of the start page to return for a tag key that has multiple values. The valid value ranges from 1 to the maximum value of the INTEGER data type. This parameter is often used with the PageSize parameter. Default value: 1.
        self.page_number = page_number
        # The number of tag values to return each time for a tag key that has multiple values. Default value: 20.
        self.page_size = page_size
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  If this parameter is left empty, the values of all tag keys of the current user are returned.
        self.resource_id = resource_id
        # The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.
        self.resource_type = resource_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.key is not None:
            result['Key'] = self.key
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class DescribeTagValuesResponseBody(TeaModel):
    def __init__(
        self,
        category: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        tag_values: List[str] = None,
        total_count: int = None,
    ):
        # The type of the tag key.
        self.category = category
        # The start page of the returned pages.
        self.page_number = page_number
        # The number of tag values returned on each page.
        self.page_size = page_size
        # The ID of the request.
        self.request_id = request_id
        # The tag values that are associated with the tag key.
        self.tag_values = tag_values
        # The total number of tag values that are associated with the tag key.
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tag_values is not None:
            result['TagValues'] = self.tag_values
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TagValues') is not None:
            self.tag_values = m.get('TagValues')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class DescribeTagValuesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTagValuesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagValuesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DetachGadInstanceDbMemberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        slave_db_instance_id: str = None,
    ):
        self.instance_id = instance_id
        self.owner_id = owner_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.slave_db_instance_id = slave_db_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.slave_db_instance_id is not None:
            result['SlaveDbInstanceId'] = self.slave_db_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SlaveDbInstanceId') is not None:
            self.slave_db_instance_id = m.get('SlaveDbInstanceId')
        return self


class DetachGadInstanceDbMemberResponseBody(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        instance_id: str = None,
        instance_name: str = None,
        region_id: str = None,
        request_id: str = None,
        resource_group_id: str = None,
        slave_db_instance_id: str = None,
        success: str = None,
    ):
        self.create_time = create_time
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.region_id = region_id
        self.request_id = request_id
        self.resource_group_id = resource_group_id
        self.slave_db_instance_id = slave_db_instance_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.slave_db_instance_id is not None:
            result['SlaveDbInstanceId'] = self.slave_db_instance_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SlaveDbInstanceId') is not None:
            self.slave_db_instance_id = m.get('SlaveDbInstanceId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DetachGadInstanceDbMemberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DetachGadInstanceDbMemberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DetachGadInstanceDbMemberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InitDtsRdsInstanceRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        endpoint_cen_id: str = None,
        endpoint_instance_id: str = None,
        endpoint_instance_type: str = None,
        endpoint_region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the data synchronization task.
        self.dts_instance_id = dts_instance_id
        # If the node is a self-managed MySQL database that is connected over CEN, you must specify the ID of the CEN instance.
        # 
        # > You must specify the **EndpointRegion** and **EndpointInstanceId** parameters or the EndpointCenId parameter based on the type of the node.
        self.endpoint_cen_id = endpoint_cen_id
        # If the node is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
        # 
        # > *   You must also specify the **EndpointRegion** parameter.
        # >*   You must specify the EndpointInstanceId parameter or the **EndpointCenId** parameter based on the type of the node.
        self.endpoint_instance_id = endpoint_instance_id
        # The type of the node. Valid values:
        # 
        # *   **RDS**: an ApsaraDB RDS for MySQL instance
        # *   **CEN**: a self-managed MySQL database that is connected over CEN
        self.endpoint_instance_type = endpoint_instance_type
        # If the node is an ApsaraDB RDS for MySQL instance, you must specify the region in which the ApsaraDB RDS for MySQL instance resides.
        # 
        # > *   You must also specify the **EndpointInstanceId** parameter.
        # >*   You must specify the EndpointRegion parameter or the **EndpointCenId** parameter based on the type of the node.
        self.endpoint_region = endpoint_region
        # The ID of the region in which the active geo-redundancy database cluster resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.endpoint_cen_id is not None:
            result['EndpointCenId'] = self.endpoint_cen_id
        if self.endpoint_instance_id is not None:
            result['EndpointInstanceId'] = self.endpoint_instance_id
        if self.endpoint_instance_type is not None:
            result['EndpointInstanceType'] = self.endpoint_instance_type
        if self.endpoint_region is not None:
            result['EndpointRegion'] = self.endpoint_region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('EndpointCenId') is not None:
            self.endpoint_cen_id = m.get('EndpointCenId')
        if m.get('EndpointInstanceId') is not None:
            self.endpoint_instance_id = m.get('EndpointInstanceId')
        if m.get('EndpointInstanceType') is not None:
            self.endpoint_instance_type = m.get('EndpointInstanceType')
        if m.get('EndpointRegion') is not None:
            self.endpoint_region = m.get('EndpointRegion')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class InitDtsRdsInstanceResponseBody(TeaModel):
    def __init__(
        self,
        admin_account: str = None,
        admin_password: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The built-in account that is used by DTS to connect to the node.
        self.admin_account = admin_account
        # The password of the built-in account.
        self.admin_password = admin_password
        # The error code returned if the request fails.
        self.err_code = err_code
        # The error message returned if the request fails.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin_account is not None:
            result['AdminAccount'] = self.admin_account
        if self.admin_password is not None:
            result['AdminPassword'] = self.admin_password
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AdminAccount') is not None:
            self.admin_account = m.get('AdminAccount')
        if m.get('AdminPassword') is not None:
            self.admin_password = m.get('AdminPassword')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InitDtsRdsInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InitDtsRdsInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InitDtsRdsInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDedicatedClusterRequest(TeaModel):
    def __init__(
        self,
        order_column: str = None,
        order_direction: str = None,
        owner_id: str = None,
        page_number: int = None,
        page_size: int = None,
        params: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        state: str = None,
        type: str = None,
    ):
        # The basis on which the retrieved entries are sorted if multiple DTS dedicated clusters are returned. Valid values:
        # 
        # *   **gmtCreated**: the time when a cluster was created.
        # *   **orderCount**: the number of nodes in a cluster.
        self.order_column = order_column
        # The order in which you want to sort the retrieved entries. Valid values:
        # 
        # *   asc: sorts the retrieved entries in ascending order. This is the default value.
        # *   desc: sorts the retrieved entries in descending order.
        self.order_direction = order_direction
        self.owner_id = owner_id
        # The number of the page to return. The value of this parameter must be an integer that is greater than 0. Default value: **1**.
        self.page_number = page_number
        # The number of clusters to return on each page.
        self.page_size = page_size
        # The content of the query condition.
        # 
        # >  You must set the **Type parameter** to specify the type of the query condition.
        self.params = params
        # The ID of the region.
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # The status of the cluster. Valid values:
        # 
        # *   **init**: The cluster is being initialized.
        # *   **schedule**: The cluster is pending scheduling.
        # *   **running**: The cluster is running.
        # *   **upgrade**: The cluster is being upgraded.
        # *   **downgrade**: The cluster is being downgraded.
        # *   **locked**: The cluster is locked.
        # *   **releasing**: The cluster is being released.
        # *   **released**: The cluster is released.
        self.state = state
        # The type of the query condition. Valid values:
        # 
        # *   **NAME**: the name of the cluster.
        # *   **INSTANCE**: the ID of a cluster instance.
        # *   **DEDICAETEDCLUSTERID**: the ID of a dedicated cluster.
        # 
        # >  You must specify the query condition by using the **Params** parameter.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_column is not None:
            result['OrderColumn'] = self.order_column
        if self.order_direction is not None:
            result['OrderDirection'] = self.order_direction
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.params is not None:
            result['Params'] = self.params
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.state is not None:
            result['State'] = self.state
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderColumn') is not None:
            self.order_column = m.get('OrderColumn')
        if m.get('OrderDirection') is not None:
            self.order_direction = m.get('OrderDirection')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus(TeaModel):
    def __init__(
        self,
        cpu_utilization: int = None,
        dedicated_cluster_id: str = None,
        dedicated_cluster_name: str = None,
        disk_utilization: int = None,
        dts_instance_id: str = None,
        du: int = None,
        du_utilization: int = None,
        gmt_created: int = None,
        mem_utilization: int = None,
        node_count: int = None,
        oversold_du: int = None,
        region_id: str = None,
        state: str = None,
        total_cpu_core: int = None,
        total_disk_gbsize: int = None,
        total_mem_gbsize: int = None,
        used_cpu_core: int = None,
        used_disk_gbsize: int = None,
        used_du: int = None,
        used_mem_gbsize: int = None,
    ):
        # The CPU utilization, in percentage.
        self.cpu_utilization = cpu_utilization
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The name of the cluster.
        self.dedicated_cluster_name = dedicated_cluster_name
        # The disk usage.
        self.disk_utilization = disk_utilization
        # The ID of the DTS instance.
        self.dts_instance_id = dts_instance_id
        # The number of DTS units (DUs).
        self.du = du
        # The DU usage, in percentage.
        self.du_utilization = du_utilization
        # The time when the cluster was created.
        self.gmt_created = gmt_created
        # The memory usage.
        self.mem_utilization = mem_utilization
        # The number of nodes in the cluster.
        self.node_count = node_count
        # The number of over-provisioned DUs.
        self.oversold_du = oversold_du
        # The ID of the region in which the DTS instance resides.
        self.region_id = region_id
        # The status of the cluster. Valid values:
        # 
        # *   **init**: The cluster is being initialized.
        # *   **schedule**: The cluster is pending scheduling.
        # *   **running**: The cluster is running.
        # *   **upgrade**: The cluster is being upgraded.
        # *   **downgrade**: The cluster is being downgraded.
        # *   **locked**: The cluster is locked.
        # *   **releasing**: The cluster is being released.
        # *   **released**: The cluster is released.
        self.state = state
        # The total number of CPU cores.
        self.total_cpu_core = total_cpu_core
        # The total disk capacity. Unit: GB.
        self.total_disk_gbsize = total_disk_gbsize
        # The total memory capacity. Unit: GB.
        self.total_mem_gbsize = total_mem_gbsize
        # The number of used CPU cores.
        self.used_cpu_core = used_cpu_core
        # The used disk capacity. Unit: GB.
        self.used_disk_gbsize = used_disk_gbsize
        # The number of used DUs.
        self.used_du = used_du
        # The used memory capacity. Unit: GB.
        self.used_mem_gbsize = used_mem_gbsize

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cpu_utilization is not None:
            result['CpuUtilization'] = self.cpu_utilization
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dedicated_cluster_name is not None:
            result['DedicatedClusterName'] = self.dedicated_cluster_name
        if self.disk_utilization is not None:
            result['DiskUtilization'] = self.disk_utilization
        if self.dts_instance_id is not None:
            result['DtsInstanceID'] = self.dts_instance_id
        if self.du is not None:
            result['Du'] = self.du
        if self.du_utilization is not None:
            result['DuUtilization'] = self.du_utilization
        if self.gmt_created is not None:
            result['GmtCreated'] = self.gmt_created
        if self.mem_utilization is not None:
            result['MemUtilization'] = self.mem_utilization
        if self.node_count is not None:
            result['NodeCount'] = self.node_count
        if self.oversold_du is not None:
            result['OversoldDu'] = self.oversold_du
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.state is not None:
            result['State'] = self.state
        if self.total_cpu_core is not None:
            result['TotalCpuCore'] = self.total_cpu_core
        if self.total_disk_gbsize is not None:
            result['TotalDiskGBSize'] = self.total_disk_gbsize
        if self.total_mem_gbsize is not None:
            result['TotalMemGBSize'] = self.total_mem_gbsize
        if self.used_cpu_core is not None:
            result['UsedCpuCore'] = self.used_cpu_core
        if self.used_disk_gbsize is not None:
            result['UsedDiskGBSize'] = self.used_disk_gbsize
        if self.used_du is not None:
            result['UsedDu'] = self.used_du
        if self.used_mem_gbsize is not None:
            result['UsedMemGBSize'] = self.used_mem_gbsize
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CpuUtilization') is not None:
            self.cpu_utilization = m.get('CpuUtilization')
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DedicatedClusterName') is not None:
            self.dedicated_cluster_name = m.get('DedicatedClusterName')
        if m.get('DiskUtilization') is not None:
            self.disk_utilization = m.get('DiskUtilization')
        if m.get('DtsInstanceID') is not None:
            self.dts_instance_id = m.get('DtsInstanceID')
        if m.get('Du') is not None:
            self.du = m.get('Du')
        if m.get('DuUtilization') is not None:
            self.du_utilization = m.get('DuUtilization')
        if m.get('GmtCreated') is not None:
            self.gmt_created = m.get('GmtCreated')
        if m.get('MemUtilization') is not None:
            self.mem_utilization = m.get('MemUtilization')
        if m.get('NodeCount') is not None:
            self.node_count = m.get('NodeCount')
        if m.get('OversoldDu') is not None:
            self.oversold_du = m.get('OversoldDu')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('TotalCpuCore') is not None:
            self.total_cpu_core = m.get('TotalCpuCore')
        if m.get('TotalDiskGBSize') is not None:
            self.total_disk_gbsize = m.get('TotalDiskGBSize')
        if m.get('TotalMemGBSize') is not None:
            self.total_mem_gbsize = m.get('TotalMemGBSize')
        if m.get('UsedCpuCore') is not None:
            self.used_cpu_core = m.get('UsedCpuCore')
        if m.get('UsedDiskGBSize') is not None:
            self.used_disk_gbsize = m.get('UsedDiskGBSize')
        if m.get('UsedDu') is not None:
            self.used_du = m.get('UsedDu')
        if m.get('UsedMemGBSize') is not None:
            self.used_mem_gbsize = m.get('UsedMemGBSize')
        return self


class ListDedicatedClusterResponseBodyDedicatedClusterStatusList(TeaModel):
    def __init__(
        self,
        dedicated_cluster_status: List[ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus] = None,
    ):
        self.dedicated_cluster_status = dedicated_cluster_status

    def validate(self):
        if self.dedicated_cluster_status:
            for k in self.dedicated_cluster_status:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DedicatedClusterStatus'] = []
        if self.dedicated_cluster_status is not None:
            for k in self.dedicated_cluster_status:
                result['DedicatedClusterStatus'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dedicated_cluster_status = []
        if m.get('DedicatedClusterStatus') is not None:
            for k in m.get('DedicatedClusterStatus'):
                temp_model = ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus()
                self.dedicated_cluster_status.append(temp_model.from_map(k))
        return self


class ListDedicatedClusterResponseBody(TeaModel):
    def __init__(
        self,
        dedicated_cluster_status_list: ListDedicatedClusterResponseBodyDedicatedClusterStatusList = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        page_number: int = None,
        page_record_count: int = None,
        request_id: str = None,
        success: str = None,
        total_record_count: int = None,
    ):
        # The statuses of all clusters.
        self.dedicated_cluster_status_list = dedicated_cluster_status_list
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.
        self.page_number = page_number
        # The number of entries returned per page.
        self.page_record_count = page_record_count
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success
        # The total number of clusters that meet the query condition.
        self.total_record_count = total_record_count

    def validate(self):
        if self.dedicated_cluster_status_list:
            self.dedicated_cluster_status_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_status_list is not None:
            result['DedicatedClusterStatusList'] = self.dedicated_cluster_status_list.to_map()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_record_count is not None:
            result['PageRecordCount'] = self.page_record_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_record_count is not None:
            result['TotalRecordCount'] = self.total_record_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterStatusList') is not None:
            temp_model = ListDedicatedClusterResponseBodyDedicatedClusterStatusList()
            self.dedicated_cluster_status_list = temp_model.from_map(m['DedicatedClusterStatusList'])
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageRecordCount') is not None:
            self.page_record_count = m.get('PageRecordCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalRecordCount') is not None:
            self.total_record_count = m.get('TotalRecordCount')
        return self


class ListDedicatedClusterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListDedicatedClusterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDedicatedClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The tag key.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
        # *   You must specify at least one of the **ResourceId.N** and Tag.N.Key parameters. The parameters cannot be empty strings.
        self.key = key
        # The tag value.
        # 
        # > 
        # *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
        # *   This parameter can be an empty string.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[ListTagResourcesRequestTag] = None,
    ):
        # The query token.
        # 
        # >  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.
        self.next_token = next_token
        # The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The instance ID for data migration, synchronization, and subscription, which can be obtained by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).  > - N indicates the Nth instance ID being passed. For example, ResourceId.0 represents the first instance ID; ResourceId.1 represents the second instance ID. Up to 50 instance IDs can be queried simultaneously. - At least one of this parameter and **Tag.N.Key** must be provided.
        self.resource_id = resource_id
        # The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
        # 
        # This parameter is required.
        self.resource_type = resource_type
        # The value corresponding to the tag key.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBodyTagResourcesTagResource(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        # The ID of the DTS instance.
        self.resource_id = resource_id
        # The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
        self.resource_type = resource_type
        # The tag key.
        self.tag_key = tag_key
        # The tag value that corresponds to the tag key.
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        tag_resource: List[ListTagResourcesResponseBodyTagResourcesTagResource] = None,
    ):
        self.tag_resource = tag_resource

    def validate(self):
        if self.tag_resource:
            for k in self.tag_resource:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['TagResource'] = []
        if self.tag_resource is not None:
            for k in self.tag_resource:
                result['TagResource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag_resource = []
        if m.get('TagResource') is not None:
            for k in m.get('TagResource'):
                temp_model = ListTagResourcesResponseBodyTagResourcesTagResource()
                self.tag_resource.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        next_token: str = None,
        request_id: str = None,
        success: bool = None,
        tag_resources: ListTagResourcesResponseBodyTagResources = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The query token.
        # 
        # >  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.
        self.next_token = next_token
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The collection of tags.
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            self.tag_resources.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.tag_resources is not None:
            result['TagResources'] = self.tag_resources.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TagResources') is not None:
            temp_model = ListTagResourcesResponseBodyTagResources()
            self.tag_resources = temp_model.from_map(m['TagResources'])
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListTagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyConsumerChannelRequest(TeaModel):
    def __init__(
        self,
        consumer_group_id: str = None,
        consumer_group_name: str = None,
        consumer_group_password: str = None,
        consumer_group_user_name: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the consumer group. You can call the [DescribeConsumerChannel](https://help.aliyun.com/document_detail/264169.html) operation to query the consumer group ID.
        # 
        # This parameter is required.
        self.consumer_group_id = consumer_group_id
        # The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.
        self.consumer_group_name = consumer_group_name
        # The new password of the consumer group.
        # 
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        self.consumer_group_password = consumer_group_password
        # The new username of the consumer group.
        # 
        # *   A username can contain one or more of the following character types: uppercase letters, lowercase letters, digits, and underscores (_).
        # *   A username cannot exceed 16 characters in length.
        self.consumer_group_user_name = consumer_group_user_name
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        self.dts_job_id = dts_job_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.consumer_group_id is not None:
            result['ConsumerGroupId'] = self.consumer_group_id
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_password is not None:
            result['ConsumerGroupPassword'] = self.consumer_group_password
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConsumerGroupId') is not None:
            self.consumer_group_id = m.get('ConsumerGroupId')
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupPassword') is not None:
            self.consumer_group_password = m.get('ConsumerGroupPassword')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyConsumerChannelResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyConsumerChannelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyConsumerChannelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyConsumerChannelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyConsumerGroupPasswordRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        consumer_group_id: str = None,
        consumer_group_name: str = None,
        consumer_group_password: str = None,
        consumer_group_user_name: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
        consumer_group_new_password: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The ID of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the consumer group ID.
        # 
        # This parameter is required.
        self.consumer_group_id = consumer_group_id
        # The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.
        self.consumer_group_name = consumer_group_name
        # The new password of the consumer group.
        # 
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_password = consumer_group_password
        # The username of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the username.
        self.consumer_group_user_name = consumer_group_user_name
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id
        # The new password of the consumer group.
        #  
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        # 
        # This parameter is required.
        self.consumer_group_new_password = consumer_group_new_password

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.consumer_group_id is not None:
            result['ConsumerGroupID'] = self.consumer_group_id
        if self.consumer_group_name is not None:
            result['ConsumerGroupName'] = self.consumer_group_name
        if self.consumer_group_password is not None:
            result['ConsumerGroupPassword'] = self.consumer_group_password
        if self.consumer_group_user_name is not None:
            result['ConsumerGroupUserName'] = self.consumer_group_user_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        if self.consumer_group_new_password is not None:
            result['consumerGroupNewPassword'] = self.consumer_group_new_password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ConsumerGroupID') is not None:
            self.consumer_group_id = m.get('ConsumerGroupID')
        if m.get('ConsumerGroupName') is not None:
            self.consumer_group_name = m.get('ConsumerGroupName')
        if m.get('ConsumerGroupPassword') is not None:
            self.consumer_group_password = m.get('ConsumerGroupPassword')
        if m.get('ConsumerGroupUserName') is not None:
            self.consumer_group_user_name = m.get('ConsumerGroupUserName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        if m.get('consumerGroupNewPassword') is not None:
            self.consumer_group_new_password = m.get('consumerGroupNewPassword')
        return self


class ModifyConsumerGroupPasswordResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The current password of the consumer group.
        self.err_code = err_code
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.err_message = err_message
        # The username of the consumer group. You can call the [DescribeConsumerGroup](https://help.aliyun.com/document_detail/122886.html) operation to query the username.
        self.request_id = request_id
        # The new password of the consumer group.
        # 
        # *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
        # *   A password must be 8 to 32 characters in length.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyConsumerGroupPasswordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyConsumerGroupPasswordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyConsumerGroupPasswordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyConsumptionTimestampRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        consumption_timestamp: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The consumption checkpoint. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.
        # 
        # This parameter is required.
        self.consumption_timestamp = consumption_timestamp
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.consumption_timestamp is not None:
            result['ConsumptionTimestamp'] = self.consumption_timestamp
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ConsumptionTimestamp') is not None:
            self.consumption_timestamp = m.get('ConsumptionTimestamp')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class ModifyConsumptionTimestampResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyConsumptionTimestampResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyConsumptionTimestampResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyConsumptionTimestampResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDedicatedClusterRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        dedicated_cluster_name: str = None,
        instance_id: str = None,
        oversold_ratio: int = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the cluster.
        # 
        # >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The name of the cluster.
        self.dedicated_cluster_name = dedicated_cluster_name
        # The ID of the instance.
        # 
        # >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
        self.instance_id = instance_id
        # The overcommit ratio. Unit: %.
        self.oversold_ratio = oversold_ratio
        self.owner_id = owner_id
        # The ID of the region in which the Data Transmission Service (DTS) instance resides.
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dedicated_cluster_name is not None:
            result['DedicatedClusterName'] = self.dedicated_cluster_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.oversold_ratio is not None:
            result['OversoldRatio'] = self.oversold_ratio
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DedicatedClusterName') is not None:
            self.dedicated_cluster_name = m.get('DedicatedClusterName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OversoldRatio') is not None:
            self.oversold_ratio = m.get('OversoldRatio')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyDedicatedClusterResponseBody(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the cluster.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDedicatedClusterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDedicatedClusterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDedicatedClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        db_list: Dict[str, Any] = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        etl_operator_column_reference: str = None,
        file_oss_url: str = None,
        filter_table_name: str = None,
        modify_type_enum: str = None,
        region_id: str = None,
        reserved: str = None,
        resource_group_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # Specifies whether to perform full data migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Specifies whether to perform incremental data migration or synchronization. Valid values:
        # 
        # *   **false**\
        # *   **true**\
        self.data_synchronization = data_synchronization
        # The objects of the data synchronization task after modification. The value must be a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        # 
        # > 
        # 
        # *   The new value of DbList overwrites the original value. Make sure that all the objects that you want to synchronize are specified. Otherwise, some objects may be lost. Specify this parameter with caution.
        # 
        # *   Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
        self.db_list = db_list
        # The ID of the data synchronization instance.
        # 
        # This parameter is required.
        self.dts_instance_id = dts_instance_id
        # The synchronization task ID. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
        self.etl_operator_column_reference = etl_operator_column_reference
        # The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
        self.file_oss_url = file_oss_url
        # The name of the table to be filtered.
        self.filter_table_name = filter_table_name
        # The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
        self.modify_type_enum = modify_type_enum
        # The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to perform schema migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.etl_operator_column_reference is not None:
            result['EtlOperatorColumnReference'] = self.etl_operator_column_reference
        if self.file_oss_url is not None:
            result['FileOssUrl'] = self.file_oss_url
        if self.filter_table_name is not None:
            result['FilterTableName'] = self.filter_table_name
        if self.modify_type_enum is not None:
            result['ModifyTypeEnum'] = self.modify_type_enum
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EtlOperatorColumnReference') is not None:
            self.etl_operator_column_reference = m.get('EtlOperatorColumnReference')
        if m.get('FileOssUrl') is not None:
            self.file_oss_url = m.get('FileOssUrl')
        if m.get('FilterTableName') is not None:
            self.filter_table_name = m.get('FilterTableName')
        if m.get('ModifyTypeEnum') is not None:
            self.modify_type_enum = m.get('ModifyTypeEnum')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobAdvanceRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        db_list: Dict[str, Any] = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        etl_operator_column_reference: str = None,
        file_oss_url_object: BinaryIO = None,
        filter_table_name: str = None,
        modify_type_enum: str = None,
        region_id: str = None,
        reserved: str = None,
        resource_group_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # Specifies whether to perform full data migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Specifies whether to perform incremental data migration or synchronization. Valid values:
        # 
        # *   **false**\
        # *   **true**\
        self.data_synchronization = data_synchronization
        # The objects of the data synchronization task after modification. The value must be a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        # 
        # > 
        # 
        # *   The new value of DbList overwrites the original value. Make sure that all the objects that you want to synchronize are specified. Otherwise, some objects may be lost. Specify this parameter with caution.
        # 
        # *   Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
        self.db_list = db_list
        # The ID of the data synchronization instance.
        # 
        # This parameter is required.
        self.dts_instance_id = dts_instance_id
        # The synchronization task ID. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
        self.etl_operator_column_reference = etl_operator_column_reference
        # The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
        self.file_oss_url_object = file_oss_url_object
        # The name of the table to be filtered.
        self.filter_table_name = filter_table_name
        # The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
        self.modify_type_enum = modify_type_enum
        # The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to perform schema migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.etl_operator_column_reference is not None:
            result['EtlOperatorColumnReference'] = self.etl_operator_column_reference
        if self.file_oss_url_object is not None:
            result['FileOssUrl'] = self.file_oss_url_object
        if self.filter_table_name is not None:
            result['FilterTableName'] = self.filter_table_name
        if self.modify_type_enum is not None:
            result['ModifyTypeEnum'] = self.modify_type_enum
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EtlOperatorColumnReference') is not None:
            self.etl_operator_column_reference = m.get('EtlOperatorColumnReference')
        if m.get('FileOssUrl') is not None:
            self.file_oss_url_object = m.get('FileOssUrl')
        if m.get('FilterTableName') is not None:
            self.filter_table_name = m.get('FilterTableName')
        if m.get('ModifyTypeEnum') is not None:
            self.modify_type_enum = m.get('ModifyTypeEnum')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobShrinkRequest(TeaModel):
    def __init__(
        self,
        client_token: str = None,
        data_initialization: bool = None,
        data_synchronization: bool = None,
        db_list_shrink: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        etl_operator_column_reference: str = None,
        file_oss_url: str = None,
        filter_table_name: str = None,
        modify_type_enum: str = None,
        region_id: str = None,
        reserved: str = None,
        resource_group_id: str = None,
        structure_initialization: bool = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # Specifies whether to perform full data migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.data_initialization = data_initialization
        # Specifies whether to perform incremental data migration or synchronization. Valid values:
        # 
        # *   **false**\
        # *   **true**\
        self.data_synchronization = data_synchronization
        # The objects of the data synchronization task after modification. The value must be a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        # 
        # > 
        # 
        # *   The new value of DbList overwrites the original value. Make sure that all the objects that you want to synchronize are specified. Otherwise, some objects may be lost. Specify this parameter with caution.
        # 
        # *   Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
        self.db_list_shrink = db_list_shrink
        # The ID of the data synchronization instance.
        # 
        # This parameter is required.
        self.dts_instance_id = dts_instance_id
        # The synchronization task ID. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        # The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
        self.etl_operator_column_reference = etl_operator_column_reference
        # The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
        self.file_oss_url = file_oss_url
        # The name of the table to be filtered.
        self.filter_table_name = filter_table_name
        # The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
        self.modify_type_enum = modify_type_enum
        # The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](https://help.aliyun.com/document_detail/176470.html).
        self.reserved = reserved
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to perform schema migration or synchronization. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.structure_initialization = structure_initialization
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.data_initialization is not None:
            result['DataInitialization'] = self.data_initialization
        if self.data_synchronization is not None:
            result['DataSynchronization'] = self.data_synchronization
        if self.db_list_shrink is not None:
            result['DbList'] = self.db_list_shrink
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.etl_operator_column_reference is not None:
            result['EtlOperatorColumnReference'] = self.etl_operator_column_reference
        if self.file_oss_url is not None:
            result['FileOssUrl'] = self.file_oss_url
        if self.filter_table_name is not None:
            result['FilterTableName'] = self.filter_table_name
        if self.modify_type_enum is not None:
            result['ModifyTypeEnum'] = self.modify_type_enum
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.structure_initialization is not None:
            result['StructureInitialization'] = self.structure_initialization
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DataInitialization') is not None:
            self.data_initialization = m.get('DataInitialization')
        if m.get('DataSynchronization') is not None:
            self.data_synchronization = m.get('DataSynchronization')
        if m.get('DbList') is not None:
            self.db_list_shrink = m.get('DbList')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EtlOperatorColumnReference') is not None:
            self.etl_operator_column_reference = m.get('EtlOperatorColumnReference')
        if m.get('FileOssUrl') is not None:
            self.file_oss_url = m.get('FileOssUrl')
        if m.get('FilterTableName') is not None:
            self.filter_table_name = m.get('FilterTableName')
        if m.get('ModifyTypeEnum') is not None:
            self.modify_type_enum = m.get('ModifyTypeEnum')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructureInitialization') is not None:
            self.structure_initialization = m.get('StructureInitialization')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        err_code: str = None,
        err_message: bool = None,
        request_id: str = None,
        status: str = None,
        success: bool = None,
    ):
        # The ID of the DTS task.
        self.dts_job_id = dts_job_id
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        # 
        # >  The data type of this parameter is String. Sample value: **The actual sample value is The request processing has failed due to some unknown error.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # The HTTP status code.
        self.status = status
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobConfigRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        owner_id: str = None,
        parameters: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # DTS job ID, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).
        self.dts_job_id = dts_job_id
        self.owner_id = owner_id
        # The parameters that you want to modify. Specify a JSON string. For more information, see [Parameters](https://help.aliyun.com/document_detail/2536412.html).
        self.parameters = parameters
        # The region where the instance is located. For more details, see [List of Supported Regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parameters is not None:
            result['Parameters'] = self.parameters
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('Parameters') is not None:
            self.parameters = m.get('Parameters')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyDtsJobConfigResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        # request ID
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ModifyDtsJobConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobDedicatedClusterRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        dts_job_ids: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The dedicated cluster ID.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The DTS task IDs. The value can be a JSON array that consists of multiple DTS task IDs. Separate the IDs with commas (,).
        self.dts_job_ids = dts_job_ids
        self.owner_id = owner_id
        # The ID of the region where the DTS instance resides.
        # 
        # > For information about the regions that support dedicated clusters, see [DTS dedicated cluster](https://help.aliyun.com/document_detail/417481.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dts_job_ids is not None:
            result['DtsJobIds'] = self.dts_job_ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DtsJobIds') is not None:
            self.dts_job_ids = m.get('DtsJobIds')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyDtsJobDedicatedClusterResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned by the backend service.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace %s in **ErrMessage**.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobDedicatedClusterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobDedicatedClusterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobDedicatedClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobDuLimitRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        du_limit: int = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The upper limit of DUs for the DTS task.
        # 
        # >  Minimum value: **1**.
        # 
        # This parameter is required.
        self.du_limit = du_limit
        self.owner_id = owner_id
        # The ID of the region in which the DTS instance resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.du_limit is not None:
            result['DuLimit'] = self.du_limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DuLimit') is not None:
            self.du_limit = m.get('DuLimit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyDtsJobDuLimitResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned by the backend service. The number is incremented.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobDuLimitResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobDuLimitResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobDuLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobEndpointRequest(TeaModel):
    def __init__(
        self,
        aliyun_uid: str = None,
        database: str = None,
        dry_run: bool = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        endpoint: str = None,
        endpoint_instance_id: str = None,
        endpoint_instance_type: str = None,
        endpoint_ip: str = None,
        endpoint_port: str = None,
        endpoint_region_id: str = None,
        modify_account: bool = None,
        password: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        role_name: str = None,
        shard_password: str = None,
        shard_username: str = None,
        synchronization_direction: str = None,
        username: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the Alibaba Cloud account (primary account) to which the database instance belongs.
        # >  Passing this parameter indicates that cross-Alibaba Cloud account data synchronization will be performed, and you also need to pass the **RoleName** parameter.
        self.aliyun_uid = aliyun_uid
        # When the database type is **PostgreSQL**, **PolarDB for PostgreSQL**, or **AnalyticDB PostgreSQL**, it represents the database name; when the database type is **MongoDB**, it represents the authentication database name.
        # > This parameter is only available and must be provided when the database type is **PostgreSQL**, **PolarDB for PostgreSQL**, **AnalyticDB PostgreSQL**, or **MongoDB**.
        self.database = database
        # Specifies whether to perform only a precheck. Valid values:
        # 
        # *   **true**: Yes. After the precheck is passed, the database is not changed.
        # *   **false** (default): No. After the precheck is passed, the system changes the original database of the DTS task and runs the task.
        self.dry_run = dry_run
        # The ID of the DTS instance. If this parameter is not provided, **DtsJobId** must be specified.
        self.dts_instance_id = dts_instance_id
        # DTS job ID, which can be queried by calling [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html).
        # > If this parameter is not provided, **DtsInstanceId** must be filled in.
        self.dts_job_id = dts_job_id
        # The database instance to be modified, with values:
        # - **src**: Source database instance. - **dest**: Target database instance.
        # 
        # This parameter is required.
        self.endpoint = endpoint
        # ID of the database instance.
        self.endpoint_instance_id = endpoint_instance_id
        # The type of the database. Valid values:
        # 
        # *   **rds**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, or ApsaraDB RDS for PostgreSQL instance.
        # *   **polardb**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster.
        # *   **mongodb**: ApsaraDB for MongoDB replica set instance.
        # *   **distributed_mongodb**: ApsaraDB for MongoDB sharded cluster instance.
        # *   **greenplum**: AnalyticDB for PostgreSQL instance.
        # *   **kafka**: ApsaraMQ for Kafka instance.
        # *   **ecs**: self-managed database that is hosted on an Elastic Compute Service (ECS) instance. If you set this parameter to ecs, the database must be the supported one.
        # *   **express**: database that is connected over Express Connect. If you set this parameter to express, the database must be the supported one.
        # *   **other**: database that is connected over Internet. If you set this parameter to other, the database must be the supported one.
        # 
        # > 
        # 
        # *   The following types of databases are supported: **MySQL**, **PolarDB for MySQL**, **PostgreSQL**, **PolarDB for PostgreSQL**, **MongoDB**, **SQL Server**, **Kafka**, and **AnalyticDB for PostgreSQL**.
        # 
        # *   If the original database is an ApsaraDB for MongoDB sharded cluster instance, the new database must have the same number of shards as the original database.
        # *   If the database that you want to change is a source **PostgreSQL** database, you must make sure that the latency of the DTS instance is less than 30 seconds and no data is written to the source database during the change. Otherwise, data inconsistency may occur.
        # *   The value of this parameter is case-insensitive.
        # 
        # This parameter is required.
        self.endpoint_instance_type = endpoint_instance_type
        # The IP of the database instance.
        self.endpoint_ip = endpoint_ip
        # port of the database instance.
        self.endpoint_port = endpoint_port
        # The ID of the region in which the database resides.
        self.endpoint_region_id = endpoint_region_id
        # Specifies whether to change the password of the database account. Valid values:
        # 
        # *   **true**\
        # *   **false** (default)
        self.modify_account = modify_account
        # The password of the database account.
        # 
        # >  This parameter is valid only if **ModifyAccount** is set to **true**.
        self.password = password
        # The ID of the region in which the DTS instance resides.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Cross Alibaba Cloud account role name. When performing data synchronization across Alibaba Cloud accounts, this parameter must be passed. For the required permissions and authorization methods for this role, please refer to [How to Configure RAM Authorization for Cross-Account Data Migration or Synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.role_name = role_name
        # The account password of the shard of the ApsaraDB for MongoDB sharded cluster instance.
        # 
        # > 
        # 
        # *   This parameter is valid and required only if the source database is an ApsaraDB for MongoDB sharded cluster instance.
        # 
        # *   This parameter is valid only if **ModifyAccount** is set to **true**.
        self.shard_password = shard_password
        # The account username of the shard of the ApsaraDB for MongoDB sharded cluster instance.
        # 
        # > 
        # 
        # *   This parameter is valid and required only if the source database is an ApsaraDB for MongoDB sharded cluster instance.
        # 
        # *   This parameter is valid only if **ModifyAccount** is set to **true**.
        self.shard_username = shard_username
        # Synchronization direction, with values:
        # - **Forward** (default): Forward. - **Reverse**: Reverse.
        self.synchronization_direction = synchronization_direction
        # The database account.
        # 
        # >  This parameter is valid only if **ModifyAccount** is set to **true**.
        self.username = username
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.database is not None:
            result['Database'] = self.database
        if self.dry_run is not None:
            result['DryRun'] = self.dry_run
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.endpoint_instance_id is not None:
            result['EndpointInstanceId'] = self.endpoint_instance_id
        if self.endpoint_instance_type is not None:
            result['EndpointInstanceType'] = self.endpoint_instance_type
        if self.endpoint_ip is not None:
            result['EndpointIp'] = self.endpoint_ip
        if self.endpoint_port is not None:
            result['EndpointPort'] = self.endpoint_port
        if self.endpoint_region_id is not None:
            result['EndpointRegionId'] = self.endpoint_region_id
        if self.modify_account is not None:
            result['ModifyAccount'] = self.modify_account
        if self.password is not None:
            result['Password'] = self.password
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.shard_password is not None:
            result['ShardPassword'] = self.shard_password
        if self.shard_username is not None:
            result['ShardUsername'] = self.shard_username
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.username is not None:
            result['Username'] = self.username
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('Database') is not None:
            self.database = m.get('Database')
        if m.get('DryRun') is not None:
            self.dry_run = m.get('DryRun')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('EndpointInstanceId') is not None:
            self.endpoint_instance_id = m.get('EndpointInstanceId')
        if m.get('EndpointInstanceType') is not None:
            self.endpoint_instance_type = m.get('EndpointInstanceType')
        if m.get('EndpointIp') is not None:
            self.endpoint_ip = m.get('EndpointIp')
        if m.get('EndpointPort') is not None:
            self.endpoint_port = m.get('EndpointPort')
        if m.get('EndpointRegionId') is not None:
            self.endpoint_region_id = m.get('EndpointRegionId')
        if m.get('ModifyAccount') is not None:
            self.modify_account = m.get('ModifyAccount')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('ShardPassword') is not None:
            self.shard_password = m.get('ShardPassword')
        if m.get('ShardUsername') is not None:
            self.shard_username = m.get('ShardUsername')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobEndpointResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # Error code returned when the call fails.
        self.err_code = err_code
        # Error message returned when the call fails.
        self.err_message = err_message
        # Status code.
        self.http_status_code = http_status_code
        # request ID
        self.request_id = request_id
        # Whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobEndpointResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobEndpointResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobEndpointResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobNameRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        dts_job_name: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The new name of the DTS task.
        # 
        # >  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.
        # 
        # This parameter is required.
        self.dts_job_name = dts_job_name
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dts_job_name is not None:
            result['DtsJobName'] = self.dts_job_name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DtsJobName') is not None:
            self.dts_job_name = m.get('DtsJobName')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobNameResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code. This parameter is going to be removed in the future.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.
        # 
        # >  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobNameResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDtsJobPasswordRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        endpoint: str = None,
        password: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        user_name: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking instance.
        # 
        # >  You can call the [DescribeMigrationJobs](https://help.aliyun.com/document_detail/208139.html), [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html), or [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID
        self.dts_instance_id = dts_instance_id
        # The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The database to which the password belongs. Valid values:
        # 
        # *   **src**: source database.
        # *   **dest**: destination database.
        # 
        # >  This parameter is required.
        self.endpoint = endpoint
        # The new password.
        # 
        # >  This parameter is required and cannot be set to a value that is the same as the current password.
        self.password = password
        # The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Synchronization direction, with values:
        # - **Forward** (default): Forward. - **Reverse**: Reverse.
        self.synchronization_direction = synchronization_direction
        # The account of the source or destination database.
        # 
        # >  This parameter is required.
        self.user_name = user_name
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint
        if self.password is not None:
            result['Password'] = self.password
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('Endpoint') is not None:
            self.endpoint = m.get('Endpoint')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class ModifyDtsJobPasswordResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.
        # 
        # >  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message that is returned if the request failed.
        self.err_message = err_message
        # The status code returned.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDtsJobPasswordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDtsJobPasswordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDtsJobPasswordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDynamicConfigRequest(TeaModel):
    def __init__(
        self,
        config_list: str = None,
        dts_job_id: str = None,
        enable_limit: bool = None,
        job_code: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The specific throttling configuration.
        # 
        # *   **dts.datamove.blaster.qps.max**: The rate at which queries are made to the source database per second.
        # *   **dts.datamove.source.rps.max**: The number of rows that are fully synchronized or migrated per second.
        # *   **dts.datamove.source.bps.max**: the amount of data processed per second for full synchronization or migration. Unit: MB.
        # 
        # > 
        # 
        # *   If you set the **JobCode** parameter to **03**, you need to specify **true** for the **EnableLimit** parameter. Otherwise, the configuration cannot take effect.
        # 
        # *   If you set the **JobCode** parameter to **04** or **07**, you only need to specify the **dts.datamove.source.rps.max** and **dts.datamove.source.bps.max** parameters.
        # *   A value of \\*\\*-1\\*\\* indicates no rate limit.
        self.config_list = config_list
        # The ID of the data migration or synchronization task.
        # 
        # >  You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # Specifies whether to enable throttling for data synchronization or migration. Valid values: **true** and **false**.
        # 
        # >  Only needs to be configured when the **JobCode** parameter is set to **03**.
        self.enable_limit = enable_limit
        # The task type. Valid values:
        # 
        # *   **03**: a full data synchronization or full data migration task.
        # *   **04**: an incremental data migration task.
        # *   **07**: an incremental data synchronization task.
        # 
        # This parameter is required.
        self.job_code = job_code
        # The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_list is not None:
            result['ConfigList'] = self.config_list
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.enable_limit is not None:
            result['EnableLimit'] = self.enable_limit
        if self.job_code is not None:
            result['JobCode'] = self.job_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConfigList') is not None:
            self.config_list = m.get('ConfigList')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('EnableLimit') is not None:
            self.enable_limit = m.get('EnableLimit')
        if m.get('JobCode') is not None:
            self.job_code = m.get('JobCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyDynamicConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the **ErrMessage** parameter.
        # 
        # >  If the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** value is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request fails.
        self.err_code = err_code
        # The error message returned if the request fails.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDynamicConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDynamicConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDynamicConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyGadInstanceNameRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_name: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.owner_id = owner_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ModifyGadInstanceNameResponseBody(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        instance_id: str = None,
        instance_name: str = None,
        region_id: str = None,
        request_id: str = None,
        resource_group_id: str = None,
        success: str = None,
    ):
        self.create_time = create_time
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.region_id = region_id
        self.request_id = request_id
        self.resource_group_id = resource_group_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyGadInstanceNameResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyGadInstanceNameResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyGadInstanceNameResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySubscriptionRequest(TeaModel):
    def __init__(
        self,
        db_list: str = None,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        modify_type: str = None,
        region_id: str = None,
        reserved: str = None,
        resource_group_id: str = None,
        subscription_data_type_ddl: bool = None,
        subscription_data_type_dml: bool = None,
    ):
        # The objects of the change tracking task. The value is a JSON string. For more information, see [Objects of DTS tasks](https://help.aliyun.com/document_detail/209545.html).
        # 
        # >  You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original objects of the task.
        self.db_list = db_list
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        self.dts_instance_id = dts_instance_id
        # The ID of the change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        self.dts_job_id = dts_job_id
        self.modify_type = modify_type
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        self.reserved = reserved
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to retrieve data definition language (DDL) statements. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.subscription_data_type_ddl = subscription_data_type_ddl
        # Specifies whether to retrieve data manipulation language (DML) statements. Valid values:
        # 
        # *   **true**: yes
        # *   **false**: no
        self.subscription_data_type_dml = subscription_data_type_dml

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.db_list is not None:
            result['DbList'] = self.db_list
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.modify_type is not None:
            result['ModifyType'] = self.modify_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.reserved is not None:
            result['Reserved'] = self.reserved
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_data_type_ddl is not None:
            result['SubscriptionDataTypeDDL'] = self.subscription_data_type_ddl
        if self.subscription_data_type_dml is not None:
            result['SubscriptionDataTypeDML'] = self.subscription_data_type_dml
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DbList') is not None:
            self.db_list = m.get('DbList')
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ModifyType') is not None:
            self.modify_type = m.get('ModifyType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Reserved') is not None:
            self.reserved = m.get('Reserved')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionDataTypeDDL') is not None:
            self.subscription_data_type_ddl = m.get('SubscriptionDataTypeDDL')
        if m.get('SubscriptionDataTypeDML') is not None:
            self.subscription_data_type_dml = m.get('SubscriptionDataTypeDML')
        return self


class ModifySubscriptionResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySubscriptionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifySubscriptionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifySubscriptionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySubscriptionObjectRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
        subscription_object: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id
        # The objects from which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](https://help.aliyun.com/document_detail/141902.html).
        # 
        # This parameter is required.
        self.subscription_object = subscription_object

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        if self.subscription_object is not None:
            result['SubscriptionObject'] = self.subscription_object
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        if m.get('SubscriptionObject') is not None:
            self.subscription_object = m.get('SubscriptionObject')
        return self


class ModifySubscriptionObjectResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySubscriptionObjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifySubscriptionObjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifySubscriptionObjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySynchronizationObjectRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
        synchronization_objects: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id
        # This parameter is required.
        self.synchronization_objects = synchronization_objects

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        if self.synchronization_objects is not None:
            result['SynchronizationObjects'] = self.synchronization_objects
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        if m.get('SynchronizationObjects') is not None:
            self.synchronization_objects = m.get('SynchronizationObjects')
        return self


class ModifySynchronizationObjectResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
        task_id: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The ID of the task that changes the objects. You must specify the task ID when you call the DescribeSynchronizationObjectModifyStatus operation to query the status and progress of the task.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ModifySynchronizationObjectResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifySynchronizationObjectResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifySynchronizationObjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PreCheckCreateGadOrderRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        master_database_name: str = None,
        master_engine_arch_type: str = None,
        master_shard_account_name: str = None,
        master_shard_account_password: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        slave_database_name: str = None,
        slave_db_instance_id: str = None,
        slave_db_instance_region: str = None,
        slave_engine_arch_type: str = None,
    ):
        self.instance_id = instance_id
        self.master_database_name = master_database_name
        self.master_engine_arch_type = master_engine_arch_type
        self.master_shard_account_name = master_shard_account_name
        self.master_shard_account_password = master_shard_account_password
        self.owner_id = owner_id
        self.region_id = region_id
        self.resource_group_id = resource_group_id
        self.slave_database_name = slave_database_name
        self.slave_db_instance_id = slave_db_instance_id
        self.slave_db_instance_region = slave_db_instance_region
        self.slave_engine_arch_type = slave_engine_arch_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.master_database_name is not None:
            result['MasterDatabaseName'] = self.master_database_name
        if self.master_engine_arch_type is not None:
            result['MasterEngineArchType'] = self.master_engine_arch_type
        if self.master_shard_account_name is not None:
            result['MasterShardAccountName'] = self.master_shard_account_name
        if self.master_shard_account_password is not None:
            result['MasterShardAccountPassword'] = self.master_shard_account_password
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.slave_database_name is not None:
            result['SlaveDatabaseName'] = self.slave_database_name
        if self.slave_db_instance_id is not None:
            result['SlaveDbInstanceId'] = self.slave_db_instance_id
        if self.slave_db_instance_region is not None:
            result['SlaveDbInstanceRegion'] = self.slave_db_instance_region
        if self.slave_engine_arch_type is not None:
            result['SlaveEngineArchType'] = self.slave_engine_arch_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MasterDatabaseName') is not None:
            self.master_database_name = m.get('MasterDatabaseName')
        if m.get('MasterEngineArchType') is not None:
            self.master_engine_arch_type = m.get('MasterEngineArchType')
        if m.get('MasterShardAccountName') is not None:
            self.master_shard_account_name = m.get('MasterShardAccountName')
        if m.get('MasterShardAccountPassword') is not None:
            self.master_shard_account_password = m.get('MasterShardAccountPassword')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SlaveDatabaseName') is not None:
            self.slave_database_name = m.get('SlaveDatabaseName')
        if m.get('SlaveDbInstanceId') is not None:
            self.slave_db_instance_id = m.get('SlaveDbInstanceId')
        if m.get('SlaveDbInstanceRegion') is not None:
            self.slave_db_instance_region = m.get('SlaveDbInstanceRegion')
        if m.get('SlaveEngineArchType') is not None:
            self.slave_engine_arch_type = m.get('SlaveEngineArchType')
        return self


class PreCheckCreateGadOrderResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        instance_id: str = None,
        region_id: str = None,
        request_id: str = None,
        success: str = None,
        task_id: str = None,
    ):
        self.dynamic_code = dynamic_code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.region_id = region_id
        self.request_id = request_id
        self.success = success
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class PreCheckCreateGadOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: PreCheckCreateGadOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PreCheckCreateGadOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RenewInstanceRequest(TeaModel):
    def __init__(
        self,
        buy_count: str = None,
        charge_type: str = None,
        dts_job_id: str = None,
        period: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The subscription duration of the DTS instance after renewal. Default value: 1.
        # 
        # *   If **Period** is set to **Year**, the valid values are **1 to 5**.
        # *   If **Period** is set to **Month**, the valid values are **1 to 60**.
        self.buy_count = buy_count
        # The billing method of the DTS instance. Set the value to **PREPAY**, which specifies the subscription billing method.
        # 
        # This parameter is required.
        self.charge_type = charge_type
        # The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The billing cycle of the DTS instance after renewal. Valid values:
        # 
        # *   **Year**\
        # *   **Month** (default)
        self.period = period
        # The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.buy_count is not None:
            result['BuyCount'] = self.buy_count
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.period is not None:
            result['Period'] = self.period
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuyCount') is not None:
            self.buy_count = m.get('BuyCount')
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class RenewInstanceResponseBody(TeaModel):
    def __init__(
        self,
        charge_type: str = None,
        code: str = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        end_time: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The billing method of the DTS instance. Only **PREPAY** may be returned, which indicates the subscription billing method.
        self.charge_type = charge_type
        # The error code returned if the request failed.
        # 
        # > This parameter will be removed in the future.
        self.code = code
        # The ID of the data synchronization or change tracking task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the value of **ErrMessage**.
        # 
        # > If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** is invalid.
        self.dynamic_message = dynamic_message
        # The time when the DTS instance expires after renewal. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ssZZZ* format. The time is displayed in UTC.
        # 
        # > **ZZZ** indicates the offset of the time zone, which is displayed in the format of a plus sign (+) or a minus sign (-) followed by hours and minutes, such as **+00:00**.
        self.end_time = end_time
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the instance
        self.instance_id = instance_id
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.code is not None:
            result['Code'] = self.code
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RenewInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RenewInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RenewInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
    ):
        # The ID of the data synchronization or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the data synchronization or change tracking task.
        self.dts_job_id = dts_job_id
        # The region where the DTS instance is located. For more information, see [List of Supported Regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to reset the reverse synchronization task only when the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        return self


class ResetDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResetDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to stop reverse synchronization only when the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class ResetSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResetSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResetSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResetSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReverseTwoWayDirectionRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        ignore_error_sub_job: bool = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        self.dts_instance_id = dts_instance_id
        self.ignore_error_sub_job = ignore_error_sub_job
        # This parameter is required.
        self.region_id = region_id
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.ignore_error_sub_job is not None:
            result['IgnoreErrorSubJob'] = self.ignore_error_sub_job
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('IgnoreErrorSubJob') is not None:
            self.ignore_error_sub_job = m.get('IgnoreErrorSubJob')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ReverseTwoWayDirectionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.dynamic_message = dynamic_message
        self.err_code = err_code
        self.err_message = err_message
        self.http_status_code = http_status_code
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ReverseTwoWayDirectionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ReverseTwoWayDirectionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ReverseTwoWayDirectionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ShieldPrecheckRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        precheck_items: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the change tracking instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
        # 
        # This parameter is required.
        self.dts_instance_id = dts_instance_id
        # The precheck items that you want to ignore. Separate multiple items with commas (,). Valid values:
        #  
        # *   **CHECK_SAME_OBJ**: schema name conflict
        #  
        # *   **CHECK_SAME_USER**: multiple usernames for one instance
        #  
        # *   **CHECK_SRC**: source database version
        #  
        # *   **CHECK_TOPOLOGY**: topology
        #  
        # > For more information about the topologies supported by DTS, see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
        #  
        # *   **CHECK_SERVER_ID**: value of server_id in the source database
        # 
        # This parameter is required.
        self.precheck_items = precheck_items
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.precheck_items is not None:
            result['PrecheckItems'] = self.precheck_items
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('PrecheckItems') is not None:
            self.precheck_items = m.get('PrecheckItems')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class ShieldPrecheckResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ShieldPrecheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ShieldPrecheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ShieldPrecheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SkipFullJobTableRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        job_progress_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the DTS task. The DTS task can be a data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The ID of the primary key.
        self.job_progress_id = job_progress_id
        # The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to query only zero-extract, transform, load (ETL) integration tasks. Valid values:
        # 
        # *   **true**: yes.
        # *   **false**: no.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.job_progress_id is not None:
            result['JobProgressId'] = self.job_progress_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('JobProgressId') is not None:
            self.job_progress_id = m.get('JobProgressId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class SkipFullJobTableResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code.
        self.code = code
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SkipFullJobTableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SkipFullJobTableResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SkipFullJobTableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SkipPreCheckRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        skip: bool = None,
        skip_pre_check_items: str = None,
        skip_pre_check_names: str = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking task.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The precheck task ID. You can call the **DescribePreCheckStatus** operation to query the task ID.
        self.job_id = job_id
        # The region ID of the DTS instance. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id
        # Specifies whether to skip the precheck item. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        # 
        # This parameter is required.
        self.skip = skip
        # The shortened name of the precheck item. Valid values:
        # 
        # *   **["CHECK_SAME_OBJ"]**: object name conflict.
        # *   **["CHECK_SAME_USER"]**: username conflict.
        # *   **["CHECK_SRC"]**: source database version.
        # *   **["CHECK_TOPOLOGY"]**: topology. For more information about the topologies supported by Data Transmission Service (DTS), see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
        # *   **["CHECK_SERVER_ID"]**: the server ID of the source database.
        # *   **["CHECK_DEST_TABLE_EMPTY"]**: existence of objects in the destination database.
        # 
        # > Separate multiple item names with commas (,). Example: **["CHECK_SRC","CHECK_SAME_OBJ"]**.
        self.skip_pre_check_items = skip_pre_check_items
        # The precheck item name. This parameter corresponds to **SkipPreCheckItems**. Valid values:
        # 
        # *   **["CHECK_SAME_OBJ_DETAIL"]**: object name conflict.
        # *   **["CHECK_SAME_USER_DETAIL"]**: username conflict.
        # *   **["CHECK_SRC_DETAIL"]**: source database version.
        # *   **["CHECK_TOPOLOGY_DETAIL"]**: topology. For more information about the topologies supported by DTS, see [Synchronization topologies](https://help.aliyun.com/document_detail/124115.html).
        # *   **["CHECK_SERVER_ID_DETAIL"]**: the server ID of the source database.
        # *   **["CHECK_DEST_TABLE_EMPTY_DETAIL"]**: empty tables in the destination database.
        # 
        # > Separate multiple item names with commas (,). Example: **["CHECK_SRC_DETAIL","CHECK_SAME_OBJ_DETAIL"]**.
        self.skip_pre_check_names = skip_pre_check_names

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.skip is not None:
            result['Skip'] = self.skip
        if self.skip_pre_check_items is not None:
            result['SkipPreCheckItems'] = self.skip_pre_check_items
        if self.skip_pre_check_names is not None:
            result['SkipPreCheckNames'] = self.skip_pre_check_names
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('Skip') is not None:
            self.skip = m.get('Skip')
        if m.get('SkipPreCheckItems') is not None:
            self.skip_pre_check_items = m.get('SkipPreCheckItems')
        if m.get('SkipPreCheckNames') is not None:
            self.skip_pre_check_names = m.get('SkipPreCheckNames')
        return self


class SkipPreCheckResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        migration_job_id: str = None,
        request_id: str = None,
        schedule_job_id: str = None,
        skip_items: str = None,
        skip_names: str = None,
        success: bool = None,
    ):
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The dynamic part in the error message. This parameter is used to replace %s in ErrMessage.
        # 
        # > If JobId is invalid, JobId is returned for DynamicMessage, and the following message is returned for ErrMessage: The Value of Input Parameter %s is not valid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status codes returned.
        self.http_status_code = http_status_code
        # The precheck task ID.
        self.migration_job_id = migration_job_id
        # The request ID.
        self.request_id = request_id
        # The precheck task ID.
        self.schedule_job_id = schedule_job_id
        # The shortened name of the precheck item.
        self.skip_items = skip_items
        # The precheck item name.
        self.skip_names = skip_names
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.schedule_job_id is not None:
            result['ScheduleJobId'] = self.schedule_job_id
        if self.skip_items is not None:
            result['SkipItems'] = self.skip_items
        if self.skip_names is not None:
            result['SkipNames'] = self.skip_names
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScheduleJobId') is not None:
            self.schedule_job_id = m.get('ScheduleJobId')
        if m.get('SkipItems') is not None:
            self.skip_items = m.get('SkipItems')
        if m.get('SkipNames') is not None:
            self.skip_names = m.get('SkipNames')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SkipPreCheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SkipPreCheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SkipPreCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking instance.
        # 
        # >  You can call the [DescribeMigrationJobs](https://help.aliyun.com/document_detail/208139.html), [DescribeSubscriptionInstances](https://help.aliyun.com/document_detail/49442.html), or [DescribeSynchronizationJobs](https://help.aliyun.com/document_detail/49454.html) operation to query the instance ID
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Default value: Forward. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # 
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # >You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class StartDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartDtsJobsRequest(TeaModel):
    def __init__(
        self,
        dts_job_ids: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration or data synchronization task.
        # 
        # > 
        # *   For multiple tasks, separate them with commas (**,**).
        # *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_ids = dts_job_ids
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_ids is not None:
            result['DtsJobIds'] = self.dts_job_ids
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobIds') is not None:
            self.dts_job_ids = m.get('DtsJobIds')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class StartDtsJobsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartDtsJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartDtsJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartDtsJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartMigrationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class StartMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # Request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartReverseWriterRequest(TeaModel):
    def __init__(
        self,
        check_point: str = None,
        dts_job_id: str = None,
        resource_group_id: str = None,
    ):
        # The offset of the Incremental Write module. Specify a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. 
        # 
        # > The default value is the offset that is automatically saved by DTS when the task is paused.
        self.check_point = check_point
        # The ID of the reverse task that was created by calling the CreateReverseDtsJob operation.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_point is not None:
            result['CheckPoint'] = self.check_point
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CheckPoint') is not None:
            self.check_point = m.get('CheckPoint')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class StartReverseWriterResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartReverseWriterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartReverseWriterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartReverseWriterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartSubscriptionInstanceRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        subscription_instance_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
        # 
        # This parameter is required.
        self.subscription_instance_id = subscription_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.subscription_instance_id is not None:
            result['SubscriptionInstanceId'] = self.subscription_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SubscriptionInstanceId') is not None:
            self.subscription_instance_id = m.get('SubscriptionInstanceId')
        return self


class StartSubscriptionInstanceResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
        task_id: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The task ID. This parameter will be removed in the future.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class StartSubscriptionInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartSubscriptionInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartSubscriptionInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # 
        # *   You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class StartSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopDedicatedClusterRequest(TeaModel):
    def __init__(
        self,
        dedicated_cluster_id: str = None,
        dedicated_cluster_name: str = None,
        instance_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the cluster.
        # 
        # >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
        self.dedicated_cluster_id = dedicated_cluster_id
        # The name of the cluster.
        self.dedicated_cluster_name = dedicated_cluster_name
        # The ID of the instance.
        # 
        # >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
        self.instance_id = instance_id
        self.owner_id = owner_id
        # The ID of the region in which the instance resides.
        self.region_id = region_id
        # The resource group ID. This parameter is a global parameter and not required.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_cluster_id is not None:
            result['DedicatedClusterId'] = self.dedicated_cluster_id
        if self.dedicated_cluster_name is not None:
            result['DedicatedClusterName'] = self.dedicated_cluster_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DedicatedClusterId') is not None:
            self.dedicated_cluster_id = m.get('DedicatedClusterId')
        if m.get('DedicatedClusterName') is not None:
            self.dedicated_cluster_name = m.get('DedicatedClusterName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class StopDedicatedClusterResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        http_status_code: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StopDedicatedClusterResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopDedicatedClusterResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopDedicatedClusterResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration, data synchronization, or change tracking task.
        self.dts_job_id = dts_job_id
        # The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to stop the reverse synchronization task only when the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class StopDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic error message, which is used to replace **%s** in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StopDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopDtsJobsRequest(TeaModel):
    def __init__(
        self,
        dts_job_ids: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration or data synchronization task.
        # 
        # > 
        # *   Separate multiple task IDs by **,** (commas).
        # *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query task IDs.
        # 
        # This parameter is required.
        self.dts_job_ids = dts_job_ids
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_ids is not None:
            result['DtsJobIds'] = self.dts_job_ids
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobIds') is not None:
            self.dts_job_ids = m.get('DtsJobIds')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class StopDtsJobsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StopDtsJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopDtsJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopDtsJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopMigrationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The IDoftheAlibabaCloudaccount. Youdonotneed to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class StopMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
        self.err_code = err_code
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.err_message = err_message
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.request_id = request_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StopMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SummaryJobDetailRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        job_code: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        struct_type: str = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration or data synchronization instance.
        # 
        # >  You must specify at least one of the DtsJobId and DtsInstanceId parameters.
        self.dts_instance_id = dts_instance_id
        # The ID of the data migration or data synchronization task.
        # 
        # >  You must specify at least one of the DtsJobId and DtsInstanceId parameters.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The phase of the data migration task. Valid values:
        # 
        # *   **02**: The task is in the schema migration phase.
        # *   **03**: The task is in the incremental migration phase.
        # 
        # This parameter is required.
        self.job_code = job_code
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The type of schema definition. Valid values:
        # 
        # *   **before**: schema migration or initial schema synchronization
        # *   **after**: DDL operations performed during incremental data migration or synchronization
        self.struct_type = struct_type
        # The synchronization direction of the data synchronization task. Valid values:
        # 
        # *   **Forward**: Data is synchronized from the source database to the destination database.
        # *   **Reverse**: Data is synchronized from the destination database to the source database.
        # 
        # > 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.job_code is not None:
            result['JobCode'] = self.job_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.struct_type is not None:
            result['StructType'] = self.struct_type
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('JobCode') is not None:
            self.job_code = m.get('JobCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('StructType') is not None:
            self.struct_type = m.get('StructType')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class SummaryJobDetailResponseBodyProgressSummaryDetails(TeaModel):
    def __init__(
        self,
        key: str = None,
        state: int = None,
        total_count: int = None,
    ):
        # The type of migrated or synchronized object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
        self.key = key
        # The state of the data migration or data synchronization task. Valid values:
        # 
        # *   **0**: The task was complete.
        # *   **1**: The task was waiting to start.
        # *   **2**: The task was being initialized.
        # *   **3**: The task was in progress.
        # *   **4**: An error occurred.
        # *   **5**: The task failed.
        self.state = state
        # The total number of migrated or synchronized objects.
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.state is not None:
            result['State'] = self.state
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class SummaryJobDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_id: str = None,
        progress_summary_details: List[SummaryJobDetailResponseBodyProgressSummaryDetails] = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code.
        self.code = code
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the data migration or data synchronization task.
        self.job_id = job_id
        # The returned information about the migrated or synchronized objects in arrays.
        # 
        # >  The arrays are in the following format: [{"key":"Function","state":5,"totalCount":22},{"key":"Procedure","state":5,"totalCount":26},{"key":"Table","state":0,"totalCount":68},{"key":"View","state":5,"totalCount":100}].
        self.progress_summary_details = progress_summary_details
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**: The request was successful.
        # *   **false**: The request failed.
        self.success = success

    def validate(self):
        if self.progress_summary_details:
            for k in self.progress_summary_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_id is not None:
            result['JobId'] = self.job_id
        result['ProgressSummaryDetails'] = []
        if self.progress_summary_details is not None:
            for k in self.progress_summary_details:
                result['ProgressSummaryDetails'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        self.progress_summary_details = []
        if m.get('ProgressSummaryDetails') is not None:
            for k in m.get('ProgressSummaryDetails'):
                temp_model = SummaryJobDetailResponseBodyProgressSummaryDetails()
                self.progress_summary_details.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SummaryJobDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SummaryJobDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SummaryJobDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendDtsJobRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration, data synchronization, or change tracking instance.
        self.dts_instance_id = dts_instance_id
        # The ID of the Data Transmission Service (DTS) task. The DTS task can be a data migration, data synchronization, or change tracking task.
        # 
        # >  You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to obtain the task ID.
        self.dts_job_id = dts_job_id
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # 
        # *   The default value is **Forward**.
        # 
        # *   You can set this parameter to **Reverse** only if the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class SuspendDtsJobResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter is going to be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the \\*\\*%s\\*\\* variable in the value of **ErrMessage**.
        # 
        # >  If the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **DtsJobId**, the specified value of **DtsJobId** in the request is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code returned.
        self.http_status_code = http_status_code
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendDtsJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendDtsJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendDtsJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendDtsJobsRequest(TeaModel):
    def __init__(
        self,
        dts_job_ids: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        zero_etl_job: bool = None,
    ):
        # The ID of the data migration or data synchronization task.
        # 
        # > 
        # *   For multiple tasks, separate them with commas (,).
        # *   You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_ids = dts_job_ids
        # The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_ids is not None:
            result['DtsJobIds'] = self.dts_job_ids
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobIds') is not None:
            self.dts_job_ids = m.get('DtsJobIds')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class SuspendDtsJobsResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the request is successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendDtsJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendDtsJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendDtsJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendMigrationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        client_token: str = None,
        migration_job_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        # The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
        self.client_token = client_token
        # The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
        # 
        # This parameter is required.
        self.migration_job_id = migration_job_id
        self.owner_id = owner_id
        # The ID of the region where the data migration instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.migration_job_id is not None:
            result['MigrationJobId'] = self.migration_job_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('MigrationJobId') is not None:
            self.migration_job_id = m.get('MigrationJobId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class SuspendMigrationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendMigrationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendMigrationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendMigrationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendSynchronizationJobRequest(TeaModel):
    def __init__(
        self,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource GroupId
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # > 
        # *   Default value: **Forward**.
        # *   You can set this parameter to **Reverse** to pause reverse synchronization only when the topology is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class SuspendSynchronizationJobResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendSynchronizationJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendSynchronizationJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendSynchronizationJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchPhysicalDtsJobToCloudRequest(TeaModel):
    def __init__(
        self,
        dts_instance_id: str = None,
        dts_job_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
    ):
        # Migration, synchronization, or subscription instance ID.
        self.dts_instance_id = dts_instance_id
        # Data migration or synchronization instance ID, which can be queried by calling the **describedtsjobs** interface.
        self.dts_job_id = dts_job_id
        # Region ID. Pass this parameter to specify the region where the instance is located. For more details, see the list of supported regions.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # Synchronization direction, values: - **Forward**: Forward. - **Reverse**: Reverse.
        # > - The default value is **Forward**. - **Reverse** can only be passed when the topology of the data synchronization instance is bidirectional, to release the reverse synchronization link.
        self.synchronization_direction = synchronization_direction

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_instance_id is not None:
            result['DtsInstanceId'] = self.dts_instance_id
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsInstanceId') is not None:
            self.dts_instance_id = m.get('DtsInstanceId')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        return self


class SwitchPhysicalDtsJobToCloudResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # Dynamic error code, this parameter will be deprecated.
        self.dynamic_code = dynamic_code
        # Dynamic error message used to replace the **%s** in the **ErrMessage** return parameter.  > If **ErrMessage** returns **The Value of Input Parameter %s is not valid**, and **DynamicMessage** returns **DtsJobId**, it indicates that the request parameter **DtsJobId** is invalid.
        self.dynamic_message = dynamic_message
        # Error code returned when the call fails.
        self.err_code = err_code
        # Returns the corresponding error message when an invocation error occurs.
        self.err_message = err_message
        # Status code.
        self.http_status_code = http_status_code
        # request ID.
        self.request_id = request_id
        # Whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SwitchPhysicalDtsJobToCloudResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SwitchPhysicalDtsJobToCloudResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchPhysicalDtsJobToCloudResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SwitchSynchronizationEndpointRequestEndpoint(TeaModel):
    def __init__(
        self,
        ip: str = None,
        instance_id: str = None,
        instance_type: str = None,
        port: str = None,
        type: str = None,
    ):
        # The IP address of the database.
        # 
        # >  You must specify the IP address only if the **Endpoint.InstanceType** parameter is set to **Express**.
        self.ip = ip
        # The ID of the ECS instance or the virtual private cloud (VPC).
        # 
        # > 
        # *   If the **Endpoint.InstanceType** parameter is set to **ECS**, you must specify the ID of the ECS instance.
        # *   If the **Endpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the VPC.
        # 
        # This parameter is required.
        self.instance_id = instance_id
        # The instance type of the database. Valid values:
        # 
        # *   **LocalInstance**: self-managed database with a public IP address
        # *   **ECS**: self-managed database that is hosted on ECS
        # *   **Express**: self-managed database that is connected over Express Connect
        # 
        # This parameter is required.
        self.instance_type = instance_type
        # The service port number of the database.
        # 
        # This parameter is required.
        self.port = port
        # Specifies whether to update the connection settings of the source instance or the destination instance. Valid values:
        # 
        # *   **Source**\
        # *   **Destination**\
        # 
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_type is not None:
            result['InstanceType'] = self.instance_type
        if self.port is not None:
            result['Port'] = self.port
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceType') is not None:
            self.instance_type = m.get('InstanceType')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SwitchSynchronizationEndpointRequestSourceEndpoint(TeaModel):
    def __init__(
        self,
        owner_id: str = None,
        role: str = None,
    ):
        # The ID of the Alibaba Cloud account to which the source instance belongs. You must specify this parameter only if the source instance and the destination instance belong to different Alibaba Cloud accounts.
        self.owner_id = owner_id
        # The authorized Resource Access Management (RAM) role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.
        # 
        # >  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](https://help.aliyun.com/document_detail/48468.html).
        self.role = role

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerID'] = self.owner_id
        if self.role is not None:
            result['Role'] = self.role
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerID') is not None:
            self.owner_id = m.get('OwnerID')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        return self


class SwitchSynchronizationEndpointRequest(TeaModel):
    def __init__(
        self,
        endpoint: SwitchSynchronizationEndpointRequestEndpoint = None,
        source_endpoint: SwitchSynchronizationEndpointRequestSourceEndpoint = None,
        account_id: str = None,
        owner_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        synchronization_direction: str = None,
        synchronization_job_id: str = None,
    ):
        self.endpoint = endpoint
        self.source_endpoint = source_endpoint
        # The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
        self.account_id = account_id
        self.owner_id = owner_id
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The synchronization direction. Valid values:
        # 
        # *   **Forward**\
        # *   **Reverse**\
        # 
        # >  Default value: **Forward**.
        # 
        # The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
        self.synchronization_direction = synchronization_direction
        # The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
        # 
        # This parameter is required.
        self.synchronization_job_id = synchronization_job_id

    def validate(self):
        if self.endpoint:
            self.endpoint.validate()
        if self.source_endpoint:
            self.source_endpoint.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.endpoint is not None:
            result['Endpoint'] = self.endpoint.to_map()
        if self.source_endpoint is not None:
            result['SourceEndpoint'] = self.source_endpoint.to_map()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.synchronization_direction is not None:
            result['SynchronizationDirection'] = self.synchronization_direction
        if self.synchronization_job_id is not None:
            result['SynchronizationJobId'] = self.synchronization_job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Endpoint') is not None:
            temp_model = SwitchSynchronizationEndpointRequestEndpoint()
            self.endpoint = temp_model.from_map(m['Endpoint'])
        if m.get('SourceEndpoint') is not None:
            temp_model = SwitchSynchronizationEndpointRequestSourceEndpoint()
            self.source_endpoint = temp_model.from_map(m['SourceEndpoint'])
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SynchronizationDirection') is not None:
            self.synchronization_direction = m.get('SynchronizationDirection')
        if m.get('SynchronizationJobId') is not None:
            self.synchronization_job_id = m.get('SynchronizationJobId')
        return self


class SwitchSynchronizationEndpointResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: str = None,
        task_id: str = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success
        # The task ID. You must specify the task ID when you call the [DescribeEndpointSwitchStatus](https://help.aliyun.com/document_detail/135598.html) operation to query the execution status of the task.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SwitchSynchronizationEndpointResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SwitchSynchronizationEndpointResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SwitchSynchronizationEndpointResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # The key of tag N.
        # 
        # > 
        # 
        # *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag, and Tag.2.Key specifies the key of the second tag.
        # 
        # *   The tag key cannot be an empty string.
        # 
        # This parameter is required.
        self.key = key
        # The value of tag N.
        # 
        # > 
        # 
        # *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag.
        # 
        # *   The tag value can be an empty string.
        # 
        # This parameter is required.
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesRequest(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[TagResourcesRequestTag] = None,
    ):
        # The region ID of the Data Transmission Service (DTS) instances. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The IDs of the data migration, data synchronization, or change tracking instances. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance IDs.
        # 
        # > N specifies the serial number of the instance. For example, ResourceId.1 specifies the ID of the first instance and ResourceId.2 specifies the ID of the second instance.
        # 
        # This parameter is required.
        self.resource_id = resource_id
        # The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.
        self.resource_type = resource_type
        # The tags to be added to the instances.
        # 
        # This parameter is required.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TransferInstanceClassRequest(TeaModel):
    def __init__(
        self,
        dts_job_id: str = None,
        instance_class: str = None,
        order_type: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original instance class of the DTS instance.
        # 
        # *   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
        # *   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.
        # 
        # > For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization channels](https://help.aliyun.com/document_detail/26605.html).
        # 
        # This parameter is required.
        self.instance_class = instance_class
        # Set the value to **UPGRADE**.
        # 
        # This parameter is required.
        self.order_type = order_type
        # The ID of the region in which the DTS instance resides. For more information, see [Supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.instance_class is not None:
            result['InstanceClass'] = self.instance_class
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('InstanceClass') is not None:
            self.instance_class = m.get('InstanceClass')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class TransferInstanceClassResponseBody(TeaModel):
    def __init__(
        self,
        charge_type: str = None,
        code: str = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        end_time: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The billing method of the DTS instance. Valid values:
        # 
        # *   **POSTPAY**: pay-as-you-go.
        # *   **PREPAY**: subscription.
        self.charge_type = charge_type
        # The error code that is returned.
        self.code = code
        # The ID of the data migration or data synchronization task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.
        # 
        # > For example, if the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified value of the **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The expiration time of the DTS instance.
        # 
        # > This parameter is returned only if the value of the ChargeType parameter is **PREPAY**.
        self.end_time = end_time
        # The error code returned if the request failed.
        self.err_code = err_code
        # The error message returned if the request failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the DTS instance.
        self.instance_id = instance_id
        # The request ID.
        self.request_id = request_id
        # Indicates whether the request was successful. Valid values:
        # 
        # *   **true**\
        # *   **false**\
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.code is not None:
            result['Code'] = self.code
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TransferInstanceClassResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TransferInstanceClassResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TransferInstanceClassResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TransferPayTypeRequest(TeaModel):
    def __init__(
        self,
        auto_pay: bool = None,
        buy_count: str = None,
        charge_type: str = None,
        dts_job_id: str = None,
        instance_class: str = None,
        max_du: int = None,
        min_du: int = None,
        period: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # Specifies whether to automatically renew the DTS instance when it expires. Valid values:
        # 
        # *   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
        # *   **true**: automatically renews the DTS instance when it expires.
        self.auto_pay = auto_pay
        # The subscription length.
        # 
        # *   If the **Period** parameter is set to **Year**, the value range is **1** to **5**.
        # *   If the **Period** parameter is set to **Month**, the value range is **1** to **60**.
        # 
        # >  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.
        self.buy_count = buy_count
        # The new billing method. Valid values:
        # 
        # *   **PrePaid**: subscription.
        # *   **PostPaid**: pay-as-you-go.
        # 
        # This parameter is required.
        self.charge_type = charge_type
        # The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the task ID.
        # 
        # This parameter is required.
        self.dts_job_id = dts_job_id
        # The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](https://help.aliyun.com/document_detail/208925.html) operation to query the original instance class of the DTS instance.
        # 
        # *   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
        # *   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.
        # 
        # > For more information about the test performance of each instance class, see [Specifications of data migration instances](https://help.aliyun.com/document_detail/26606.html) and [Specifications of data synchronization channels](https://help.aliyun.com/document_detail/26605.html).
        self.instance_class = instance_class
        # The maximum number of DUs in a serverless instance. Valid values: 2, 4, 8, and 16.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.max_du = max_du
        # The minimum number of DTS Units (DUs) in a serverless instance. Valid values: 1, 2, 4, 8, and 16.
        # 
        # >  This feature is not supported. Do not specify this parameter.
        self.min_du = min_du
        # The billing cycle of the subscription instance. Valid values:
        # 
        # *   **Year**\
        # *   **Month** (default value)
        # 
        # >  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.
        self.period = period
        # The ID of the region where the DTS instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # The resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_pay is not None:
            result['AutoPay'] = self.auto_pay
        if self.buy_count is not None:
            result['BuyCount'] = self.buy_count
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.instance_class is not None:
            result['InstanceClass'] = self.instance_class
        if self.max_du is not None:
            result['MaxDu'] = self.max_du
        if self.min_du is not None:
            result['MinDu'] = self.min_du
        if self.period is not None:
            result['Period'] = self.period
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AutoPay') is not None:
            self.auto_pay = m.get('AutoPay')
        if m.get('BuyCount') is not None:
            self.buy_count = m.get('BuyCount')
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('InstanceClass') is not None:
            self.instance_class = m.get('InstanceClass')
        if m.get('MaxDu') is not None:
            self.max_du = m.get('MaxDu')
        if m.get('MinDu') is not None:
            self.min_du = m.get('MinDu')
        if m.get('Period') is not None:
            self.period = m.get('Period')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class TransferPayTypeResponseBody(TeaModel):
    def __init__(
        self,
        charge_type: str = None,
        code: str = None,
        dts_job_id: str = None,
        dynamic_message: str = None,
        end_time: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The billing method of the DTS instance. Valid values:
        # 
        # *   **PrePaid**: subscription
        # *   **PostPaid**: pay-as-you-go
        self.charge_type = charge_type
        # The error code. This parameter will be removed in the future.
        self.code = code
        # The ID of the DTS task.
        self.dts_job_id = dts_job_id
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The expiration time of the subscription instance. The value is a UNIX timestamp.
        # 
        # > 
        # *   If the DTS instance is a pay-as-you-go instance, the value of this parameter is empty.
        # *   You can use a search engine to obtain a UNIX timestamp converter.
        self.end_time = end_time
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the DTS instance.
        self.instance_id = instance_id
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful. Valid values:
        # 
        # *   **true**: The call was successful.
        # *   **false**: The call failed.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.charge_type is not None:
            result['ChargeType'] = self.charge_type
        if self.code is not None:
            result['Code'] = self.code
        if self.dts_job_id is not None:
            result['DtsJobId'] = self.dts_job_id
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChargeType') is not None:
            self.charge_type = m.get('ChargeType')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DtsJobId') is not None:
            self.dts_job_id = m.get('DtsJobId')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TransferPayTypeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TransferPayTypeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TransferPayTypeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        region_id: str = None,
        resource_group_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag_key: List[str] = None,
    ):
        # Specifies whether to unbind all tags from the specified instances. Valid values:
        # 
        # *   **true**: unbinds all tags from the specified instances.
        # *   **false**: To unbind only specific tags, you must specify the **TagKey.N** parameter.
        # 
        # > 
        # *   You must specify at least one of the All and **TagKey.N** parameters.
        # *   If you specify both the All parameter and the **TagKey.N** parameter, the All parameter does not take effect.
        self.all = all
        # The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # The ID of the data migration, synchronization, and subscription instances, which can be queried by calling the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) API. > N indicates the Nth instance ID to be passed. For example, ResourceId.0 represents passing the first instance ID; ResourceId.1 represents passing the second instance ID. You can unbind tags for 1 to 50 instances simultaneously.
        # 
        # This parameter is required.
        self.resource_id = resource_id
        # The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
        self.resource_type = resource_type
        # Tag key. > - N indicates the position of the tag key being passed. For example, TagKey.0 represents the first tag key; TagKey.1 represents the second tag key. Up to 20 tag keys can be unbound simultaneously. - Empty strings are not allowed. - At least one of **All** or this parameter must be provided. - If both **All** and this parameter are provided, only this parameter will take effect.
        self.tag_key = tag_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        err_code: str = None,
        err_message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpgradeTwoWayRequest(TeaModel):
    def __init__(
        self,
        instance_class: str = None,
        instance_id: str = None,
        region_id: str = None,
        resource_group_id: str = None,
    ):
        # The instance class of the two-way synchronization task. Valid values: **large**, **medium**, **micro**, and **small**.
        # 
        # >  For more information, see [Specifications of data synchronization instances](https://help.aliyun.com/document_detail/26605.html).
        # 
        # This parameter is required.
        self.instance_class = instance_class
        # The ID of the data synchronization instance. You can call the [DescribeDtsJobs](https://help.aliyun.com/document_detail/209702.html) operation to query the instance ID.
        # 
        # This parameter is required.
        self.instance_id = instance_id
        # The region ID of the DTS instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_class is not None:
            result['InstanceClass'] = self.instance_class
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceClass') is not None:
            self.instance_class = m.get('InstanceClass')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class UpgradeTwoWayResponseBody(TeaModel):
    def __init__(
        self,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
        # 
        # >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and that of the **DynamicMessage** parameter is **InstanceId**, the specified **InstanceId** parameter is invalid.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # The ID of the request.
        self.request_id = request_id
        # Indicates whether the call was successful. Valid values:
        # 
        # *   **true**: The call was successful.
        # *   **false**: The call failed.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpgradeTwoWayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpgradeTwoWayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpgradeTwoWayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WhiteIpListRequest(TeaModel):
    def __init__(
        self,
        dest_aliyun_uid: str = None,
        dest_primary_vsw_id: str = None,
        dest_role_name: str = None,
        dest_secondary_vsw_id: str = None,
        dest_vpc_id: str = None,
        destination_region: str = None,
        region: str = None,
        region_id: str = None,
        resource_group_id: str = None,
        src_aliyun_uid: str = None,
        src_primary_vsw_id: str = None,
        src_role_name: str = None,
        src_secondary_vsw_id: str = None,
        src_vpc_id: str = None,
        type: str = None,
        zero_etl_job: bool = None,
    ):
        # destination aliyun uid
        self.dest_aliyun_uid = dest_aliyun_uid
        # VPCNAT destination main VSW
        self.dest_primary_vsw_id = dest_primary_vsw_id
        # destination role name
        self.dest_role_name = dest_role_name
        # VPCNAT destination backup VSW
        self.dest_secondary_vsw_id = dest_secondary_vsw_id
        # source vpc id
        self.dest_vpc_id = dest_vpc_id
        # The region ID to which the target instance belongs, please refer to the supported region list for details.
        # >>If the target instance is a self built database or third-party cloud database with a public IP address, you can pass in the cn Hangzhou or the region ID closest to the physical distance of the database.
        #  - When the DTS task is migration or synchronization, this parameter must be passed in.
        self.destination_region = destination_region
        # The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        # 
        # This parameter is required.
        self.region = region
        # The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](https://help.aliyun.com/document_detail/141033.html).
        self.region_id = region_id
        # Resource group ID.
        self.resource_group_id = resource_group_id
        # source aliyun uid
        self.src_aliyun_uid = src_aliyun_uid
        # VPCNAT source end main VSW
        self.src_primary_vsw_id = src_primary_vsw_id
        # source role Name
        self.src_role_name = src_role_name
        # VPCNAT source backup VSW
        self.src_secondary_vsw_id = src_secondary_vsw_id
        # source vpc id
        self.src_vpc_id = src_vpc_id
        # The access method for self built databases or third-party cloud databases, with a value of
        #  - Internet: accessed through the public network.
        #  - VPC: Connected through dedicated line/VPN gateway/intelligent gateway.
        # 
        # This parameter is required.
        self.type = type
        # Whether it is a seamless integration (Zero-ETL) task, the value can be:
        # - **false**: No. - **true**: Yes.
        self.zero_etl_job = zero_etl_job

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dest_aliyun_uid is not None:
            result['DestAliyunUid'] = self.dest_aliyun_uid
        if self.dest_primary_vsw_id is not None:
            result['DestPrimaryVswId'] = self.dest_primary_vsw_id
        if self.dest_role_name is not None:
            result['DestRoleName'] = self.dest_role_name
        if self.dest_secondary_vsw_id is not None:
            result['DestSecondaryVswId'] = self.dest_secondary_vsw_id
        if self.dest_vpc_id is not None:
            result['DestVpcId'] = self.dest_vpc_id
        if self.destination_region is not None:
            result['DestinationRegion'] = self.destination_region
        if self.region is not None:
            result['Region'] = self.region
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.src_aliyun_uid is not None:
            result['SrcAliyunUid'] = self.src_aliyun_uid
        if self.src_primary_vsw_id is not None:
            result['SrcPrimaryVswId'] = self.src_primary_vsw_id
        if self.src_role_name is not None:
            result['SrcRoleName'] = self.src_role_name
        if self.src_secondary_vsw_id is not None:
            result['SrcSecondaryVswId'] = self.src_secondary_vsw_id
        if self.src_vpc_id is not None:
            result['SrcVpcId'] = self.src_vpc_id
        if self.type is not None:
            result['Type'] = self.type
        if self.zero_etl_job is not None:
            result['ZeroEtlJob'] = self.zero_etl_job
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestAliyunUid') is not None:
            self.dest_aliyun_uid = m.get('DestAliyunUid')
        if m.get('DestPrimaryVswId') is not None:
            self.dest_primary_vsw_id = m.get('DestPrimaryVswId')
        if m.get('DestRoleName') is not None:
            self.dest_role_name = m.get('DestRoleName')
        if m.get('DestSecondaryVswId') is not None:
            self.dest_secondary_vsw_id = m.get('DestSecondaryVswId')
        if m.get('DestVpcId') is not None:
            self.dest_vpc_id = m.get('DestVpcId')
        if m.get('DestinationRegion') is not None:
            self.destination_region = m.get('DestinationRegion')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('SrcAliyunUid') is not None:
            self.src_aliyun_uid = m.get('SrcAliyunUid')
        if m.get('SrcPrimaryVswId') is not None:
            self.src_primary_vsw_id = m.get('SrcPrimaryVswId')
        if m.get('SrcRoleName') is not None:
            self.src_role_name = m.get('SrcRoleName')
        if m.get('SrcSecondaryVswId') is not None:
            self.src_secondary_vsw_id = m.get('SrcSecondaryVswId')
        if m.get('SrcVpcId') is not None:
            self.src_vpc_id = m.get('SrcVpcId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ZeroEtlJob') is not None:
            self.zero_etl_job = m.get('ZeroEtlJob')
        return self


class WhiteIpListResponseBody(TeaModel):
    def __init__(
        self,
        dest_ip_list: str = None,
        dynamic_code: str = None,
        dynamic_message: str = None,
        err_code: str = None,
        err_message: str = None,
        http_status_code: int = None,
        ip_list: str = None,
        request_id: str = None,
        src_ip_list: str = None,
        success: bool = None,
    ):
        # Target end adaptation to VPCNAT IP whitelist
        self.dest_ip_list = dest_ip_list
        # The dynamic error code. This parameter will be removed in the future.
        self.dynamic_code = dynamic_code
        # The dynamic error message. This parameter will be removed in the future.
        self.dynamic_message = dynamic_message
        # The error code returned if the call failed.
        self.err_code = err_code
        # The error message returned if the call failed.
        self.err_message = err_message
        # The HTTP status code.
        self.http_status_code = http_status_code
        # IP address.
        self.ip_list = ip_list
        # The ID of the request.
        self.request_id = request_id
        # Source adaptation to VPC NAT IP whitelist
        self.src_ip_list = src_ip_list
        # Indicates whether the request was successful.
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dest_ip_list is not None:
            result['DestIpList'] = self.dest_ip_list
        if self.dynamic_code is not None:
            result['DynamicCode'] = self.dynamic_code
        if self.dynamic_message is not None:
            result['DynamicMessage'] = self.dynamic_message
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_message is not None:
            result['ErrMessage'] = self.err_message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.ip_list is not None:
            result['IpList'] = self.ip_list
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.src_ip_list is not None:
            result['SrcIpList'] = self.src_ip_list
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DestIpList') is not None:
            self.dest_ip_list = m.get('DestIpList')
        if m.get('DynamicCode') is not None:
            self.dynamic_code = m.get('DynamicCode')
        if m.get('DynamicMessage') is not None:
            self.dynamic_message = m.get('DynamicMessage')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrMessage') is not None:
            self.err_message = m.get('ErrMessage')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IpList') is not None:
            self.ip_list = m.get('IpList')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SrcIpList') is not None:
            self.src_ip_list = m.get('SrcIpList')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class WhiteIpListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: WhiteIpListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WhiteIpListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


