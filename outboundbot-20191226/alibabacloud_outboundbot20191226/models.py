# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import Dict, List, Any


class ApplyNumberDistrictInfoParsingResultRequest(TeaModel):
    def __init__(
        self,
        version_id: str = None,
    ):
        self.version_id = version_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class ApplyNumberDistrictInfoParsingResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ApplyNumberDistrictInfoParsingResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyNumberDistrictInfoParsingResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyNumberDistrictInfoParsingResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignJobsRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        instance_id: str = None,
        is_asynchrony: bool = None,
        job_data_parsing_task_id: str = None,
        job_group_id: str = None,
        jobs_json: List[str] = None,
        roster_type: str = None,
        strategy_json: str = None,
    ):
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        self.is_asynchrony = is_asynchrony
        self.job_data_parsing_task_id = job_data_parsing_task_id
        # This parameter is required.
        self.job_group_id = job_group_id
        self.jobs_json = jobs_json
        self.roster_type = roster_type
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_asynchrony is not None:
            result['IsAsynchrony'] = self.is_asynchrony
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.roster_type is not None:
            result['RosterType'] = self.roster_type
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsAsynchrony') is not None:
            self.is_asynchrony = m.get('IsAsynchrony')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('RosterType') is not None:
            self.roster_type = m.get('RosterType')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class AssignJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group_id: str = None,
        jobs_id: List[str] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group_id = job_group_id
        self.jobs_id = jobs_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_id is not None:
            result['JobsId'] = self.jobs_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsId') is not None:
            self.jobs_id = m.get('JobsId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AssignJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AssignJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignJobsAsyncRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        instance_id: str = None,
        job_group_id: str = None,
        jobs_json: List[str] = None,
        strategy_json: str = None,
    ):
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id
        self.jobs_json = jobs_json
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class AssignJobsAsyncShrinkRequest(TeaModel):
    def __init__(
        self,
        calling_number_shrink: str = None,
        instance_id: str = None,
        job_group_id: str = None,
        jobs_json_shrink: str = None,
        strategy_json: str = None,
    ):
        self.calling_number_shrink = calling_number_shrink
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id
        self.jobs_json_shrink = jobs_json_shrink
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number_shrink is not None:
            result['CallingNumber'] = self.calling_number_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_json_shrink is not None:
            result['JobsJson'] = self.jobs_json_shrink
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number_shrink = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsJson') is not None:
            self.jobs_json_shrink = m.get('JobsJson')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class AssignJobsAsyncResponseBody(TeaModel):
    def __init__(
        self,
        async_task_id: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.async_task_id = async_task_id
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignJobsAsyncResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AssignJobsAsyncResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AssignJobsAsyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelJobsRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
        scenario_id: str = None,
    ):
        # This parameter is required.
        self.all = all
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class CancelJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CancelJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CancelJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChangeResourceGroupRequest(TeaModel):
    def __init__(
        self,
        new_resource_group_id: str = None,
        resource_id: str = None,
    ):
        # This parameter is required.
        self.new_resource_group_id = new_resource_group_id
        # This parameter is required.
        self.resource_id = resource_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.new_resource_group_id is not None:
            result['NewResourceGroupId'] = self.new_resource_group_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NewResourceGroupId') is not None:
            self.new_resource_group_id = m.get('NewResourceGroupId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class ChangeResourceGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ChangeResourceGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ChangeResourceGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChangeResourceGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAgentProfileRequest(TeaModel):
    def __init__(
        self,
        agent_profile_template_id: str = None,
        app_ip: str = None,
        description: str = None,
        faq_category_ids: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        script_id: str = None,
        variables_json: str = None,
    ):
        # This parameter is required.
        self.agent_profile_template_id = agent_profile_template_id
        self.app_ip = app_ip
        self.description = description
        self.faq_category_ids = faq_category_ids
        # This parameter is required.
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        # This parameter is required.
        self.model = model
        self.model_config = model_config
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        # This parameter is required.
        self.script_id = script_id
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        if self.description is not None:
            result['Description'] = self.description
        if self.faq_category_ids is not None:
            result['FaqCategoryIds'] = self.faq_category_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FaqCategoryIds') is not None:
            self.faq_category_ids = m.get('FaqCategoryIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class CreateAgentProfileResponseBodyData(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        agent_profile_template_id: str = None,
        agent_type: str = None,
        create_time: str = None,
        description: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        script_id: str = None,
        system: bool = None,
        update_time: str = None,
        variables_json: str = None,
    ):
        self.agent_profile_id = agent_profile_id
        self.agent_profile_template_id = agent_profile_template_id
        # agent type
        self.agent_type = agent_type
        self.create_time = create_time
        self.description = description
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.script_id = script_id
        self.system = system
        self.update_time = update_time
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.agent_type is not None:
            result['AgentType'] = self.agent_type
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.system is not None:
            result['System'] = self.system
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AgentType') is not None:
            self.agent_type = m.get('AgentType')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('System') is not None:
            self.system = m.get('System')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class CreateAgentProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateAgentProfileResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateAgentProfileResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateAgentProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAgentProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAgentProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAnnotationMissionRequest(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        agent_key: str = None,
        annotation_mission_data_source_type: int = None,
        annotation_mission_debug_data_source_list: List[int] = None,
        annotation_mission_debug_data_source_list_json_string: str = None,
        annotation_mission_name: str = None,
        chatbot_id: str = None,
        conversation_time_end_filter: int = None,
        conversation_time_start_filter: int = None,
        exclude_other_session: bool = None,
        finished: bool = None,
        instance_id: str = None,
        sampling_count: int = None,
        sampling_rate: int = None,
        sampling_type: int = None,
        script_id: str = None,
        session_end_reason_filter_list: List[int] = None,
        session_end_reason_filter_list_json_string: str = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.annotation_mission_data_source_type = annotation_mission_data_source_type
        self.annotation_mission_debug_data_source_list = annotation_mission_debug_data_source_list
        self.annotation_mission_debug_data_source_list_json_string = annotation_mission_debug_data_source_list_json_string
        self.annotation_mission_name = annotation_mission_name
        self.chatbot_id = chatbot_id
        self.conversation_time_end_filter = conversation_time_end_filter
        self.conversation_time_start_filter = conversation_time_start_filter
        self.exclude_other_session = exclude_other_session
        self.finished = finished
        self.instance_id = instance_id
        self.sampling_count = sampling_count
        self.sampling_rate = sampling_rate
        self.sampling_type = sampling_type
        self.script_id = script_id
        self.session_end_reason_filter_list = session_end_reason_filter_list
        self.session_end_reason_filter_list_json_string = session_end_reason_filter_list_json_string

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.annotation_mission_data_source_type is not None:
            result['AnnotationMissionDataSourceType'] = self.annotation_mission_data_source_type
        if self.annotation_mission_debug_data_source_list is not None:
            result['AnnotationMissionDebugDataSourceList'] = self.annotation_mission_debug_data_source_list
        if self.annotation_mission_debug_data_source_list_json_string is not None:
            result['AnnotationMissionDebugDataSourceListJsonString'] = self.annotation_mission_debug_data_source_list_json_string
        if self.annotation_mission_name is not None:
            result['AnnotationMissionName'] = self.annotation_mission_name
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.conversation_time_end_filter is not None:
            result['ConversationTimeEndFilter'] = self.conversation_time_end_filter
        if self.conversation_time_start_filter is not None:
            result['ConversationTimeStartFilter'] = self.conversation_time_start_filter
        if self.exclude_other_session is not None:
            result['ExcludeOtherSession'] = self.exclude_other_session
        if self.finished is not None:
            result['Finished'] = self.finished
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.sampling_count is not None:
            result['SamplingCount'] = self.sampling_count
        if self.sampling_rate is not None:
            result['SamplingRate'] = self.sampling_rate
        if self.sampling_type is not None:
            result['SamplingType'] = self.sampling_type
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.session_end_reason_filter_list is not None:
            result['SessionEndReasonFilterList'] = self.session_end_reason_filter_list
        if self.session_end_reason_filter_list_json_string is not None:
            result['SessionEndReasonFilterListJsonString'] = self.session_end_reason_filter_list_json_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AnnotationMissionDataSourceType') is not None:
            self.annotation_mission_data_source_type = m.get('AnnotationMissionDataSourceType')
        if m.get('AnnotationMissionDebugDataSourceList') is not None:
            self.annotation_mission_debug_data_source_list = m.get('AnnotationMissionDebugDataSourceList')
        if m.get('AnnotationMissionDebugDataSourceListJsonString') is not None:
            self.annotation_mission_debug_data_source_list_json_string = m.get('AnnotationMissionDebugDataSourceListJsonString')
        if m.get('AnnotationMissionName') is not None:
            self.annotation_mission_name = m.get('AnnotationMissionName')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ConversationTimeEndFilter') is not None:
            self.conversation_time_end_filter = m.get('ConversationTimeEndFilter')
        if m.get('ConversationTimeStartFilter') is not None:
            self.conversation_time_start_filter = m.get('ConversationTimeStartFilter')
        if m.get('ExcludeOtherSession') is not None:
            self.exclude_other_session = m.get('ExcludeOtherSession')
        if m.get('Finished') is not None:
            self.finished = m.get('Finished')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SamplingCount') is not None:
            self.sampling_count = m.get('SamplingCount')
        if m.get('SamplingRate') is not None:
            self.sampling_rate = m.get('SamplingRate')
        if m.get('SamplingType') is not None:
            self.sampling_type = m.get('SamplingType')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SessionEndReasonFilterList') is not None:
            self.session_end_reason_filter_list = m.get('SessionEndReasonFilterList')
        if m.get('SessionEndReasonFilterListJsonString') is not None:
            self.session_end_reason_filter_list_json_string = m.get('SessionEndReasonFilterListJsonString')
        return self


class CreateAnnotationMissionShrinkRequest(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        agent_key: str = None,
        annotation_mission_data_source_type: int = None,
        annotation_mission_debug_data_source_list_shrink: str = None,
        annotation_mission_debug_data_source_list_json_string: str = None,
        annotation_mission_name: str = None,
        chatbot_id: str = None,
        conversation_time_end_filter: int = None,
        conversation_time_start_filter: int = None,
        exclude_other_session: bool = None,
        finished: bool = None,
        instance_id: str = None,
        sampling_count: int = None,
        sampling_rate: int = None,
        sampling_type: int = None,
        script_id: str = None,
        session_end_reason_filter_list: List[int] = None,
        session_end_reason_filter_list_json_string: str = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.annotation_mission_data_source_type = annotation_mission_data_source_type
        self.annotation_mission_debug_data_source_list_shrink = annotation_mission_debug_data_source_list_shrink
        self.annotation_mission_debug_data_source_list_json_string = annotation_mission_debug_data_source_list_json_string
        self.annotation_mission_name = annotation_mission_name
        self.chatbot_id = chatbot_id
        self.conversation_time_end_filter = conversation_time_end_filter
        self.conversation_time_start_filter = conversation_time_start_filter
        self.exclude_other_session = exclude_other_session
        self.finished = finished
        self.instance_id = instance_id
        self.sampling_count = sampling_count
        self.sampling_rate = sampling_rate
        self.sampling_type = sampling_type
        self.script_id = script_id
        self.session_end_reason_filter_list = session_end_reason_filter_list
        self.session_end_reason_filter_list_json_string = session_end_reason_filter_list_json_string

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.annotation_mission_data_source_type is not None:
            result['AnnotationMissionDataSourceType'] = self.annotation_mission_data_source_type
        if self.annotation_mission_debug_data_source_list_shrink is not None:
            result['AnnotationMissionDebugDataSourceList'] = self.annotation_mission_debug_data_source_list_shrink
        if self.annotation_mission_debug_data_source_list_json_string is not None:
            result['AnnotationMissionDebugDataSourceListJsonString'] = self.annotation_mission_debug_data_source_list_json_string
        if self.annotation_mission_name is not None:
            result['AnnotationMissionName'] = self.annotation_mission_name
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.conversation_time_end_filter is not None:
            result['ConversationTimeEndFilter'] = self.conversation_time_end_filter
        if self.conversation_time_start_filter is not None:
            result['ConversationTimeStartFilter'] = self.conversation_time_start_filter
        if self.exclude_other_session is not None:
            result['ExcludeOtherSession'] = self.exclude_other_session
        if self.finished is not None:
            result['Finished'] = self.finished
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.sampling_count is not None:
            result['SamplingCount'] = self.sampling_count
        if self.sampling_rate is not None:
            result['SamplingRate'] = self.sampling_rate
        if self.sampling_type is not None:
            result['SamplingType'] = self.sampling_type
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.session_end_reason_filter_list is not None:
            result['SessionEndReasonFilterList'] = self.session_end_reason_filter_list
        if self.session_end_reason_filter_list_json_string is not None:
            result['SessionEndReasonFilterListJsonString'] = self.session_end_reason_filter_list_json_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AnnotationMissionDataSourceType') is not None:
            self.annotation_mission_data_source_type = m.get('AnnotationMissionDataSourceType')
        if m.get('AnnotationMissionDebugDataSourceList') is not None:
            self.annotation_mission_debug_data_source_list_shrink = m.get('AnnotationMissionDebugDataSourceList')
        if m.get('AnnotationMissionDebugDataSourceListJsonString') is not None:
            self.annotation_mission_debug_data_source_list_json_string = m.get('AnnotationMissionDebugDataSourceListJsonString')
        if m.get('AnnotationMissionName') is not None:
            self.annotation_mission_name = m.get('AnnotationMissionName')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ConversationTimeEndFilter') is not None:
            self.conversation_time_end_filter = m.get('ConversationTimeEndFilter')
        if m.get('ConversationTimeStartFilter') is not None:
            self.conversation_time_start_filter = m.get('ConversationTimeStartFilter')
        if m.get('ExcludeOtherSession') is not None:
            self.exclude_other_session = m.get('ExcludeOtherSession')
        if m.get('Finished') is not None:
            self.finished = m.get('Finished')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SamplingCount') is not None:
            self.sampling_count = m.get('SamplingCount')
        if m.get('SamplingRate') is not None:
            self.sampling_rate = m.get('SamplingRate')
        if m.get('SamplingType') is not None:
            self.sampling_type = m.get('SamplingType')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SessionEndReasonFilterList') is not None:
            self.session_end_reason_filter_list = m.get('SessionEndReasonFilterList')
        if m.get('SessionEndReasonFilterListJsonString') is not None:
            self.session_end_reason_filter_list_json_string = m.get('SessionEndReasonFilterListJsonString')
        return self


class CreateAnnotationMissionResponseBodyData(TeaModel):
    def __init__(
        self,
        message: str = None,
        success: bool = None,
    ):
        self.message = message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateAnnotationMissionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateAnnotationMissionResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateAnnotationMissionResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateAnnotationMissionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAnnotationMissionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAnnotationMissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchJobsRequest(TeaModel):
    def __init__(
        self,
        batch_job_description: str = None,
        batch_job_name: str = None,
        calling_number: List[str] = None,
        instance_id: str = None,
        job_file_path: str = None,
        scenario_id: str = None,
        script_id: str = None,
        strategy_json: str = None,
        submitted: bool = None,
    ):
        self.batch_job_description = batch_job_description
        # This parameter is required.
        self.batch_job_name = batch_job_name
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        self.job_file_path = job_file_path
        self.scenario_id = scenario_id
        self.script_id = script_id
        self.strategy_json = strategy_json
        # This parameter is required.
        self.submitted = submitted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_description is not None:
            result['BatchJobDescription'] = self.batch_job_description
        if self.batch_job_name is not None:
            result['BatchJobName'] = self.batch_job_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchJobDescription') is not None:
            self.batch_job_description = m.get('BatchJobDescription')
        if m.get('BatchJobName') is not None:
            self.batch_job_name = m.get('BatchJobName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        return self


class CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateBatchJobsResponseBodyBatchJobStrategy(TeaModel):
    def __init__(
        self,
        customized: str = None,
        end_time: int = None,
        follow_up_strategy: str = None,
        is_template: bool = None,
        max_attempts_per_day: int = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        start_time: int = None,
        strategy_description: str = None,
        strategy_id: str = None,
        strategy_name: str = None,
        type: str = None,
        working_time: List[CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime] = None,
    ):
        self.customized = customized
        self.end_time = end_time
        self.follow_up_strategy = follow_up_strategy
        self.is_template = is_template
        self.max_attempts_per_day = max_attempts_per_day
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.start_time = start_time
        self.strategy_description = strategy_description
        self.strategy_id = strategy_id
        self.strategy_name = strategy_name
        self.type = type
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateBatchJobsResponseBodyBatchJobStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateBatchJobsResponseBodyBatchJob(TeaModel):
    def __init__(
        self,
        batch_job_id: str = None,
        calling_numbers: List[str] = None,
        creation_time: int = None,
        job_file_path: str = None,
        job_group_description: str = None,
        job_group_name: str = None,
        scenario_id: str = None,
        strategy: CreateBatchJobsResponseBodyBatchJobStrategy = None,
    ):
        self.batch_job_id = batch_job_id
        self.calling_numbers = calling_numbers
        self.creation_time = creation_time
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description
        self.job_group_name = job_group_name
        self.scenario_id = scenario_id
        self.strategy = strategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_id is not None:
            result['BatchJobId'] = self.batch_job_id
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchJobId') is not None:
            self.batch_job_id = m.get('BatchJobId')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateBatchJobsResponseBodyBatchJobStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateBatchJobsResponseBody(TeaModel):
    def __init__(
        self,
        batch_job: CreateBatchJobsResponseBodyBatchJob = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.batch_job = batch_job
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.batch_job:
            self.batch_job.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job is not None:
            result['BatchJob'] = self.batch_job.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchJob') is not None:
            temp_model = CreateBatchJobsResponseBodyBatchJob()
            self.batch_job = temp_model.from_map(m['BatchJob'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBatchJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchRepeatJobRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        description: str = None,
        filter_status: str = None,
        flash_sms_extras: str = None,
        instance_id: str = None,
        min_concurrency: int = None,
        name: str = None,
        priority: str = None,
        recall_calling_number: List[str] = None,
        recall_strategy_json: str = None,
        ringing_duration: int = None,
        script_id: str = None,
        source_group_id: str = None,
        strategy_json: str = None,
    ):
        self.calling_number = calling_number
        self.description = description
        self.filter_status = filter_status
        self.flash_sms_extras = flash_sms_extras
        # This parameter is required.
        self.instance_id = instance_id
        self.min_concurrency = min_concurrency
        # This parameter is required.
        self.name = name
        self.priority = priority
        self.recall_calling_number = recall_calling_number
        self.recall_strategy_json = recall_strategy_json
        self.ringing_duration = ringing_duration
        self.script_id = script_id
        # This parameter is required.
        self.source_group_id = source_group_id
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.filter_status is not None:
            result['FilterStatus'] = self.filter_status
        if self.flash_sms_extras is not None:
            result['FlashSmsExtras'] = self.flash_sms_extras
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.name is not None:
            result['Name'] = self.name
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_calling_number is not None:
            result['RecallCallingNumber'] = self.recall_calling_number
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.source_group_id is not None:
            result['SourceGroupId'] = self.source_group_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FilterStatus') is not None:
            self.filter_status = m.get('FilterStatus')
        if m.get('FlashSmsExtras') is not None:
            self.flash_sms_extras = m.get('FlashSmsExtras')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallCallingNumber') is not None:
            self.recall_calling_number = m.get('RecallCallingNumber')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SourceGroupId') is not None:
            self.source_group_id = m.get('SourceGroupId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class CreateBatchRepeatJobResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        id: str = None,
        min_concurrency: int = None,
        priority: str = None,
        ringing_duration: int = None,
    ):
        self.id = id
        self.min_concurrency = min_concurrency
        self.priority = priority
        self.ringing_duration = ringing_duration

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        return self


class CreateBatchRepeatJobResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group: CreateBatchRepeatJobResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateBatchRepeatJobResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchRepeatJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBatchRepeatJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBatchRepeatJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBeebotIntentRequestIntentDefinition(TeaModel):
    def __init__(
        self,
        alias_name: str = None,
        intent_name: str = None,
    ):
        self.alias_name = alias_name
        # This parameter is required.
        self.intent_name = intent_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias_name is not None:
            result['AliasName'] = self.alias_name
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliasName') is not None:
            self.alias_name = m.get('AliasName')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        return self


class CreateBeebotIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_definition: CreateBeebotIntentRequestIntentDefinition = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_definition = intent_definition
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        if self.intent_definition:
            self.intent_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_definition is not None:
            result['IntentDefinition'] = self.intent_definition.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDefinition') is not None:
            temp_model = CreateBeebotIntentRequestIntentDefinition()
            self.intent_definition = temp_model.from_map(m['IntentDefinition'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateBeebotIntentShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_definition_shrink: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_definition_shrink = intent_definition_shrink
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_definition_shrink is not None:
            result['IntentDefinition'] = self.intent_definition_shrink
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDefinition') is not None:
            self.intent_definition_shrink = m.get('IntentDefinition')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateBeebotIntentResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        intent_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBeebotIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBeebotIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBeebotIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBeebotIntentLgfRequestLgfDefinition(TeaModel):
    def __init__(
        self,
        intent_id: int = None,
        rule_text: str = None,
    ):
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.rule_text = rule_text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.rule_text is not None:
            result['RuleText'] = self.rule_text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('RuleText') is not None:
            self.rule_text = m.get('RuleText')
        return self


class CreateBeebotIntentLgfRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        lgf_definition: CreateBeebotIntentLgfRequestLgfDefinition = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.lgf_definition = lgf_definition
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        if self.lgf_definition:
            self.lgf_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.lgf_definition is not None:
            result['LgfDefinition'] = self.lgf_definition.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LgfDefinition') is not None:
            temp_model = CreateBeebotIntentLgfRequestLgfDefinition()
            self.lgf_definition = temp_model.from_map(m['LgfDefinition'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateBeebotIntentLgfShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        lgf_definition_shrink: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.lgf_definition_shrink = lgf_definition_shrink
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.lgf_definition_shrink is not None:
            result['LgfDefinition'] = self.lgf_definition_shrink
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LgfDefinition') is not None:
            self.lgf_definition_shrink = m.get('LgfDefinition')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateBeebotIntentLgfResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        lgf_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.lgf_id = lgf_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBeebotIntentLgfResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBeebotIntentLgfResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBeebotIntentLgfResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBeebotIntentUserSayRequestUserSayDefinition(TeaModel):
    def __init__(
        self,
        content: str = None,
        intent_id: int = None,
    ):
        # This parameter is required.
        self.content = content
        # This parameter is required.
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class CreateBeebotIntentUserSayRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        user_say_definition: CreateBeebotIntentUserSayRequestUserSayDefinition = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.user_say_definition = user_say_definition

    def validate(self):
        if self.user_say_definition:
            self.user_say_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_say_definition is not None:
            result['UserSayDefinition'] = self.user_say_definition.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserSayDefinition') is not None:
            temp_model = CreateBeebotIntentUserSayRequestUserSayDefinition()
            self.user_say_definition = temp_model.from_map(m['UserSayDefinition'])
        return self


class CreateBeebotIntentUserSayShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        user_say_definition_shrink: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.user_say_definition_shrink = user_say_definition_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_say_definition_shrink is not None:
            result['UserSayDefinition'] = self.user_say_definition_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserSayDefinition') is not None:
            self.user_say_definition_shrink = m.get('UserSayDefinition')
        return self


class CreateBeebotIntentUserSayResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        user_say_id: int = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class CreateBeebotIntentUserSayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateBeebotIntentUserSayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateBeebotIntentUserSayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDialogueFlowRequest(TeaModel):
    def __init__(
        self,
        dialogue_flow_type: str = None,
        dialogue_name: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.dialogue_flow_type = dialogue_flow_type
        # This parameter is required.
        self.dialogue_name = dialogue_name
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_type is not None:
            result['DialogueFlowType'] = self.dialogue_flow_type
        if self.dialogue_name is not None:
            result['DialogueName'] = self.dialogue_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DialogueFlowType') is not None:
            self.dialogue_flow_type = m.get('DialogueFlowType')
        if m.get('DialogueName') is not None:
            self.dialogue_name = m.get('DialogueName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateDialogueFlowResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dialogue_flow_id: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.dialogue_flow_id = dialogue_flow_id
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDialogueFlowResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDialogueFlowResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDownloadUrlRequest(TeaModel):
    def __init__(
        self,
        download_task_id: str = None,
        file_id: str = None,
    ):
        # This parameter is required.
        self.download_task_id = download_task_id
        # This parameter is required.
        self.file_id = file_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_task_id is not None:
            result['DownloadTaskId'] = self.download_task_id
        if self.file_id is not None:
            result['FileId'] = self.file_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadTaskId') is not None:
            self.download_task_id = m.get('DownloadTaskId')
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        return self


class CreateDownloadUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        file_http_url: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.file_http_url = file_http_url
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateDownloadUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDownloadUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateGlobalQuestionRequest(TeaModel):
    def __init__(
        self,
        answers: str = None,
        global_question_name: str = None,
        global_question_type: str = None,
        instance_id: str = None,
        questions: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.answers = answers
        # This parameter is required.
        self.global_question_name = global_question_name
        # This parameter is required.
        self.global_question_type = global_question_type
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.questions = questions
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateGlobalQuestionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        global_question_id: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.global_question_id = global_question_id
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateGlobalQuestionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateGlobalQuestionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        instance_description: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        nlu_service_type: str = None,
        resource_group_id: str = None,
    ):
        self.calling_number = calling_number
        self.instance_description = instance_description
        # This parameter is required.
        self.instance_name = instance_name
        # This parameter is required.
        self.max_concurrent_conversation = max_concurrent_conversation
        self.nlu_service_type = nlu_service_type
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.nlu_service_type is not None:
            result['NluServiceType'] = self.nlu_service_type
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('NluServiceType') is not None:
            self.nlu_service_type = m.get('NluServiceType')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        creator_id: int = None,
        creator_name: str = None,
        instance_description: str = None,
        instance_id: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        owner_name: str = None,
        resource_group_id: str = None,
    ):
        self.creation_time = creation_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.instance_description = instance_description
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.max_concurrent_conversation = max_concurrent_conversation
        self.owner_name = owner_name
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class CreateInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        instance: CreateInstanceResponseBodyInstance = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.instance = instance
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = CreateInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceBindNumberRequest(TeaModel):
    def __init__(
        self,
        instance_list: str = None,
        number: str = None,
    ):
        self.instance_list = instance_list
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_list is not None:
            result['InstanceList'] = self.instance_list
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceList') is not None:
            self.instance_list = m.get('InstanceList')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class CreateInstanceBindNumberResponseBodyDataList(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        success: bool = None,
    ):
        self.instance_id = instance_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceBindNumberResponseBodyData(TeaModel):
    def __init__(
        self,
        list: List[CreateInstanceBindNumberResponseBodyDataList] = None,
    ):
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = CreateInstanceBindNumberResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class CreateInstanceBindNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CreateInstanceBindNumberResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = CreateInstanceBindNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceBindNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateInstanceBindNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateInstanceBindNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_description: str = None,
        intent_name: str = None,
        keywords: str = None,
        script_id: str = None,
        utterances: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.intent_description = intent_description
        # This parameter is required.
        self.intent_name = intent_name
        self.keywords = keywords
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.utterances = utterances

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class CreateIntentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        intent_id: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobDataParsingTaskRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_file_path: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_file_path = job_file_path

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        return self


class CreateJobDataParsingTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_data_parsing_task_id: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobDataParsingTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateJobDataParsingTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobDataParsingTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        flash_sms_extras: str = None,
        instance_id: str = None,
        job_group_description: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        priority: str = None,
        recall_calling_number: List[str] = None,
        recall_strategy_json: str = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        script_id: str = None,
        strategy_json: str = None,
    ):
        self.calling_number = calling_number
        self.flash_sms_extras = flash_sms_extras
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_description = job_group_description
        # This parameter is required.
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.priority = priority
        self.recall_calling_number = recall_calling_number
        self.recall_strategy_json = recall_strategy_json
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.script_id = script_id
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.flash_sms_extras is not None:
            result['FlashSmsExtras'] = self.flash_sms_extras
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_calling_number is not None:
            result['RecallCallingNumber'] = self.recall_calling_number
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('FlashSmsExtras') is not None:
            self.flash_sms_extras = m.get('FlashSmsExtras')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallCallingNumber') is not None:
            self.recall_calling_number = m.get('RecallCallingNumber')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class CreateJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(
        self,
        file_http_url: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.file_http_url = file_http_url
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(
        self,
        empty_number_ignore: bool = None,
        in_arrears_ignore: bool = None,
        out_of_service_ignore: bool = None,
    ):
        self.empty_number_ignore = empty_number_ignore
        self.in_arrears_ignore = in_arrears_ignore
        self.out_of_service_ignore = out_of_service_ignore

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class CreateJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class CreateJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        customized: str = None,
        end_time: int = None,
        follow_up_strategy: str = None,
        is_template: bool = None,
        max_attempts_per_day: int = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        start_time: int = None,
        strategy_description: str = None,
        strategy_id: str = None,
        strategy_name: str = None,
        type: str = None,
        working_time: List[CreateJobGroupResponseBodyJobGroupStrategyWorkingTime] = None,
    ):
        self.customized = customized
        self.end_time = end_time
        self.follow_up_strategy = follow_up_strategy
        self.is_template = is_template
        self.max_attempts_per_day = max_attempts_per_day
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.start_time = start_time
        self.strategy_description = strategy_description
        self.strategy_id = strategy_id
        self.strategy_name = strategy_name
        self.type = type
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class CreateJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        creation_time: int = None,
        export_progress: CreateJobGroupResponseBodyJobGroupExportProgress = None,
        job_data_parsing_task_id: str = None,
        job_file_path: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        modify_time: str = None,
        priority: str = None,
        recall_calling_numbers: List[str] = None,
        recall_strategy: CreateJobGroupResponseBodyJobGroupRecallStrategy = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        script_name: str = None,
        script_version: str = None,
        status: str = None,
        strategy: CreateJobGroupResponseBodyJobGroupStrategy = None,
    ):
        self.calling_numbers = calling_numbers
        self.creation_time = creation_time
        self.export_progress = export_progress
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.modify_time = modify_time
        self.priority = priority
        self.recall_calling_numbers = recall_calling_numbers
        self.recall_strategy = recall_strategy
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.script_name = script_name
        self.script_version = script_version
        self.status = status
        self.strategy = strategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_calling_numbers is not None:
            result['RecallCallingNumbers'] = self.recall_calling_numbers
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallCallingNumbers') is not None:
            self.recall_calling_numbers = m.get('RecallCallingNumbers')
        if m.get('RecallStrategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class CreateJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group: CreateJobGroupResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupExportTaskRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        option: List[str] = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.option = option

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.option is not None:
            result['Option'] = self.option
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Option') is not None:
            self.option = m.get('Option')
        return self


class CreateJobGroupExportTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        task_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateJobGroupExportTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateJobGroupExportTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateJobGroupExportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNumberDistrictInfoDownloadUrlRequest(TeaModel):
    def __init__(
        self,
        version_id: str = None,
    ):
        self.version_id = version_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class CreateNumberDistrictInfoDownloadUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        file_http_url: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.file_http_url = file_http_url
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateNumberDistrictInfoDownloadUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateNumberDistrictInfoDownloadUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNumberDistrictInfoDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateNumberDistrictInfoParsingTaskRequest(TeaModel):
    def __init__(
        self,
        file_path: str = None,
        file_size: int = None,
    ):
        self.file_path = file_path
        self.file_size = file_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        return self


class CreateNumberDistrictInfoParsingTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateNumberDistrictInfoParsingTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateNumberDistrictInfoParsingTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateNumberDistrictInfoParsingTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOutboundCallNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        number: str = None,
        rate_limit_count: int = None,
        rate_limit_period: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.number = number
        # This parameter is required.
        self.rate_limit_count = rate_limit_count
        # This parameter is required.
        self.rate_limit_period = rate_limit_period

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class CreateOutboundCallNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        outbound_call_number_id: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.outbound_call_number_id = outbound_call_number_id
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateOutboundCallNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateOutboundCallNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScriptRequest(TeaModel):
    def __init__(
        self,
        agent_id: int = None,
        agent_key: str = None,
        agent_llm: bool = None,
        asr_config: str = None,
        chatbot_id: str = None,
        emotion_enable: bool = None,
        industry: str = None,
        instance_id: str = None,
        long_wait_enable: bool = None,
        mini_playback_enable: bool = None,
        new_barge_in_enable: bool = None,
        nlu_access_type: str = None,
        nlu_engine: str = None,
        scene: str = None,
        script_content: List[str] = None,
        script_description: str = None,
        script_name: str = None,
        script_nlu_profile_json_string: str = None,
        script_waveform: List[str] = None,
        tts_config: str = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.agent_llm = agent_llm
        self.asr_config = asr_config
        self.chatbot_id = chatbot_id
        self.emotion_enable = emotion_enable
        # This parameter is required.
        self.industry = industry
        # This parameter is required.
        self.instance_id = instance_id
        self.long_wait_enable = long_wait_enable
        self.mini_playback_enable = mini_playback_enable
        self.new_barge_in_enable = new_barge_in_enable
        self.nlu_access_type = nlu_access_type
        self.nlu_engine = nlu_engine
        # This parameter is required.
        self.scene = scene
        self.script_content = script_content
        self.script_description = script_description
        # This parameter is required.
        self.script_name = script_name
        self.script_nlu_profile_json_string = script_nlu_profile_json_string
        self.script_waveform = script_waveform
        self.tts_config = tts_config

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.agent_llm is not None:
            result['AgentLlm'] = self.agent_llm
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.nlu_access_type is not None:
            result['NluAccessType'] = self.nlu_access_type
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_nlu_profile_json_string is not None:
            result['ScriptNluProfileJsonString'] = self.script_nlu_profile_json_string
        if self.script_waveform is not None:
            result['ScriptWaveform'] = self.script_waveform
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AgentLlm') is not None:
            self.agent_llm = m.get('AgentLlm')
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('NluAccessType') is not None:
            self.nlu_access_type = m.get('NluAccessType')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptNluProfileJsonString') is not None:
            self.script_nlu_profile_json_string = m.get('ScriptNluProfileJsonString')
        if m.get('ScriptWaveform') is not None:
            self.script_waveform = m.get('ScriptWaveform')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        return self


class CreateScriptResponseBodyScript(TeaModel):
    def __init__(
        self,
        debug_status: str = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        nlu_access_type: str = None,
        nlu_engine: str = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        update_time: int = None,
    ):
        self.debug_status = debug_status
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.nlu_access_type = nlu_access_type
        self.nlu_engine = nlu_engine
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.nlu_access_type is not None:
            result['NluAccessType'] = self.nlu_access_type
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('NluAccessType') is not None:
            self.nlu_access_type = m.get('NluAccessType')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class CreateScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script: CreateScriptResponseBodyScript = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script = script
        self.success = success

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = CreateScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScriptWaveformRequest(TeaModel):
    def __init__(
        self,
        file_id: str = None,
        file_name: str = None,
        instance_id: str = None,
        script_content: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.file_id = file_id
        # This parameter is required.
        self.file_name = file_name
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_content = script_content
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class CreateScriptWaveformResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_waveform_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_waveform_id = script_waveform_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateScriptWaveformResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateScriptWaveformResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateScriptWaveformResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTagRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        tag_group: str = None,
        tag_name: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.tag_group = tag_group
        # This parameter is required.
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class CreateTagResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        tag_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.tag_id = tag_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        return self


class CreateTagResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateTagResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTagResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTaskExportTaskRequest(TeaModel):
    def __init__(
        self,
        actual_time_gte: int = None,
        actual_time_lte: int = None,
        call_duration_gte: int = None,
        call_duration_lte: int = None,
        called_number: str = None,
        calling_number: str = None,
        has_answered: bool = None,
        has_hang_up_by_rejection: bool = None,
        has_reached_end_of_flow: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_group_name_query: str = None,
        job_id: str = None,
        job_status_string_list: str = None,
        other_id: str = None,
        page_index: int = None,
        page_size: int = None,
        recording_duration_gte: int = None,
        recording_duration_lte: int = None,
        script_name_query: str = None,
        sort_by: str = None,
        sort_order: str = None,
        task_create_time_gte: int = None,
        task_create_time_lte: int = None,
        task_id: str = None,
        task_status_string_list: str = None,
        user_id_match: str = None,
    ):
        self.actual_time_gte = actual_time_gte
        self.actual_time_lte = actual_time_lte
        self.call_duration_gte = call_duration_gte
        self.call_duration_lte = call_duration_lte
        self.called_number = called_number
        self.calling_number = calling_number
        self.has_answered = has_answered
        self.has_hang_up_by_rejection = has_hang_up_by_rejection
        self.has_reached_end_of_flow = has_reached_end_of_flow
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_group_name_query = job_group_name_query
        self.job_id = job_id
        self.job_status_string_list = job_status_string_list
        self.other_id = other_id
        self.page_index = page_index
        self.page_size = page_size
        self.recording_duration_gte = recording_duration_gte
        self.recording_duration_lte = recording_duration_lte
        self.script_name_query = script_name_query
        self.sort_by = sort_by
        self.sort_order = sort_order
        self.task_create_time_gte = task_create_time_gte
        self.task_create_time_lte = task_create_time_lte
        self.task_id = task_id
        self.task_status_string_list = task_status_string_list
        self.user_id_match = user_id_match

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time_gte is not None:
            result['ActualTimeGte'] = self.actual_time_gte
        if self.actual_time_lte is not None:
            result['ActualTimeLte'] = self.actual_time_lte
        if self.call_duration_gte is not None:
            result['CallDurationGte'] = self.call_duration_gte
        if self.call_duration_lte is not None:
            result['CallDurationLte'] = self.call_duration_lte
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name_query is not None:
            result['JobGroupNameQuery'] = self.job_group_name_query
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status_string_list is not None:
            result['JobStatusStringList'] = self.job_status_string_list
        if self.other_id is not None:
            result['OtherId'] = self.other_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.recording_duration_gte is not None:
            result['RecordingDurationGte'] = self.recording_duration_gte
        if self.recording_duration_lte is not None:
            result['RecordingDurationLte'] = self.recording_duration_lte
        if self.script_name_query is not None:
            result['ScriptNameQuery'] = self.script_name_query
        if self.sort_by is not None:
            result['SortBy'] = self.sort_by
        if self.sort_order is not None:
            result['SortOrder'] = self.sort_order
        if self.task_create_time_gte is not None:
            result['TaskCreateTimeGte'] = self.task_create_time_gte
        if self.task_create_time_lte is not None:
            result['TaskCreateTimeLte'] = self.task_create_time_lte
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status_string_list is not None:
            result['TaskStatusStringList'] = self.task_status_string_list
        if self.user_id_match is not None:
            result['UserIdMatch'] = self.user_id_match
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTimeGte') is not None:
            self.actual_time_gte = m.get('ActualTimeGte')
        if m.get('ActualTimeLte') is not None:
            self.actual_time_lte = m.get('ActualTimeLte')
        if m.get('CallDurationGte') is not None:
            self.call_duration_gte = m.get('CallDurationGte')
        if m.get('CallDurationLte') is not None:
            self.call_duration_lte = m.get('CallDurationLte')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupNameQuery') is not None:
            self.job_group_name_query = m.get('JobGroupNameQuery')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatusStringList') is not None:
            self.job_status_string_list = m.get('JobStatusStringList')
        if m.get('OtherId') is not None:
            self.other_id = m.get('OtherId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RecordingDurationGte') is not None:
            self.recording_duration_gte = m.get('RecordingDurationGte')
        if m.get('RecordingDurationLte') is not None:
            self.recording_duration_lte = m.get('RecordingDurationLte')
        if m.get('ScriptNameQuery') is not None:
            self.script_name_query = m.get('ScriptNameQuery')
        if m.get('SortBy') is not None:
            self.sort_by = m.get('SortBy')
        if m.get('SortOrder') is not None:
            self.sort_order = m.get('SortOrder')
        if m.get('TaskCreateTimeGte') is not None:
            self.task_create_time_gte = m.get('TaskCreateTimeGte')
        if m.get('TaskCreateTimeLte') is not None:
            self.task_create_time_lte = m.get('TaskCreateTimeLte')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatusStringList') is not None:
            self.task_status_string_list = m.get('TaskStatusStringList')
        if m.get('UserIdMatch') is not None:
            self.user_id_match = m.get('UserIdMatch')
        return self


class CreateTaskExportTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        task_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateTaskExportTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateTaskExportTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTaskExportTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAgentProfilesRequest(TeaModel):
    def __init__(
        self,
        agent_profile_ids: List[str] = None,
        app_ip: str = None,
    ):
        self.agent_profile_ids = agent_profile_ids
        self.app_ip = app_ip

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_ids is not None:
            result['AgentProfileIds'] = self.agent_profile_ids
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileIds') is not None:
            self.agent_profile_ids = m.get('AgentProfileIds')
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        return self


class DeleteAgentProfilesShrinkRequest(TeaModel):
    def __init__(
        self,
        agent_profile_ids_shrink: str = None,
        app_ip: str = None,
    ):
        self.agent_profile_ids_shrink = agent_profile_ids_shrink
        self.app_ip = app_ip

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_ids_shrink is not None:
            result['AgentProfileIds'] = self.agent_profile_ids_shrink
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileIds') is not None:
            self.agent_profile_ids_shrink = m.get('AgentProfileIds')
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        return self


class DeleteAgentProfilesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteAgentProfilesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAgentProfilesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAgentProfilesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteAllNumberDistrictInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteAllNumberDistrictInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteAllNumberDistrictInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteAllNumberDistrictInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteBeebotIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteBeebotIntentResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        intent_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteBeebotIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteBeebotIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteBeebotIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteBeebotIntentLgfRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: int = None,
        lgf_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.lgf_id = lgf_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteBeebotIntentLgfResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        lgf_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.lgf_id = lgf_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteBeebotIntentLgfResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteBeebotIntentLgfResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteBeebotIntentLgfResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteBeebotIntentUserSayRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: str = None,
        script_id: str = None,
        user_say_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class DeleteBeebotIntentUserSayResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        user_say_id: int = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class DeleteBeebotIntentUserSayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteBeebotIntentUserSayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteBeebotIntentUserSayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactBlockListRequest(TeaModel):
    def __init__(
        self,
        contact_block_list_id: str = None,
        instance_id: str = None,
        operator: str = None,
    ):
        # This parameter is required.
        self.contact_block_list_id = contact_block_list_id
        # This parameter is required.
        self.instance_id = instance_id
        self.operator = operator

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_id is not None:
            result['ContactBlockListId'] = self.contact_block_list_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operator is not None:
            result['Operator'] = self.operator
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactBlockListId') is not None:
            self.contact_block_list_id = m.get('ContactBlockListId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        return self


class DeleteContactBlockListResponseBody(TeaModel):
    def __init__(
        self,
        affected_rows: int = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.affected_rows = affected_rows
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteContactBlockListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteContactBlockListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactWhiteListRequest(TeaModel):
    def __init__(
        self,
        contact_white_list_id: str = None,
        instance_id: str = None,
        operator: str = None,
    ):
        # This parameter is required.
        self.contact_white_list_id = contact_white_list_id
        # This parameter is required.
        self.instance_id = instance_id
        self.operator = operator

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_id is not None:
            result['ContactWhiteListId'] = self.contact_white_list_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operator is not None:
            result['Operator'] = self.operator
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactWhiteListId') is not None:
            self.contact_white_list_id = m.get('ContactWhiteListId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        return self


class DeleteContactWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        affected_rows: int = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.affected_rows = affected_rows
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteContactWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteContactWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDialogueFlowRequest(TeaModel):
    def __init__(
        self,
        dialogue_flow_id: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.dialogue_flow_id = dialogue_flow_id
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteDialogueFlowResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteDialogueFlowResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDialogueFlowResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteGlobalQuestionRequest(TeaModel):
    def __init__(
        self,
        global_question_id: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.global_question_id = global_question_id
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteGlobalQuestionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteGlobalQuestionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteGlobalQuestionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteIntentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DeleteJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOutboundCallNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        outbound_call_number_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.outbound_call_number_id = outbound_call_number_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        return self


class DeleteOutboundCallNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteOutboundCallNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteOutboundCallNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DeleteScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        uuids_json: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        self.uuids_json = uuids_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.uuids_json is not None:
            result['UuidsJson'] = self.uuids_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UuidsJson') is not None:
            self.uuids_json = m.get('UuidsJson')
        return self


class DeleteScriptRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteScriptRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteScriptWaveformRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        script_waveform_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.script_waveform_id = script_waveform_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        return self


class DeleteScriptWaveformResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteScriptWaveformResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteScriptWaveformResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteScriptWaveformResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeBeebotIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeBeebotIntentResponseBodyIntent(TeaModel):
    def __init__(
        self,
        alias_name: str = None,
        create_time: str = None,
        create_user_id: str = None,
        create_user_name: str = None,
        intent_id: int = None,
        intent_name: str = None,
        modify_time: str = None,
        modify_user_id: str = None,
        modify_user_name: str = None,
    ):
        self.alias_name = alias_name
        self.create_time = create_time
        self.create_user_id = create_user_id
        self.create_user_name = create_user_name
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.modify_time = modify_time
        self.modify_user_id = modify_user_id
        self.modify_user_name = modify_user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias_name is not None:
            result['AliasName'] = self.alias_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.create_user_id is not None:
            result['CreateUserId'] = self.create_user_id
        if self.create_user_name is not None:
            result['CreateUserName'] = self.create_user_name
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.modify_user_id is not None:
            result['ModifyUserId'] = self.modify_user_id
        if self.modify_user_name is not None:
            result['ModifyUserName'] = self.modify_user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliasName') is not None:
            self.alias_name = m.get('AliasName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreateUserId') is not None:
            self.create_user_id = m.get('CreateUserId')
        if m.get('CreateUserName') is not None:
            self.create_user_name = m.get('CreateUserName')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('ModifyUserId') is not None:
            self.modify_user_id = m.get('ModifyUserId')
        if m.get('ModifyUserName') is not None:
            self.modify_user_name = m.get('ModifyUserName')
        return self


class DescribeBeebotIntentResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        intent: DescribeBeebotIntentResponseBodyIntent = None,
        intent_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.intent = intent
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.intent:
            self.intent.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent is not None:
            result['Intent'] = self.intent.to_map()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Intent') is not None:
            temp_model = DescribeBeebotIntentResponseBodyIntent()
            self.intent = temp_model.from_map(m['Intent'])
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeBeebotIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeBeebotIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeBeebotIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDialogueNodeStatisticsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        limit: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id
        # This parameter is required.
        self.limit = limit

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.limit is not None:
            result['Limit'] = self.limit
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        return self


class DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes(TeaModel):
    def __init__(
        self,
        hang_up_num: int = None,
        node_id: str = None,
        node_name: str = None,
        rate_display: str = None,
    ):
        self.hang_up_num = hang_up_num
        self.node_id = node_id
        self.node_name = node_name
        self.rate_display = rate_display

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hang_up_num is not None:
            result['HangUpNum'] = self.hang_up_num
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.rate_display is not None:
            result['RateDisplay'] = self.rate_display
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('HangUpNum') is not None:
            self.hang_up_num = m.get('HangUpNum')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('RateDisplay') is not None:
            self.rate_display = m.get('RateDisplay')
        return self


class DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        hang_up_num: int = None,
        hit_num: int = None,
        id: str = None,
        instance_id: str = None,
        no_answer_num: int = None,
        node_id: str = None,
        node_name: str = None,
    ):
        self.group_id = group_id
        self.hang_up_num = hang_up_num
        self.hit_num = hit_num
        # id
        self.id = id
        self.instance_id = instance_id
        self.no_answer_num = no_answer_num
        self.node_id = node_id
        self.node_name = node_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hang_up_num is not None:
            result['HangUpNum'] = self.hang_up_num
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.no_answer_num is not None:
            result['NoAnswerNum'] = self.no_answer_num
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HangUpNum') is not None:
            self.hang_up_num = m.get('HangUpNum')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NoAnswerNum') is not None:
            self.no_answer_num = m.get('NoAnswerNum')
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        return self


class DescribeDialogueNodeStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        group_id: str = None,
        hang_up_dialogue_nodes: List[DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes] = None,
        http_status_code: int = None,
        instance_id: str = None,
        message: str = None,
        no_answer_dialogue_nodes: List[DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes] = None,
        request_id: str = None,
        success: bool = None,
        total_completed: int = None,
    ):
        self.code = code
        self.group_id = group_id
        self.hang_up_dialogue_nodes = hang_up_dialogue_nodes
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.message = message
        self.no_answer_dialogue_nodes = no_answer_dialogue_nodes
        self.request_id = request_id
        self.success = success
        self.total_completed = total_completed

    def validate(self):
        if self.hang_up_dialogue_nodes:
            for k in self.hang_up_dialogue_nodes:
                if k:
                    k.validate()
        if self.no_answer_dialogue_nodes:
            for k in self.no_answer_dialogue_nodes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        result['HangUpDialogueNodes'] = []
        if self.hang_up_dialogue_nodes is not None:
            for k in self.hang_up_dialogue_nodes:
                result['HangUpDialogueNodes'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.message is not None:
            result['Message'] = self.message
        result['NoAnswerDialogueNodes'] = []
        if self.no_answer_dialogue_nodes is not None:
            for k in self.no_answer_dialogue_nodes:
                result['NoAnswerDialogueNodes'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        self.hang_up_dialogue_nodes = []
        if m.get('HangUpDialogueNodes') is not None:
            for k in m.get('HangUpDialogueNodes'):
                temp_model = DescribeDialogueNodeStatisticsResponseBodyHangUpDialogueNodes()
                self.hang_up_dialogue_nodes.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        self.no_answer_dialogue_nodes = []
        if m.get('NoAnswerDialogueNodes') is not None:
            for k in m.get('NoAnswerDialogueNodes'):
                temp_model = DescribeDialogueNodeStatisticsResponseBodyNoAnswerDialogueNodes()
                self.no_answer_dialogue_nodes.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        return self


class DescribeDialogueNodeStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDialogueNodeStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDialogueNodeStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeDsReportsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeDsReportsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        ds_reports: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.ds_reports = ds_reports
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.ds_reports is not None:
            result['DsReports'] = self.ds_reports
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DsReports') is not None:
            self.ds_reports = m.get('DsReports')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeDsReportsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeDsReportsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeDsReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGlobalQuestionRequest(TeaModel):
    def __init__(
        self,
        global_question_id: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.global_question_id = global_question_id
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeGlobalQuestionResponseBodyGlobalQuestion(TeaModel):
    def __init__(
        self,
        answers: str = None,
        global_question_id: str = None,
        global_question_name: str = None,
        global_question_type: str = None,
        questions: str = None,
        script_id: str = None,
    ):
        self.answers = answers
        self.global_question_id = global_question_id
        self.global_question_name = global_question_name
        self.global_question_type = global_question_type
        self.questions = questions
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeGlobalQuestionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        global_question: DescribeGlobalQuestionResponseBodyGlobalQuestion = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.global_question = global_question
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.global_question:
            self.global_question.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_question is not None:
            result['GlobalQuestion'] = self.global_question.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestion') is not None:
            temp_model = DescribeGlobalQuestionResponseBodyGlobalQuestion()
            self.global_question = temp_model.from_map(m['GlobalQuestion'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGlobalQuestionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeGlobalQuestionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeGroupExecutingInfoRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress(TeaModel):
    def __init__(
        self,
        cancelled_num: int = None,
        executing_num: int = None,
        failed_num: int = None,
        paused_num: int = None,
        scheduling_num: int = None,
        total_completed_num: int = None,
        total_jobs: int = None,
        total_not_answered_num: int = None,
    ):
        self.cancelled_num = cancelled_num
        self.executing_num = executing_num
        self.failed_num = failed_num
        self.paused_num = paused_num
        self.scheduling_num = scheduling_num
        self.total_completed_num = total_completed_num
        self.total_jobs = total_jobs
        self.total_not_answered_num = total_not_answered_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling_num is not None:
            result['SchedulingNum'] = self.scheduling_num
        if self.total_completed_num is not None:
            result['TotalCompletedNum'] = self.total_completed_num
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered_num is not None:
            result['TotalNotAnsweredNum'] = self.total_not_answered_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('SchedulingNum') is not None:
            self.scheduling_num = m.get('SchedulingNum')
        if m.get('TotalCompletedNum') is not None:
            self.total_completed_num = m.get('TotalCompletedNum')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnsweredNum') is not None:
            self.total_not_answered_num = m.get('TotalNotAnsweredNum')
        return self


class DescribeGroupExecutingInfoResponseBodyExecutingInfo(TeaModel):
    def __init__(
        self,
        call_failed_num: int = None,
        call_num: int = None,
        creator_name: str = None,
        end_time: int = None,
        finished_num: int = None,
        hang_up_by_client_num: int = None,
        jobs_progress: DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress = None,
        no_interaction_num: int = None,
        start_time: int = None,
        transfer_by_intent_num: int = None,
        transfer_by_no_answer: int = None,
    ):
        self.call_failed_num = call_failed_num
        self.call_num = call_num
        self.creator_name = creator_name
        self.end_time = end_time
        self.finished_num = finished_num
        self.hang_up_by_client_num = hang_up_by_client_num
        self.jobs_progress = jobs_progress
        self.no_interaction_num = no_interaction_num
        self.start_time = start_time
        self.transfer_by_intent_num = transfer_by_intent_num
        self.transfer_by_no_answer = transfer_by_no_answer

    def validate(self):
        if self.jobs_progress:
            self.jobs_progress.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_failed_num is not None:
            result['CallFailedNum'] = self.call_failed_num
        if self.call_num is not None:
            result['CallNum'] = self.call_num
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.finished_num is not None:
            result['FinishedNum'] = self.finished_num
        if self.hang_up_by_client_num is not None:
            result['HangUpByClientNum'] = self.hang_up_by_client_num
        if self.jobs_progress is not None:
            result['JobsProgress'] = self.jobs_progress.to_map()
        if self.no_interaction_num is not None:
            result['NoInteractionNum'] = self.no_interaction_num
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.transfer_by_intent_num is not None:
            result['TransferByIntentNum'] = self.transfer_by_intent_num
        if self.transfer_by_no_answer is not None:
            result['TransferByNoAnswer'] = self.transfer_by_no_answer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallFailedNum') is not None:
            self.call_failed_num = m.get('CallFailedNum')
        if m.get('CallNum') is not None:
            self.call_num = m.get('CallNum')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FinishedNum') is not None:
            self.finished_num = m.get('FinishedNum')
        if m.get('HangUpByClientNum') is not None:
            self.hang_up_by_client_num = m.get('HangUpByClientNum')
        if m.get('JobsProgress') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBodyExecutingInfoJobsProgress()
            self.jobs_progress = temp_model.from_map(m['JobsProgress'])
        if m.get('NoInteractionNum') is not None:
            self.no_interaction_num = m.get('NoInteractionNum')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TransferByIntentNum') is not None:
            self.transfer_by_intent_num = m.get('TransferByIntentNum')
        if m.get('TransferByNoAnswer') is not None:
            self.transfer_by_no_answer = m.get('TransferByNoAnswer')
        return self


class DescribeGroupExecutingInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        executing_info: DescribeGroupExecutingInfoResponseBodyExecutingInfo = None,
        group_id: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.executing_info = executing_info
        self.group_id = group_id
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.executing_info:
            self.executing_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.executing_info is not None:
            result['ExecutingInfo'] = self.executing_info.to_map()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ExecutingInfo') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBodyExecutingInfo()
            self.executing_info = temp_model.from_map(m['ExecutingInfo'])
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeGroupExecutingInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeGroupExecutingInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeGroupExecutingInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DescribeInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        creator_id: int = None,
        creator_name: str = None,
        instance_description: str = None,
        instance_id: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        owner_name: str = None,
        resource_group_id: str = None,
    ):
        self.creation_time = creation_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.instance_description = instance_description
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.max_concurrent_conversation = max_concurrent_conversation
        self.owner_name = owner_name
        self.resource_group_id = resource_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        return self


class DescribeInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        instance: DescribeInstanceResponseBodyInstance = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.instance = instance
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = DescribeInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeIntentResponseBodyIntent(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        intent_description: str = None,
        intent_id: str = None,
        intent_name: str = None,
        keywords: str = None,
        script_id: str = None,
        update_time: int = None,
        utterances: str = None,
    ):
        self.create_time = create_time
        self.intent_description = intent_description
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.keywords = keywords
        self.script_id = script_id
        self.update_time = update_time
        self.utterances = utterances

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class DescribeIntentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        intent: DescribeIntentResponseBodyIntent = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.intent = intent
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.intent:
            self.intent.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent is not None:
            result['Intent'] = self.intent.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Intent') is not None:
            temp_model = DescribeIntentResponseBodyIntent()
            self.intent = temp_model.from_map(m['Intent'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeIntentStatisticsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        limit: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id
        self.limit = limit

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.limit is not None:
            result['Limit'] = self.limit
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        return self


class DescribeIntentStatisticsResponseBodyGlobalIntents(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        hit_after_no_answer: int = None,
        hit_num: int = None,
        instance_id: str = None,
        intent_id: str = None,
        intent_name: str = None,
        type: str = None,
    ):
        self.group_id = group_id
        self.hit_after_no_answer = hit_after_no_answer
        self.hit_num = hit_num
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hit_after_no_answer is not None:
            result['HitAfterNoAnswer'] = self.hit_after_no_answer
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HitAfterNoAnswer') is not None:
            self.hit_after_no_answer = m.get('HitAfterNoAnswer')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        hit_after_no_answer: int = None,
        instance_id: str = None,
        intent_id: str = None,
        intent_name: str = None,
    ):
        self.group_id = group_id
        self.hit_after_no_answer = hit_after_no_answer
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.intent_name = intent_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hit_after_no_answer is not None:
            result['HitAfterNoAnswer'] = self.hit_after_no_answer
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HitAfterNoAnswer') is not None:
            self.hit_after_no_answer = m.get('HitAfterNoAnswer')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        return self


class DescribeIntentStatisticsResponseBodyProcessIntents(TeaModel):
    def __init__(
        self,
        group_id: str = None,
        hit_after_no_answer: int = None,
        hit_num: int = None,
        instance_id: str = None,
        intent_id: str = None,
        intent_name: str = None,
        rate_display: str = None,
        type: str = None,
    ):
        self.group_id = group_id
        self.hit_after_no_answer = hit_after_no_answer
        self.hit_num = hit_num
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.rate_display = rate_display
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.hit_after_no_answer is not None:
            result['HitAfterNoAnswer'] = self.hit_after_no_answer
        if self.hit_num is not None:
            result['HitNum'] = self.hit_num
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.rate_display is not None:
            result['RateDisplay'] = self.rate_display
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HitAfterNoAnswer') is not None:
            self.hit_after_no_answer = m.get('HitAfterNoAnswer')
        if m.get('HitNum') is not None:
            self.hit_num = m.get('HitNum')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('RateDisplay') is not None:
            self.rate_display = m.get('RateDisplay')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeIntentStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        global_intent_num: int = None,
        global_intents: List[DescribeIntentStatisticsResponseBodyGlobalIntents] = None,
        group_id: str = None,
        http_status_code: int = None,
        instance_id: str = None,
        intents_after_no_answer: List[DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer] = None,
        message: str = None,
        process_intent_num: int = None,
        process_intents: List[DescribeIntentStatisticsResponseBodyProcessIntents] = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.global_intent_num = global_intent_num
        self.global_intents = global_intents
        self.group_id = group_id
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.intents_after_no_answer = intents_after_no_answer
        self.message = message
        self.process_intent_num = process_intent_num
        self.process_intents = process_intents
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.global_intents:
            for k in self.global_intents:
                if k:
                    k.validate()
        if self.intents_after_no_answer:
            for k in self.intents_after_no_answer:
                if k:
                    k.validate()
        if self.process_intents:
            for k in self.process_intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_intent_num is not None:
            result['GlobalIntentNum'] = self.global_intent_num
        result['GlobalIntents'] = []
        if self.global_intents is not None:
            for k in self.global_intents:
                result['GlobalIntents'].append(k.to_map() if k else None)
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['IntentsAfterNoAnswer'] = []
        if self.intents_after_no_answer is not None:
            for k in self.intents_after_no_answer:
                result['IntentsAfterNoAnswer'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.process_intent_num is not None:
            result['ProcessIntentNum'] = self.process_intent_num
        result['ProcessIntents'] = []
        if self.process_intents is not None:
            for k in self.process_intents:
                result['ProcessIntents'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalIntentNum') is not None:
            self.global_intent_num = m.get('GlobalIntentNum')
        self.global_intents = []
        if m.get('GlobalIntents') is not None:
            for k in m.get('GlobalIntents'):
                temp_model = DescribeIntentStatisticsResponseBodyGlobalIntents()
                self.global_intents.append(temp_model.from_map(k))
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.intents_after_no_answer = []
        if m.get('IntentsAfterNoAnswer') is not None:
            for k in m.get('IntentsAfterNoAnswer'):
                temp_model = DescribeIntentStatisticsResponseBodyIntentsAfterNoAnswer()
                self.intents_after_no_answer.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ProcessIntentNum') is not None:
            self.process_intent_num = m.get('ProcessIntentNum')
        self.process_intents = []
        if m.get('ProcessIntents') is not None:
            for k in m.get('ProcessIntents'):
                temp_model = DescribeIntentStatisticsResponseBodyProcessIntents()
                self.process_intents.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeIntentStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeIntentStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeIntentStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_id: str = None,
        with_script: bool = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_id = job_id
        self.with_script = with_script

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.with_script is not None:
            result['WithScript'] = self.with_script
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('WithScript') is not None:
            self.with_script = m.get('WithScript')
        return self


class DescribeJobResponseBodyJobContacts(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeJobResponseBodyJobExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobResponseBodyJobScript(TeaModel):
    def __init__(
        self,
        asr_config: str = None,
        chatbot_id: str = None,
        debug_status: str = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        mini_playback_config_enabled: bool = None,
        name: str = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        status: str = None,
        tts_config: str = None,
        update_time: int = None,
    ):
        self.asr_config = asr_config
        self.chatbot_id = chatbot_id
        self.debug_status = debug_status
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.mini_playback_config_enabled = mini_playback_config_enabled
        self.name = name
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.status = status
        self.tts_config = tts_config
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.mini_playback_config_enabled is not None:
            result['MiniPlaybackConfigEnabled'] = self.mini_playback_config_enabled
        if self.name is not None:
            result['Name'] = self.name
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.status is not None:
            result['Status'] = self.status
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('MiniPlaybackConfigEnabled') is not None:
            self.mini_playback_config_enabled = m.get('MiniPlaybackConfigEnabled')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeJobResponseBodyJobSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        summary_name: str = None,
    ):
        self.category = category
        self.content = content
        self.summary_name = summary_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class DescribeJobResponseBodyJobTasksContact(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class DescribeJobResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        summary_name: str = None,
    ):
        self.category = category
        self.content = content
        self.summary_name = summary_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class DescribeJobResponseBodyJobTasksConversation(TeaModel):
    def __init__(
        self,
        action: str = None,
        action_params: str = None,
        script: str = None,
        sequence_id: str = None,
        speaker: str = None,
        summary: List[DescribeJobResponseBodyJobTasksConversationSummary] = None,
        timestamp: int = None,
    ):
        self.action = action
        self.action_params = action_params
        self.script = script
        self.sequence_id = sequence_id
        self.speaker = speaker
        self.summary = summary
        self.timestamp = timestamp

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.script is not None:
            result['Script'] = self.script
        if self.sequence_id is not None:
            result['SequenceId'] = self.sequence_id
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('SequenceId') is not None:
            self.sequence_id = m.get('SequenceId')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = DescribeJobResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class DescribeJobResponseBodyJobTasks(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        brief: str = None,
        call_id: str = None,
        called_number: str = None,
        calling_number: str = None,
        chatbot_id: str = None,
        contact: DescribeJobResponseBodyJobTasksContact = None,
        conversation: List[DescribeJobResponseBodyJobTasksConversation] = None,
        duration: int = None,
        end_reason: str = None,
        end_time: int = None,
        hang_up_direction: str = None,
        job_id: str = None,
        planed_time: int = None,
        real_ringing_duration: int = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        sip_code: str = None,
        sip_duration: int = None,
        status: str = None,
        task_id: str = None,
    ):
        self.actual_time = actual_time
        self.brief = brief
        self.call_id = call_id
        self.called_number = called_number
        self.calling_number = calling_number
        self.chatbot_id = chatbot_id
        self.contact = contact
        self.conversation = conversation
        self.duration = duration
        self.end_reason = end_reason
        self.end_time = end_time
        self.hang_up_direction = hang_up_direction
        self.job_id = job_id
        self.planed_time = planed_time
        self.real_ringing_duration = real_ringing_duration
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.sip_code = sip_code
        self.sip_duration = sip_duration
        self.status = status
        self.task_id = task_id

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.hang_up_direction is not None:
            result['HangUpDirection'] = self.hang_up_direction
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.real_ringing_duration is not None:
            result['RealRingingDuration'] = self.real_ringing_duration
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.sip_code is not None:
            result['SipCode'] = self.sip_code
        if self.sip_duration is not None:
            result['SipDuration'] = self.sip_duration
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = DescribeJobResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = DescribeJobResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('HangUpDirection') is not None:
            self.hang_up_direction = m.get('HangUpDirection')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('RealRingingDuration') is not None:
            self.real_ringing_duration = m.get('RealRingingDuration')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SipCode') is not None:
            self.sip_code = m.get('SipCode')
        if m.get('SipDuration') is not None:
            self.sip_duration = m.get('SipDuration')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeJobResponseBodyJob(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        called_number: str = None,
        calling_numbers: List[str] = None,
        contacts: List[DescribeJobResponseBodyJobContacts] = None,
        ds_report: str = None,
        end_reason: int = None,
        extras: List[DescribeJobResponseBodyJobExtras] = None,
        failure_reason: str = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: str = None,
        next_execution_time: int = None,
        priority: int = None,
        reference_id: str = None,
        scenario_id: str = None,
        script: DescribeJobResponseBodyJobScript = None,
        status: str = None,
        strategy_id: str = None,
        summary: List[DescribeJobResponseBodyJobSummary] = None,
        system_priority: int = None,
        tasks: List[DescribeJobResponseBodyJobTasks] = None,
    ):
        self.actual_time = actual_time
        self.called_number = called_number
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.ds_report = ds_report
        self.end_reason = end_reason
        self.extras = extras
        self.failure_reason = failure_reason
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.next_execution_time = next_execution_time
        self.priority = priority
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.script = script
        self.status = status
        self.strategy_id = strategy_id
        self.summary = summary
        self.system_priority = system_priority
        self.tasks = tasks

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.script:
            self.script.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.ds_report is not None:
            result['DsReport'] = self.ds_report
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.next_execution_time is not None:
            result['NextExecutionTime'] = self.next_execution_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = DescribeJobResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('DsReport') is not None:
            self.ds_report = m.get('DsReport')
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = DescribeJobResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('NextExecutionTime') is not None:
            self.next_execution_time = m.get('NextExecutionTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Script') is not None:
            temp_model = DescribeJobResponseBodyJobScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = DescribeJobResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = DescribeJobResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class DescribeJobResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job: DescribeJobResponseBodyJob = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job = job
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = DescribeJobResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobDataParsingTaskProgressRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_data_parsing_task_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_data_parsing_task_id = job_data_parsing_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        return self


class DescribeJobDataParsingTaskProgressResponseBodyProgress(TeaModel):
    def __init__(
        self,
        fail_error_code: str = None,
        fail_reason: str = None,
        feedback_url: str = None,
        handled_job_count: int = None,
        status: str = None,
        total_job_count: int = None,
    ):
        self.fail_error_code = fail_error_code
        self.fail_reason = fail_reason
        self.feedback_url = feedback_url
        self.handled_job_count = handled_job_count
        self.status = status
        self.total_job_count = total_job_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_error_code is not None:
            result['FailErrorCode'] = self.fail_error_code
        if self.fail_reason is not None:
            result['FailReason'] = self.fail_reason
        if self.feedback_url is not None:
            result['FeedbackUrl'] = self.feedback_url
        if self.handled_job_count is not None:
            result['HandledJobCount'] = self.handled_job_count
        if self.status is not None:
            result['Status'] = self.status
        if self.total_job_count is not None:
            result['TotalJobCount'] = self.total_job_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailErrorCode') is not None:
            self.fail_error_code = m.get('FailErrorCode')
        if m.get('FailReason') is not None:
            self.fail_reason = m.get('FailReason')
        if m.get('FeedbackUrl') is not None:
            self.feedback_url = m.get('FeedbackUrl')
        if m.get('HandledJobCount') is not None:
            self.handled_job_count = m.get('HandledJobCount')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalJobCount') is not None:
            self.total_job_count = m.get('TotalJobCount')
        return self


class DescribeJobDataParsingTaskProgressResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        progress: DescribeJobDataParsingTaskProgressResponseBodyProgress = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.progress = progress
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.progress:
            self.progress.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            temp_model = DescribeJobDataParsingTaskProgressResponseBodyProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobDataParsingTaskProgressResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeJobDataParsingTaskProgressResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobDataParsingTaskProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobGroupRequest(TeaModel):
    def __init__(
        self,
        brief_types: List[str] = None,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.brief_types = brief_types
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.brief_types is not None:
            result['BriefTypes'] = self.brief_types
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BriefTypes') is not None:
            self.brief_types = m.get('BriefTypes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(
        self,
        file_http_url: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.file_http_url = file_http_url
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DescribeJobGroupResponseBodyJobGroupFlashSmsExtras(TeaModel):
    def __init__(
        self,
        config_id: str = None,
        template_id: str = None,
    ):
        self.config_id = config_id
        self.template_id = template_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_id is not None:
            result['ConfigId'] = self.config_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConfigId') is not None:
            self.config_id = m.get('ConfigId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        return self


class DescribeJobGroupResponseBodyJobGroupProgressBriefs(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobGroupResponseBodyJobGroupProgressCategories(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DescribeJobGroupResponseBodyJobGroupProgress(TeaModel):
    def __init__(
        self,
        briefs: List[DescribeJobGroupResponseBodyJobGroupProgressBriefs] = None,
        cancelled: int = None,
        categories: List[DescribeJobGroupResponseBodyJobGroupProgressCategories] = None,
        duration: int = None,
        executing: int = None,
        failed: int = None,
        paused: int = None,
        scheduling: int = None,
        start_time: int = None,
        status: str = None,
        total_completed: int = None,
        total_jobs: int = None,
        total_not_answered: int = None,
    ):
        self.briefs = briefs
        self.cancelled = cancelled
        self.categories = categories
        self.duration = duration
        self.executing = executing
        self.failed = failed
        self.paused = paused
        self.scheduling = scheduling
        self.start_time = start_time
        self.status = status
        self.total_completed = total_completed
        self.total_jobs = total_jobs
        self.total_not_answered = total_not_answered

    def validate(self):
        if self.briefs:
            for k in self.briefs:
                if k:
                    k.validate()
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Briefs'] = []
        if self.briefs is not None:
            for k in self.briefs:
                result['Briefs'].append(k.to_map() if k else None)
        if self.cancelled is not None:
            result['Cancelled'] = self.cancelled
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing is not None:
            result['Executing'] = self.executing
        if self.failed is not None:
            result['Failed'] = self.failed
        if self.paused is not None:
            result['Paused'] = self.paused
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.briefs = []
        if m.get('Briefs') is not None:
            for k in m.get('Briefs'):
                temp_model = DescribeJobGroupResponseBodyJobGroupProgressBriefs()
                self.briefs.append(temp_model.from_map(k))
        if m.get('Cancelled') is not None:
            self.cancelled = m.get('Cancelled')
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = DescribeJobGroupResponseBodyJobGroupProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Executing') is not None:
            self.executing = m.get('Executing')
        if m.get('Failed') is not None:
            self.failed = m.get('Failed')
        if m.get('Paused') is not None:
            self.paused = m.get('Paused')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class DescribeJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(
        self,
        empty_number_ignore: bool = None,
        in_arrears_ignore: bool = None,
        out_of_service_ignore: bool = None,
    ):
        self.empty_number_ignore = empty_number_ignore
        self.in_arrears_ignore = in_arrears_ignore
        self.out_of_service_ignore = out_of_service_ignore

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class DescribeJobGroupResponseBodyJobGroupResult(TeaModel):
    def __init__(
        self,
        client_hangup_num: int = None,
        finished_num: int = None,
        no_interact_num: int = None,
        timeout_hangup_num: int = None,
        unrecognized_num: int = None,
    ):
        self.client_hangup_num = client_hangup_num
        self.finished_num = finished_num
        self.no_interact_num = no_interact_num
        self.timeout_hangup_num = timeout_hangup_num
        self.unrecognized_num = unrecognized_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_hangup_num is not None:
            result['ClientHangupNum'] = self.client_hangup_num
        if self.finished_num is not None:
            result['FinishedNum'] = self.finished_num
        if self.no_interact_num is not None:
            result['NoInteractNum'] = self.no_interact_num
        if self.timeout_hangup_num is not None:
            result['TimeoutHangupNum'] = self.timeout_hangup_num
        if self.unrecognized_num is not None:
            result['UnrecognizedNum'] = self.unrecognized_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClientHangupNum') is not None:
            self.client_hangup_num = m.get('ClientHangupNum')
        if m.get('FinishedNum') is not None:
            self.finished_num = m.get('FinishedNum')
        if m.get('NoInteractNum') is not None:
            self.no_interact_num = m.get('NoInteractNum')
        if m.get('TimeoutHangupNum') is not None:
            self.timeout_hangup_num = m.get('TimeoutHangupNum')
        if m.get('UnrecognizedNum') is not None:
            self.unrecognized_num = m.get('UnrecognizedNum')
        return self


class DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class DescribeJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        customized: str = None,
        end_time: int = None,
        follow_up_strategy: str = None,
        is_template: bool = None,
        max_attempts_per_day: int = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        repeat_days: List[str] = None,
        repeatable: bool = None,
        routing_strategy: str = None,
        start_time: int = None,
        strategy_description: str = None,
        strategy_id: str = None,
        strategy_name: str = None,
        type: str = None,
        working_time: List[DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime] = None,
    ):
        self.customized = customized
        self.end_time = end_time
        self.follow_up_strategy = follow_up_strategy
        self.is_template = is_template
        self.max_attempts_per_day = max_attempts_per_day
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.repeat_days = repeat_days
        self.repeatable = repeatable
        self.routing_strategy = routing_strategy
        self.start_time = start_time
        self.strategy_description = strategy_description
        self.strategy_id = strategy_id
        self.strategy_name = strategy_name
        self.type = type
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.repeatable is not None:
            result['Repeatable'] = self.repeatable
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('Repeatable') is not None:
            self.repeatable = m.get('Repeatable')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = DescribeJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class DescribeJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        creation_time: int = None,
        export_progress: DescribeJobGroupResponseBodyJobGroupExportProgress = None,
        flash_sms_extras: DescribeJobGroupResponseBodyJobGroupFlashSmsExtras = None,
        job_data_parsing_task_id: str = None,
        job_file_path: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        modify_time: str = None,
        priority: str = None,
        progress: DescribeJobGroupResponseBodyJobGroupProgress = None,
        recall_calling_numbers: List[str] = None,
        recall_strategy: DescribeJobGroupResponseBodyJobGroupRecallStrategy = None,
        result: DescribeJobGroupResponseBodyJobGroupResult = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        script_id: str = None,
        script_name: str = None,
        script_version: str = None,
        status: str = None,
        strategy: DescribeJobGroupResponseBodyJobGroupStrategy = None,
    ):
        self.calling_numbers = calling_numbers
        self.creation_time = creation_time
        self.export_progress = export_progress
        self.flash_sms_extras = flash_sms_extras
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.modify_time = modify_time
        self.priority = priority
        self.progress = progress
        self.recall_calling_numbers = recall_calling_numbers
        self.recall_strategy = recall_strategy
        self.result = result
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.script_id = script_id
        self.script_name = script_name
        self.script_version = script_version
        self.status = status
        self.strategy = strategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.flash_sms_extras:
            self.flash_sms_extras.validate()
        if self.progress:
            self.progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.result:
            self.result.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.flash_sms_extras is not None:
            result['FlashSmsExtras'] = self.flash_sms_extras.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.recall_calling_numbers is not None:
            result['RecallCallingNumbers'] = self.recall_calling_numbers
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.result is not None:
            result['Result'] = self.result.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('FlashSmsExtras') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupFlashSmsExtras()
            self.flash_sms_extras = temp_model.from_map(m['FlashSmsExtras'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('Progress') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('RecallCallingNumbers') is not None:
            self.recall_calling_numbers = m.get('RecallCallingNumbers')
        if m.get('RecallStrategy') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('Result') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupResult()
            self.result = temp_model.from_map(m['Result'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class DescribeJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group: DescribeJobGroupResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = DescribeJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeJobGroupExportTaskProgressRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        task_id: str = None,
    ):
        self.instance_id = instance_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DescribeJobGroupExportTaskProgressResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        file_http_url: str = None,
        http_status_code: int = None,
        message: str = None,
        progress: float = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.file_http_url = file_http_url
        self.http_status_code = http_status_code
        self.message = message
        self.progress = progress
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeJobGroupExportTaskProgressResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeJobGroupExportTaskProgressResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeJobGroupExportTaskProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        file_size: int = None,
        version_id: str = None,
    ):
        self.file_name = file_name
        self.file_size = file_size
        self.version_id = version_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DescribeNumberDistrictInfoStatusResponseBodyParsingVersion(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        file_size: int = None,
        parse_progress: int = None,
        version_id: str = None,
    ):
        self.file_name = file_name
        self.file_size = file_size
        self.parse_progress = parse_progress
        self.version_id = version_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.parse_progress is not None:
            result['ParseProgress'] = self.parse_progress
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('ParseProgress') is not None:
            self.parse_progress = m.get('ParseProgress')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DescribeNumberDistrictInfoStatusResponseBody(TeaModel):
    def __init__(
        self,
        applied_version: DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        parsing_version: DescribeNumberDistrictInfoStatusResponseBodyParsingVersion = None,
        request_id: str = None,
        status: str = None,
        success: bool = None,
    ):
        self.applied_version = applied_version
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.parsing_version = parsing_version
        self.request_id = request_id
        self.status = status
        self.success = success

    def validate(self):
        if self.applied_version:
            self.applied_version.validate()
        if self.parsing_version:
            self.parsing_version.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.parsing_version is not None:
            result['ParsingVersion'] = self.parsing_version.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBodyAppliedVersion()
            self.applied_version = temp_model.from_map(m['AppliedVersion'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ParsingVersion') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBodyParsingVersion()
            self.parsing_version = temp_model.from_map(m['ParsingVersion'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeNumberDistrictInfoStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeNumberDistrictInfoStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeNumberDistrictInfoStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeScriptResponseBodyScriptNluProfile(TeaModel):
    def __init__(
        self,
        fc_function: str = None,
        fc_http_trigger_url: str = None,
        fc_region: str = None,
        support_beebot_prompts: bool = None,
    ):
        self.fc_function = fc_function
        self.fc_http_trigger_url = fc_http_trigger_url
        self.fc_region = fc_region
        self.support_beebot_prompts = support_beebot_prompts

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fc_function is not None:
            result['FcFunction'] = self.fc_function
        if self.fc_http_trigger_url is not None:
            result['FcHttpTriggerUrl'] = self.fc_http_trigger_url
        if self.fc_region is not None:
            result['FcRegion'] = self.fc_region
        if self.support_beebot_prompts is not None:
            result['SupportBeebotPrompts'] = self.support_beebot_prompts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FcFunction') is not None:
            self.fc_function = m.get('FcFunction')
        if m.get('FcHttpTriggerUrl') is not None:
            self.fc_http_trigger_url = m.get('FcHttpTriggerUrl')
        if m.get('FcRegion') is not None:
            self.fc_region = m.get('FcRegion')
        if m.get('SupportBeebotPrompts') is not None:
            self.support_beebot_prompts = m.get('SupportBeebotPrompts')
        return self


class DescribeScriptResponseBodyScript(TeaModel):
    def __init__(
        self,
        agent_id: int = None,
        agent_key: str = None,
        agent_llm: bool = None,
        asr_config: str = None,
        chat_config: str = None,
        chatbot_id: str = None,
        debug_status: str = None,
        emotion_enable: bool = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        label_config: str = None,
        long_wait_enable: bool = None,
        mini_playback_enable: bool = None,
        new_barge_in_enable: bool = None,
        nlu_engine: str = None,
        nlu_profile: DescribeScriptResponseBodyScriptNluProfile = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        tts_config: str = None,
        update_time: int = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.agent_llm = agent_llm
        self.asr_config = asr_config
        self.chat_config = chat_config
        self.chatbot_id = chatbot_id
        self.debug_status = debug_status
        self.emotion_enable = emotion_enable
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.label_config = label_config
        self.long_wait_enable = long_wait_enable
        self.mini_playback_enable = mini_playback_enable
        self.new_barge_in_enable = new_barge_in_enable
        self.nlu_engine = nlu_engine
        self.nlu_profile = nlu_profile
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.tts_config = tts_config
        self.update_time = update_time

    def validate(self):
        if self.nlu_profile:
            self.nlu_profile.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.agent_llm is not None:
            result['AgentLlm'] = self.agent_llm
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chat_config is not None:
            result['ChatConfig'] = self.chat_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.label_config is not None:
            result['LabelConfig'] = self.label_config
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.nlu_profile is not None:
            result['NluProfile'] = self.nlu_profile.to_map()
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AgentLlm') is not None:
            self.agent_llm = m.get('AgentLlm')
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatConfig') is not None:
            self.chat_config = m.get('ChatConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('LabelConfig') is not None:
            self.label_config = m.get('LabelConfig')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('NluProfile') is not None:
            temp_model = DescribeScriptResponseBodyScriptNluProfile()
            self.nlu_profile = temp_model.from_map(m['NluProfile'])
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class DescribeScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        nls_config: str = None,
        request_id: str = None,
        script: DescribeScriptResponseBodyScript = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.nls_config = nls_config
        self.request_id = request_id
        self.script = script
        self.success = success

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.nls_config is not None:
            result['NlsConfig'] = self.nls_config
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NlsConfig') is not None:
            self.nls_config = m.get('NlsConfig')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = DescribeScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeScriptVoiceConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        script_voice_config_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.script_voice_config_id = script_voice_config_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        return self


class DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_content: str = None,
        script_id: str = None,
        script_voice_config_id: str = None,
        script_waveform_relation: str = None,
        source: str = None,
        type: str = None,
    ):
        self.instance_id = instance_id
        self.script_content = script_content
        self.script_id = script_id
        self.script_voice_config_id = script_voice_config_id
        self.script_waveform_relation = script_waveform_relation
        self.source = source
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DescribeScriptVoiceConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_voice_config: DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_voice_config = script_voice_config
        self.success = success

    def validate(self):
        if self.script_voice_config:
            self.script_voice_config.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_config is not None:
            result['ScriptVoiceConfig'] = self.script_voice_config.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfig') is not None:
            temp_model = DescribeScriptVoiceConfigResponseBodyScriptVoiceConfig()
            self.script_voice_config = temp_model.from_map(m['ScriptVoiceConfig'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeScriptVoiceConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeScriptVoiceConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeScriptVoiceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTTSConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class DescribeTTSConfigResponseBodyTTSConfig(TeaModel):
    def __init__(
        self,
        app_key: str = None,
        instance_id: str = None,
        nls_service_type: str = None,
        speech_rate: str = None,
        voice: str = None,
        volume: str = None,
    ):
        self.app_key = app_key
        self.instance_id = instance_id
        self.nls_service_type = nls_service_type
        self.speech_rate = speech_rate
        self.voice = voice
        self.volume = volume

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nls_service_type is not None:
            result['NlsServiceType'] = self.nls_service_type
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NlsServiceType') is not None:
            self.nls_service_type = m.get('NlsServiceType')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class DescribeTTSConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        ttsconfig: DescribeTTSConfigResponseBodyTTSConfig = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.ttsconfig = ttsconfig

    def validate(self):
        if self.ttsconfig:
            self.ttsconfig.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.ttsconfig is not None:
            result['TTSConfig'] = self.ttsconfig.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TTSConfig') is not None:
            temp_model = DescribeTTSConfigResponseBodyTTSConfig()
            self.ttsconfig = temp_model.from_map(m['TTSConfig'])
        return self


class DescribeTTSConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTTSConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTTSConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTTSDemoRequest(TeaModel):
    def __init__(
        self,
        access_key: str = None,
        ali_customized_voice: str = None,
        app_key: str = None,
        engine: str = None,
        instance_id: str = None,
        nls_service_type: str = None,
        pitch_rate: int = None,
        script_id: str = None,
        secret_key: str = None,
        speech_rate: int = None,
        text: str = None,
        voice: str = None,
        volume: int = None,
    ):
        self.access_key = access_key
        self.ali_customized_voice = ali_customized_voice
        self.app_key = app_key
        self.engine = engine
        # This parameter is required.
        self.instance_id = instance_id
        self.nls_service_type = nls_service_type
        self.pitch_rate = pitch_rate
        self.script_id = script_id
        self.secret_key = secret_key
        self.speech_rate = speech_rate
        # This parameter is required.
        self.text = text
        self.voice = voice
        self.volume = volume

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_key is not None:
            result['AccessKey'] = self.access_key
        if self.ali_customized_voice is not None:
            result['AliCustomizedVoice'] = self.ali_customized_voice
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.engine is not None:
            result['Engine'] = self.engine
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nls_service_type is not None:
            result['NlsServiceType'] = self.nls_service_type
        if self.pitch_rate is not None:
            result['PitchRate'] = self.pitch_rate
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.secret_key is not None:
            result['SecretKey'] = self.secret_key
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.text is not None:
            result['Text'] = self.text
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessKey') is not None:
            self.access_key = m.get('AccessKey')
        if m.get('AliCustomizedVoice') is not None:
            self.ali_customized_voice = m.get('AliCustomizedVoice')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('Engine') is not None:
            self.engine = m.get('Engine')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NlsServiceType') is not None:
            self.nls_service_type = m.get('NlsServiceType')
        if m.get('PitchRate') is not None:
            self.pitch_rate = m.get('PitchRate')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SecretKey') is not None:
            self.secret_key = m.get('SecretKey')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class DescribeTTSDemoResponseBody(TeaModel):
    def __init__(
        self,
        audition_url: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.audition_url = audition_url
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audition_url is not None:
            result['AuditionUrl'] = self.audition_url
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditionUrl') is not None:
            self.audition_url = m.get('AuditionUrl')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTTSDemoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTTSDemoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTTSDemoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTagHitsSummaryRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DescribeTagHitsSummaryResponseBodyTagGroups(TeaModel):
    def __init__(
        self,
        id: str = None,
        script_id: str = None,
        tag_group: str = None,
        tag_group_index: int = None,
    ):
        # ID
        self.id = id
        self.script_id = script_id
        self.tag_group = tag_group
        self.tag_group_index = tag_group_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class DescribeTagHitsSummaryResponseBodyTagHitsList(TeaModel):
    def __init__(
        self,
        hit_count: int = None,
        tag_group: str = None,
        tag_name: str = None,
    ):
        self.hit_count = hit_count
        self.tag_group = tag_group
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hit_count is not None:
            result['HitCount'] = self.hit_count
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('HitCount') is not None:
            self.hit_count = m.get('HitCount')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class DescribeTagHitsSummaryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        tag_groups: List[DescribeTagHitsSummaryResponseBodyTagGroups] = None,
        tag_hits_list: List[DescribeTagHitsSummaryResponseBodyTagHitsList] = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.tag_groups = tag_groups
        self.tag_hits_list = tag_hits_list

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tag_hits_list:
            for k in self.tag_hits_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['TagHitsList'] = []
        if self.tag_hits_list is not None:
            for k in self.tag_hits_list:
                result['TagHitsList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = DescribeTagHitsSummaryResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tag_hits_list = []
        if m.get('TagHitsList') is not None:
            for k in m.get('TagHitsList'):
                temp_model = DescribeTagHitsSummaryResponseBodyTagHitsList()
                self.tag_hits_list.append(temp_model.from_map(k))
        return self


class DescribeTagHitsSummaryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTagHitsSummaryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTagHitsSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DescribeTenantBindNumberRequest(TeaModel):
    def __init__(
        self,
        number: str = None,
    ):
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class DescribeTenantBindNumberResponseBodyDataList(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_name: str = None,
        is_binding: bool = None,
    ):
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.is_binding = is_binding

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_binding is not None:
            result['IsBinding'] = self.is_binding
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsBinding') is not None:
            self.is_binding = m.get('IsBinding')
        return self


class DescribeTenantBindNumberResponseBodyData(TeaModel):
    def __init__(
        self,
        list: List[DescribeTenantBindNumberResponseBodyDataList] = None,
    ):
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = DescribeTenantBindNumberResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class DescribeTenantBindNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: DescribeTenantBindNumberResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = DescribeTenantBindNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DescribeTenantBindNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DescribeTenantBindNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DescribeTenantBindNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialogueRequest(TeaModel):
    def __init__(
        self,
        action_key: str = None,
        action_params: str = None,
        call_id: str = None,
        call_type: str = None,
        called_number: str = None,
        calling_number: str = None,
        instance_id: str = None,
        scenario_id: str = None,
        script_id: str = None,
        task_id: str = None,
        utterance: str = None,
    ):
        self.action_key = action_key
        self.action_params = action_params
        # This parameter is required.
        self.call_id = call_id
        # This parameter is required.
        self.call_type = call_type
        # This parameter is required.
        self.called_number = called_number
        # This parameter is required.
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        # 场景id
        self.script_id = script_id
        self.task_id = task_id
        # This parameter is required.
        self.utterance = utterance

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_key is not None:
            result['ActionKey'] = self.action_key
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.utterance is not None:
            result['Utterance'] = self.utterance
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActionKey') is not None:
            self.action_key = m.get('ActionKey')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Utterance') is not None:
            self.utterance = m.get('Utterance')
        return self


class DialogueResponseBodyFeedback(TeaModel):
    def __init__(
        self,
        action: str = None,
        action_params: str = None,
        content: str = None,
        content_params: str = None,
        interruptible: bool = None,
    ):
        self.action = action
        self.action_params = action_params
        self.content = content
        # 已废弃
        self.content_params = content_params
        self.interruptible = interruptible

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.content is not None:
            result['Content'] = self.content
        if self.content_params is not None:
            result['ContentParams'] = self.content_params
        if self.interruptible is not None:
            result['Interruptible'] = self.interruptible
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ContentParams') is not None:
            self.content_params = m.get('ContentParams')
        if m.get('Interruptible') is not None:
            self.interruptible = m.get('Interruptible')
        return self


class DialogueResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        feedback: DialogueResponseBodyFeedback = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.feedback = feedback
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.feedback:
            self.feedback.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.feedback is not None:
            result['Feedback'] = self.feedback.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Feedback') is not None:
            temp_model = DialogueResponseBodyFeedback()
            self.feedback = temp_model.from_map(m['Feedback'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DialogueResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DialogueResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DialogueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DismissNumberDistrictInfoParsingResultRequest(TeaModel):
    def __init__(
        self,
        version_id: str = None,
    ):
        self.version_id = version_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class DismissNumberDistrictInfoParsingResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DismissNumberDistrictInfoParsingResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DismissNumberDistrictInfoParsingResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DismissNumberDistrictInfoParsingResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        need_voice_slice_recording: bool = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.need_voice_slice_recording = need_voice_slice_recording
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.need_voice_slice_recording is not None:
            result['NeedVoiceSliceRecording'] = self.need_voice_slice_recording
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NeedVoiceSliceRecording') is not None:
            self.need_voice_slice_recording = m.get('NeedVoiceSliceRecording')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DownloadRecordingResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        signature_url: str = None,
        voice_slice_recording_list_json: str = None,
    ):
        self.file_name = file_name
        self.signature_url = signature_url
        self.voice_slice_recording_list_json = voice_slice_recording_list_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        if self.voice_slice_recording_list_json is not None:
            result['VoiceSliceRecordingListJson'] = self.voice_slice_recording_list_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        if m.get('VoiceSliceRecordingListJson') is not None:
            self.voice_slice_recording_list_json = m.get('VoiceSliceRecordingListJson')
        return self


class DownloadRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        download_params: DownloadRecordingResponseBodyDownloadParams = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadRecordingResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadScriptRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        uuid: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.uuid = uuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class DownloadScriptRecordingResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        signature_url: str = None,
    ):
        self.file_name = file_name
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadScriptRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        download_params: DownloadScriptRecordingResponseBodyDownloadParams = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadScriptRecordingResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadScriptRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DownloadScriptRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DuplicateScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        source_script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.source_script_id = source_script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.source_script_id is not None:
            result['SourceScriptId'] = self.source_script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('SourceScriptId') is not None:
            self.source_script_id = m.get('SourceScriptId')
        return self


class DuplicateScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_id = script_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DuplicateScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DuplicateScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DuplicateScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ExportScriptResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
    ):
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class ExportScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        download_params: ExportScriptResponseBodyDownloadParams = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadParams') is not None:
            temp_model = ExportScriptResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExportScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GenerateUploadUrlRequest(TeaModel):
    def __init__(
        self,
        file_name: str = None,
        key: str = None,
    ):
        self.file_name = file_name
        self.key = key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.key is not None:
            result['Key'] = self.key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        return self


class GenerateUploadUrlResponseBodyData(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        expire: int = None,
        folder: str = None,
        host: str = None,
        message: str = None,
        policy: str = None,
        signature: str = None,
        success: bool = None,
    ):
        self.access_id = access_id
        self.expire = expire
        self.folder = folder
        self.host = host
        self.message = message
        self.policy = policy
        self.signature = signature
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.folder is not None:
            result['Folder'] = self.folder
        if self.host is not None:
            result['Host'] = self.host
        if self.message is not None:
            result['Message'] = self.message
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Folder') is not None:
            self.folder = m.get('Folder')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GenerateUploadUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GenerateUploadUrlResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GenerateUploadUrlResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GenerateUploadUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GenerateUploadUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GenerateUploadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAfterAnswerDelayPlaybackRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetAfterAnswerDelayPlaybackResponseBody(TeaModel):
    def __init__(
        self,
        after_answer_delay_playback: int = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.after_answer_delay_playback = after_answer_delay_playback
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_answer_delay_playback is not None:
            result['AfterAnswerDelayPlayback'] = self.after_answer_delay_playback
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AfterAnswerDelayPlayback') is not None:
            self.after_answer_delay_playback = m.get('AfterAnswerDelayPlayback')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAfterAnswerDelayPlaybackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAfterAnswerDelayPlaybackResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAfterAnswerDelayPlaybackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAgentProfileRequest(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        app_ip: str = None,
        instance_id: str = None,
    ):
        # This parameter is required.
        self.agent_profile_id = agent_profile_id
        self.app_ip = app_ip
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetAgentProfileResponseBodyData(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        agent_profile_template_id: str = None,
        agent_type: str = None,
        api_plugin_json: str = None,
        create_time: str = None,
        description: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        nlu_config_json: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        script_id: str = None,
        system: bool = None,
        update_time: str = None,
        variables_json: str = None,
    ):
        self.agent_profile_id = agent_profile_id
        self.agent_profile_template_id = agent_profile_template_id
        # agent type
        self.agent_type = agent_type
        self.api_plugin_json = api_plugin_json
        self.create_time = create_time
        self.description = description
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.nlu_config_json = nlu_config_json
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.script_id = script_id
        self.system = system
        self.update_time = update_time
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.agent_type is not None:
            result['AgentType'] = self.agent_type
        if self.api_plugin_json is not None:
            result['ApiPluginJson'] = self.api_plugin_json
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.nlu_config_json is not None:
            result['NluConfigJson'] = self.nlu_config_json
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.system is not None:
            result['System'] = self.system
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AgentType') is not None:
            self.agent_type = m.get('AgentType')
        if m.get('ApiPluginJson') is not None:
            self.api_plugin_json = m.get('ApiPluginJson')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('NluConfigJson') is not None:
            self.nlu_config_json = m.get('NluConfigJson')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('System') is not None:
            self.system = m.get('System')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class GetAgentProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetAgentProfileResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetAgentProfileResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAgentProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAgentProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAgentProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAgentProfileTemplateRequest(TeaModel):
    def __init__(
        self,
        agent_profile_template_id: str = None,
        app_ip: str = None,
    ):
        # This parameter is required.
        self.agent_profile_template_id = agent_profile_template_id
        self.app_ip = app_ip

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        return self


class GetAgentProfileTemplateResponseBodyData(TeaModel):
    def __init__(
        self,
        agent_profile_template_id: str = None,
        create_time: str = None,
        description: str = None,
        name: str = None,
        prompt_schema: str = None,
        update_time: str = None,
    ):
        self.agent_profile_template_id = agent_profile_template_id
        self.create_time = create_time
        self.description = description
        self.name = name
        self.prompt_schema = prompt_schema
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.prompt_schema is not None:
            result['PromptSchema'] = self.prompt_schema
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PromptSchema') is not None:
            self.prompt_schema = m.get('PromptSchema')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetAgentProfileTemplateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetAgentProfileTemplateResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetAgentProfileTemplateResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAgentProfileTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAgentProfileTemplateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAgentProfileTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAnnotationMissionSummaryRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
    ):
        self.annotation_mission_id = annotation_mission_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        return self


class GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo(TeaModel):
    def __init__(
        self,
        add_customization_data_count: int = None,
        add_vocabulary_data_count: int = None,
        annotation_invalid: int = None,
        character_correct_rate: int = None,
        character_error_rate: int = None,
        chat_total_count: int = None,
        no_annotation: int = None,
        sentence_error_rate: int = None,
        word_error_rate: int = None,
    ):
        self.add_customization_data_count = add_customization_data_count
        self.add_vocabulary_data_count = add_vocabulary_data_count
        self.annotation_invalid = annotation_invalid
        self.character_correct_rate = character_correct_rate
        self.character_error_rate = character_error_rate
        self.chat_total_count = chat_total_count
        self.no_annotation = no_annotation
        self.sentence_error_rate = sentence_error_rate
        self.word_error_rate = word_error_rate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_customization_data_count is not None:
            result['AddCustomizationDataCount'] = self.add_customization_data_count
        if self.add_vocabulary_data_count is not None:
            result['AddVocabularyDataCount'] = self.add_vocabulary_data_count
        if self.annotation_invalid is not None:
            result['AnnotationInvalid'] = self.annotation_invalid
        if self.character_correct_rate is not None:
            result['CharacterCorrectRate'] = self.character_correct_rate
        if self.character_error_rate is not None:
            result['CharacterErrorRate'] = self.character_error_rate
        if self.chat_total_count is not None:
            result['ChatTotalCount'] = self.chat_total_count
        if self.no_annotation is not None:
            result['NoAnnotation'] = self.no_annotation
        if self.sentence_error_rate is not None:
            result['SentenceErrorRate'] = self.sentence_error_rate
        if self.word_error_rate is not None:
            result['WordErrorRate'] = self.word_error_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddCustomizationDataCount') is not None:
            self.add_customization_data_count = m.get('AddCustomizationDataCount')
        if m.get('AddVocabularyDataCount') is not None:
            self.add_vocabulary_data_count = m.get('AddVocabularyDataCount')
        if m.get('AnnotationInvalid') is not None:
            self.annotation_invalid = m.get('AnnotationInvalid')
        if m.get('CharacterCorrectRate') is not None:
            self.character_correct_rate = m.get('CharacterCorrectRate')
        if m.get('CharacterErrorRate') is not None:
            self.character_error_rate = m.get('CharacterErrorRate')
        if m.get('ChatTotalCount') is not None:
            self.chat_total_count = m.get('ChatTotalCount')
        if m.get('NoAnnotation') is not None:
            self.no_annotation = m.get('NoAnnotation')
        if m.get('SentenceErrorRate') is not None:
            self.sentence_error_rate = m.get('SentenceErrorRate')
        if m.get('WordErrorRate') is not None:
            self.word_error_rate = m.get('WordErrorRate')
        return self


class GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo(TeaModel):
    def __init__(
        self,
        annotation_correct_count: int = None,
        annotation_invalid: int = None,
        chat_total_count: int = None,
        intent_user_say_count: int = None,
        intention_not_covered_count: int = None,
        match_error_count: int = None,
        no_annotation: int = None,
        translation_unrecognized_count: int = None,
    ):
        self.annotation_correct_count = annotation_correct_count
        self.annotation_invalid = annotation_invalid
        self.chat_total_count = chat_total_count
        self.intent_user_say_count = intent_user_say_count
        self.intention_not_covered_count = intention_not_covered_count
        self.match_error_count = match_error_count
        self.no_annotation = no_annotation
        self.translation_unrecognized_count = translation_unrecognized_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_correct_count is not None:
            result['AnnotationCorrectCount'] = self.annotation_correct_count
        if self.annotation_invalid is not None:
            result['AnnotationInvalid'] = self.annotation_invalid
        if self.chat_total_count is not None:
            result['ChatTotalCount'] = self.chat_total_count
        if self.intent_user_say_count is not None:
            result['IntentUserSayCount'] = self.intent_user_say_count
        if self.intention_not_covered_count is not None:
            result['IntentionNotCoveredCount'] = self.intention_not_covered_count
        if self.match_error_count is not None:
            result['MatchErrorCount'] = self.match_error_count
        if self.no_annotation is not None:
            result['NoAnnotation'] = self.no_annotation
        if self.translation_unrecognized_count is not None:
            result['TranslationUnrecognizedCount'] = self.translation_unrecognized_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationCorrectCount') is not None:
            self.annotation_correct_count = m.get('AnnotationCorrectCount')
        if m.get('AnnotationInvalid') is not None:
            self.annotation_invalid = m.get('AnnotationInvalid')
        if m.get('ChatTotalCount') is not None:
            self.chat_total_count = m.get('ChatTotalCount')
        if m.get('IntentUserSayCount') is not None:
            self.intent_user_say_count = m.get('IntentUserSayCount')
        if m.get('IntentionNotCoveredCount') is not None:
            self.intention_not_covered_count = m.get('IntentionNotCoveredCount')
        if m.get('MatchErrorCount') is not None:
            self.match_error_count = m.get('MatchErrorCount')
        if m.get('NoAnnotation') is not None:
            self.no_annotation = m.get('NoAnnotation')
        if m.get('TranslationUnrecognizedCount') is not None:
            self.translation_unrecognized_count = m.get('TranslationUnrecognizedCount')
        return self


class GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList(TeaModel):
    def __init__(
        self,
        count: int = None,
        name: str = None,
    ):
        self.count = count
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo(TeaModel):
    def __init__(
        self,
        tag_summary_info_detail_list: List[GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList] = None,
    ):
        self.tag_summary_info_detail_list = tag_summary_info_detail_list

    def validate(self):
        if self.tag_summary_info_detail_list:
            for k in self.tag_summary_info_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['TagSummaryInfoDetailList'] = []
        if self.tag_summary_info_detail_list is not None:
            for k in self.tag_summary_info_detail_list:
                result['TagSummaryInfoDetailList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag_summary_info_detail_list = []
        if m.get('TagSummaryInfoDetailList') is not None:
            for k in m.get('TagSummaryInfoDetailList'):
                temp_model = GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfoTagSummaryInfoDetailList()
                self.tag_summary_info_detail_list.append(temp_model.from_map(k))
        return self


class GetAnnotationMissionSummaryResponseBodyData(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
        asr_summary_info: GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo = None,
        intent_summary_info: GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo = None,
        message: str = None,
        success: bool = None,
        tag_summary_info: GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo = None,
    ):
        self.annotation_mission_id = annotation_mission_id
        self.asr_summary_info = asr_summary_info
        self.intent_summary_info = intent_summary_info
        self.message = message
        self.success = success
        self.tag_summary_info = tag_summary_info

    def validate(self):
        if self.asr_summary_info:
            self.asr_summary_info.validate()
        if self.intent_summary_info:
            self.intent_summary_info.validate()
        if self.tag_summary_info:
            self.tag_summary_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.asr_summary_info is not None:
            result['AsrSummaryInfo'] = self.asr_summary_info.to_map()
        if self.intent_summary_info is not None:
            result['IntentSummaryInfo'] = self.intent_summary_info.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        if self.tag_summary_info is not None:
            result['TagSummaryInfo'] = self.tag_summary_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AsrSummaryInfo') is not None:
            temp_model = GetAnnotationMissionSummaryResponseBodyDataAsrSummaryInfo()
            self.asr_summary_info = temp_model.from_map(m['AsrSummaryInfo'])
        if m.get('IntentSummaryInfo') is not None:
            temp_model = GetAnnotationMissionSummaryResponseBodyDataIntentSummaryInfo()
            self.intent_summary_info = temp_model.from_map(m['IntentSummaryInfo'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TagSummaryInfo') is not None:
            temp_model = GetAnnotationMissionSummaryResponseBodyDataTagSummaryInfo()
            self.tag_summary_info = temp_model.from_map(m['TagSummaryInfo'])
        return self


class GetAnnotationMissionSummaryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetAnnotationMissionSummaryResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetAnnotationMissionSummaryResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAnnotationMissionSummaryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAnnotationMissionSummaryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAnnotationMissionSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAnnotationMissionTagInfoListRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_index: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.page_index = page_index
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_tag_info_description: str = None,
        annotation_mission_tag_info_id: str = None,
        annotation_mission_tag_info_name: str = None,
        delete: bool = None,
        instance_id: str = None,
        tenant_id: str = None,
    ):
        self.annotation_mission_tag_info_description = annotation_mission_tag_info_description
        self.annotation_mission_tag_info_id = annotation_mission_tag_info_id
        self.annotation_mission_tag_info_name = annotation_mission_tag_info_name
        self.delete = delete
        self.instance_id = instance_id
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_tag_info_description is not None:
            result['AnnotationMissionTagInfoDescription'] = self.annotation_mission_tag_info_description
        if self.annotation_mission_tag_info_id is not None:
            result['AnnotationMissionTagInfoId'] = self.annotation_mission_tag_info_id
        if self.annotation_mission_tag_info_name is not None:
            result['AnnotationMissionTagInfoName'] = self.annotation_mission_tag_info_name
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionTagInfoDescription') is not None:
            self.annotation_mission_tag_info_description = m.get('AnnotationMissionTagInfoDescription')
        if m.get('AnnotationMissionTagInfoId') is not None:
            self.annotation_mission_tag_info_id = m.get('AnnotationMissionTagInfoId')
        if m.get('AnnotationMissionTagInfoName') is not None:
            self.annotation_mission_tag_info_name = m.get('AnnotationMissionTagInfoName')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class GetAnnotationMissionTagInfoListResponseBodyData(TeaModel):
    def __init__(
        self,
        annotation_mission_tag_info_list: List[GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList] = None,
        message: str = None,
        success: bool = None,
    ):
        self.annotation_mission_tag_info_list = annotation_mission_tag_info_list
        self.message = message
        self.success = success

    def validate(self):
        if self.annotation_mission_tag_info_list:
            for k in self.annotation_mission_tag_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnnotationMissionTagInfoList'] = []
        if self.annotation_mission_tag_info_list is not None:
            for k in self.annotation_mission_tag_info_list:
                result['AnnotationMissionTagInfoList'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.annotation_mission_tag_info_list = []
        if m.get('AnnotationMissionTagInfoList') is not None:
            for k in m.get('AnnotationMissionTagInfoList'):
                temp_model = GetAnnotationMissionTagInfoListResponseBodyDataAnnotationMissionTagInfoList()
                self.annotation_mission_tag_info_list.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAnnotationMissionTagInfoListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: GetAnnotationMissionTagInfoListResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = GetAnnotationMissionTagInfoListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAnnotationMissionTagInfoListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAnnotationMissionTagInfoListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAnnotationMissionTagInfoListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAsrServerInfoRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetAsrServerInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetAsrServerInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAsrServerInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAsrServerInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAssignJobsAsyncResultRequest(TeaModel):
    def __init__(
        self,
        async_task_id: str = None,
    ):
        # This parameter is required.
        self.async_task_id = async_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        return self


class GetAssignJobsAsyncResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group_id: str = None,
        jobs_id: List[str] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        timeout: bool = None,
        valid: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group_id = job_group_id
        self.jobs_id = jobs_id
        self.message = message
        self.request_id = request_id
        self.success = success
        self.timeout = timeout
        self.valid = valid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.jobs_id is not None:
            result['JobsId'] = self.jobs_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.valid is not None:
            result['Valid'] = self.valid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobsId') is not None:
            self.jobs_id = m.get('JobsId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('Valid') is not None:
            self.valid = m.get('Valid')
        return self


class GetAssignJobsAsyncResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetAssignJobsAsyncResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAssignJobsAsyncResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetBaseStrategyPeriodRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetBaseStrategyPeriodResponseBodyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        begin_time_millis: int = None,
        end_time: str = None,
        end_time_millis: int = None,
    ):
        self.begin_time = begin_time
        self.begin_time_millis = begin_time_millis
        self.end_time = end_time
        self.end_time_millis = end_time_millis

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.begin_time_millis is not None:
            result['BeginTimeMillis'] = self.begin_time_millis
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.end_time_millis is not None:
            result['EndTimeMillis'] = self.end_time_millis
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('BeginTimeMillis') is not None:
            self.begin_time_millis = m.get('BeginTimeMillis')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EndTimeMillis') is not None:
            self.end_time_millis = m.get('EndTimeMillis')
        return self


class GetBaseStrategyPeriodResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        only_weekdays: bool = None,
        only_workdays: bool = None,
        request_id: str = None,
        success: bool = None,
        working_time: List[GetBaseStrategyPeriodResponseBodyWorkingTime] = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.only_weekdays = only_weekdays
        self.only_workdays = only_workdays
        self.request_id = request_id
        self.success = success
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.only_weekdays is not None:
            result['OnlyWeekdays'] = self.only_weekdays
        if self.only_workdays is not None:
            result['OnlyWorkdays'] = self.only_workdays
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OnlyWeekdays') is not None:
            self.only_weekdays = m.get('OnlyWeekdays')
        if m.get('OnlyWorkdays') is not None:
            self.only_workdays = m.get('OnlyWorkdays')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetBaseStrategyPeriodResponseBodyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class GetBaseStrategyPeriodResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetBaseStrategyPeriodResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetBaseStrategyPeriodResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConcurrentConversationQuotaResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        max_concurrent: int = None,
        message: str = None,
        remaining_concurrent: int = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        # maxConcurrent
        self.max_concurrent = max_concurrent
        self.message = message
        self.remaining_concurrent = remaining_concurrent
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.max_concurrent is not None:
            result['MaxConcurrent'] = self.max_concurrent
        if self.message is not None:
            result['Message'] = self.message
        if self.remaining_concurrent is not None:
            result['RemainingConcurrent'] = self.remaining_concurrent
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MaxConcurrent') is not None:
            self.max_concurrent = m.get('MaxConcurrent')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RemainingConcurrent') is not None:
            self.remaining_concurrent = m.get('RemainingConcurrent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConcurrentConversationQuotaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetConcurrentConversationQuotaResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetConcurrentConversationQuotaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetContactBlockListRequest(TeaModel):
    def __init__(
        self,
        count_total_row: bool = None,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.count_total_row = count_total_row
        # This parameter is required.
        self.instance_id = instance_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count_total_row is not None:
            result['CountTotalRow'] = self.count_total_row
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CountTotalRow') is not None:
            self.count_total_row = m.get('CountTotalRow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetContactBlockListResponseBodyContactBlocklistListList(TeaModel):
    def __init__(
        self,
        contact_block_list_id: str = None,
        creation_time: int = None,
        creator: str = None,
        instance_id: str = None,
        name: str = None,
        operator: str = None,
        phone_number: str = None,
        remark: str = None,
    ):
        self.contact_block_list_id = contact_block_list_id
        self.creation_time = creation_time
        self.creator = creator
        self.instance_id = instance_id
        self.name = name
        self.operator = operator
        self.phone_number = phone_number
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_id is not None:
            result['ContactBlockListId'] = self.contact_block_list_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactBlockListId') is not None:
            self.contact_block_list_id = m.get('ContactBlockListId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class GetContactBlockListResponseBodyContactBlocklistList(TeaModel):
    def __init__(
        self,
        list: List[GetContactBlockListResponseBodyContactBlocklistListList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetContactBlockListResponseBodyContactBlocklistListList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetContactBlockListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        contact_blocklist_list: GetContactBlockListResponseBodyContactBlocklistList = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.contact_blocklist_list = contact_blocklist_list
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.contact_blocklist_list:
            self.contact_blocklist_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_blocklist_list is not None:
            result['ContactBlocklistList'] = self.contact_blocklist_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactBlocklistList') is not None:
            temp_model = GetContactBlockListResponseBodyContactBlocklistList()
            self.contact_blocklist_list = temp_model.from_map(m['ContactBlocklistList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetContactBlockListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetContactBlockListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetContactWhiteListRequest(TeaModel):
    def __init__(
        self,
        count_total_row: bool = None,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.count_total_row = count_total_row
        # This parameter is required.
        self.instance_id = instance_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count_total_row is not None:
            result['CountTotalRow'] = self.count_total_row
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CountTotalRow') is not None:
            self.count_total_row = m.get('CountTotalRow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetContactWhiteListResponseBodyContactWhitelistListList(TeaModel):
    def __init__(
        self,
        contact_white_list_id: str = None,
        creation_time: int = None,
        creator: str = None,
        instance_id: str = None,
        name: str = None,
        operator: str = None,
        phone_number: str = None,
        remark: str = None,
    ):
        self.contact_white_list_id = contact_white_list_id
        self.creation_time = creation_time
        self.creator = creator
        self.instance_id = instance_id
        self.name = name
        self.operator = operator
        self.phone_number = phone_number
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_id is not None:
            result['ContactWhiteListId'] = self.contact_white_list_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactWhiteListId') is not None:
            self.contact_white_list_id = m.get('ContactWhiteListId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class GetContactWhiteListResponseBodyContactWhitelistList(TeaModel):
    def __init__(
        self,
        list: List[GetContactWhiteListResponseBodyContactWhitelistListList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetContactWhiteListResponseBodyContactWhitelistListList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetContactWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        contact_whitelist_list: GetContactWhiteListResponseBodyContactWhitelistList = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.contact_whitelist_list = contact_whitelist_list
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.contact_whitelist_list:
            self.contact_whitelist_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_whitelist_list is not None:
            result['ContactWhitelistList'] = self.contact_whitelist_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactWhitelistList') is not None:
            temp_model = GetContactWhiteListResponseBodyContactWhitelistList()
            self.contact_whitelist_list = temp_model.from_map(m['ContactWhitelistList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetContactWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetContactWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCurrentConcurrencyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetCurrentConcurrencyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        current_concurrency: int = None,
        http_status_code: int = None,
        instance_id: str = None,
        max_concurrent_conversation: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.current_concurrency = current_concurrency
        self.http_status_code = http_status_code
        self.instance_id = instance_id
        self.max_concurrent_conversation = max_concurrent_conversation
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.current_concurrency is not None:
            result['CurrentConcurrency'] = self.current_concurrency
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CurrentConcurrency') is not None:
            self.current_concurrency = m.get('CurrentConcurrency')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetCurrentConcurrencyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetCurrentConcurrencyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetCurrentConcurrencyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEffectiveDaysRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetEffectiveDaysResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        effective_days: int = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.effective_days = effective_days
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.effective_days is not None:
            result['EffectiveDays'] = self.effective_days
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('EffectiveDays') is not None:
            self.effective_days = m.get('EffectiveDays')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEffectiveDaysResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEffectiveDaysResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEffectiveDaysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEmptyNumberNoMoreCallsInfoRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetEmptyNumberNoMoreCallsInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        empty_number_no_more_calls: bool = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.empty_number_no_more_calls = empty_number_no_more_calls
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.empty_number_no_more_calls is not None:
            result['EmptyNumberNoMoreCalls'] = self.empty_number_no_more_calls
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('EmptyNumberNoMoreCalls') is not None:
            self.empty_number_no_more_calls = m.get('EmptyNumberNoMoreCalls')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEmptyNumberNoMoreCallsInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEmptyNumberNoMoreCallsInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEmptyNumberNoMoreCallsInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobDataUploadParamsRequest(TeaModel):
    def __init__(
        self,
        busi_type: str = None,
        file_name: str = None,
        instance_id: str = None,
        path: str = None,
        unique_id: str = None,
    ):
        self.busi_type = busi_type
        # This parameter is required.
        self.file_name = file_name
        # This parameter is required.
        self.instance_id = instance_id
        self.path = path
        self.unique_id = unique_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.busi_type is not None:
            result['BusiType'] = self.busi_type
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.path is not None:
            result['Path'] = self.path
        if self.unique_id is not None:
            result['UniqueId'] = self.unique_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BusiType') is not None:
            self.busi_type = m.get('BusiType')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Path') is not None:
            self.path = m.get('Path')
        if m.get('UniqueId') is not None:
            self.unique_id = m.get('UniqueId')
        return self


class GetJobDataUploadParamsResponseBodyUploadParams(TeaModel):
    def __init__(
        self,
        access_id: str = None,
        expire: int = None,
        folder: str = None,
        host: str = None,
        policy: str = None,
        signature: str = None,
    ):
        self.access_id = access_id
        self.expire = expire
        self.folder = folder
        self.host = host
        self.policy = policy
        self.signature = signature

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.expire is not None:
            result['Expire'] = self.expire
        if self.folder is not None:
            result['Folder'] = self.folder
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        if m.get('Folder') is not None:
            self.folder = m.get('Folder')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class GetJobDataUploadParamsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        upload_params: GetJobDataUploadParamsResponseBodyUploadParams = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.upload_params = upload_params

    def validate(self):
        if self.upload_params:
            self.upload_params.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.upload_params is not None:
            result['UploadParams'] = self.upload_params.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UploadParams') is not None:
            temp_model = GetJobDataUploadParamsResponseBodyUploadParams()
            self.upload_params = temp_model.from_map(m['UploadParams'])
        return self


class GetJobDataUploadParamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetJobDataUploadParamsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetJobDataUploadParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMaxAttemptsPerDayRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class GetMaxAttemptsPerDayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        max_attempts_per_day: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.max_attempts_per_day = max_attempts_per_day
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetMaxAttemptsPerDayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetMaxAttemptsPerDayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMaxAttemptsPerDayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNumberDistrictInfoTemplateDownloadUrlResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        file_http_url: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.file_http_url = file_http_url
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetNumberDistrictInfoTemplateDownloadUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetNumberDistrictInfoTemplateDownloadUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetNumberDistrictInfoTemplateDownloadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRealtimeConcurrencyReportRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetRealtimeConcurrencyReportResponseBodyReportsList(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_name: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        max_concurrency_limit: int = None,
        min_concurrency_limit: int = None,
        occupied_concurrency_count: int = None,
        report_date: int = None,
    ):
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.max_concurrency_limit = max_concurrency_limit
        self.min_concurrency_limit = min_concurrency_limit
        self.occupied_concurrency_count = occupied_concurrency_count
        self.report_date = report_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.max_concurrency_limit is not None:
            result['MaxConcurrencyLimit'] = self.max_concurrency_limit
        if self.min_concurrency_limit is not None:
            result['MinConcurrencyLimit'] = self.min_concurrency_limit
        if self.occupied_concurrency_count is not None:
            result['OccupiedConcurrencyCount'] = self.occupied_concurrency_count
        if self.report_date is not None:
            result['ReportDate'] = self.report_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MaxConcurrencyLimit') is not None:
            self.max_concurrency_limit = m.get('MaxConcurrencyLimit')
        if m.get('MinConcurrencyLimit') is not None:
            self.min_concurrency_limit = m.get('MinConcurrencyLimit')
        if m.get('OccupiedConcurrencyCount') is not None:
            self.occupied_concurrency_count = m.get('OccupiedConcurrencyCount')
        if m.get('ReportDate') is not None:
            self.report_date = m.get('ReportDate')
        return self


class GetRealtimeConcurrencyReportResponseBodyReports(TeaModel):
    def __init__(
        self,
        list: List[GetRealtimeConcurrencyReportResponseBodyReportsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetRealtimeConcurrencyReportResponseBodyReportsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetRealtimeConcurrencyReportResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        report_date: int = None,
        reports: GetRealtimeConcurrencyReportResponseBodyReports = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.report_date = report_date
        self.reports = reports
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.reports:
            self.reports.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.report_date is not None:
            result['ReportDate'] = self.report_date
        if self.reports is not None:
            result['Reports'] = self.reports.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ReportDate') is not None:
            self.report_date = m.get('ReportDate')
        if m.get('Reports') is not None:
            temp_model = GetRealtimeConcurrencyReportResponseBodyReports()
            self.reports = temp_model.from_map(m['Reports'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetRealtimeConcurrencyReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetRealtimeConcurrencyReportResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRealtimeConcurrencyReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSummaryInfoRequest(TeaModel):
    def __init__(
        self,
        instance_id_list: List[str] = None,
    ):
        self.instance_id_list = instance_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id_list is not None:
            result['InstanceIdList'] = self.instance_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceIdList') is not None:
            self.instance_id_list = m.get('InstanceIdList')
        return self


class GetSummaryInfoResponseBodyAgentBotInstanceSummaryList(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        total_call_count: int = None,
        total_call_time: int = None,
        used_recording_storage_space: int = None,
    ):
        self.instance_id = instance_id
        self.total_call_count = total_call_count
        self.total_call_time = total_call_time
        self.used_recording_storage_space = used_recording_storage_space

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.total_call_count is not None:
            result['TotalCallCount'] = self.total_call_count
        if self.total_call_time is not None:
            result['TotalCallTime'] = self.total_call_time
        if self.used_recording_storage_space is not None:
            result['UsedRecordingStorageSpace'] = self.used_recording_storage_space
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TotalCallCount') is not None:
            self.total_call_count = m.get('TotalCallCount')
        if m.get('TotalCallTime') is not None:
            self.total_call_time = m.get('TotalCallTime')
        if m.get('UsedRecordingStorageSpace') is not None:
            self.used_recording_storage_space = m.get('UsedRecordingStorageSpace')
        return self


class GetSummaryInfoResponseBody(TeaModel):
    def __init__(
        self,
        agent_bot_instance_summary_list: List[GetSummaryInfoResponseBodyAgentBotInstanceSummaryList] = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.agent_bot_instance_summary_list = agent_bot_instance_summary_list
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.agent_bot_instance_summary_list:
            for k in self.agent_bot_instance_summary_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AgentBotInstanceSummaryList'] = []
        if self.agent_bot_instance_summary_list is not None:
            for k in self.agent_bot_instance_summary_list:
                result['AgentBotInstanceSummaryList'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_bot_instance_summary_list = []
        if m.get('AgentBotInstanceSummaryList') is not None:
            for k in m.get('AgentBotInstanceSummaryList'):
                temp_model = GetSummaryInfoResponseBodyAgentBotInstanceSummaryList()
                self.agent_bot_instance_summary_list.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetSummaryInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetSummaryInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSummaryInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTaskByUuidRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        task_id: str = None,
        with_conversations: bool = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.task_id = task_id
        self.with_conversations = with_conversations

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.with_conversations is not None:
            result['WithConversations'] = self.with_conversations
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('WithConversations') is not None:
            self.with_conversations = m.get('WithConversations')
        return self


class GetTaskByUuidResponseBodyTaskConversations(TeaModel):
    def __init__(
        self,
        action: str = None,
        script: str = None,
        sequence_id: str = None,
        speaker: str = None,
        timestamp: int = None,
    ):
        self.action = action
        self.script = script
        self.sequence_id = sequence_id
        self.speaker = speaker
        self.timestamp = timestamp

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.script is not None:
            result['Script'] = self.script
        if self.sequence_id is not None:
            result['SequenceId'] = self.sequence_id
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('SequenceId') is not None:
            self.sequence_id = m.get('SequenceId')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetTaskByUuidResponseBodyTask(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        call_id: str = None,
        called_number: str = None,
        calling_number: str = None,
        conversations: List[GetTaskByUuidResponseBodyTaskConversations] = None,
        end_reason: int = None,
        end_time: int = None,
        id: str = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: str = None,
        planned_time: int = None,
    ):
        self.actual_time = actual_time
        self.call_id = call_id
        self.called_number = called_number
        self.calling_number = calling_number
        self.conversations = conversations
        self.end_reason = end_reason
        self.end_time = end_time
        self.id = id
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.planned_time = planned_time

    def validate(self):
        if self.conversations:
            for k in self.conversations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        result['Conversations'] = []
        if self.conversations is not None:
            for k in self.conversations:
                result['Conversations'].append(k.to_map() if k else None)
        if self.end_reason is not None:
            result['EndReason'] = self.end_reason
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.id is not None:
            result['Id'] = self.id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planned_time is not None:
            result['PlannedTime'] = self.planned_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        self.conversations = []
        if m.get('Conversations') is not None:
            for k in m.get('Conversations'):
                temp_model = GetTaskByUuidResponseBodyTaskConversations()
                self.conversations.append(temp_model.from_map(k))
        if m.get('EndReason') is not None:
            self.end_reason = m.get('EndReason')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlannedTime') is not None:
            self.planned_time = m.get('PlannedTime')
        return self


class GetTaskByUuidResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        task: GetTaskByUuidResponseBodyTask = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.task = task

    def validate(self):
        if self.task:
            self.task.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task is not None:
            result['Task'] = self.task.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Task') is not None:
            temp_model = GetTaskByUuidResponseBodyTask()
            self.task = temp_model.from_map(m['Task'])
        return self


class GetTaskByUuidResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetTaskByUuidResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTaskByUuidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVersionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        version: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.version = version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetVersionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetVersionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ImportScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        nlu_engine: str = None,
        signature_url: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.nlu_engine = nlu_engine
        # This parameter is required.
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class ImportScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_id = script_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ImportScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ImportScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ImportScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InflightTaskTimeoutRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_owner_id: int = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.instance_owner_id = instance_owner_id
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class InflightTaskTimeoutResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InflightTaskTimeoutResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InflightTaskTimeoutResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InflightTaskTimeoutResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentProfilesRequest(TeaModel):
    def __init__(
        self,
        app_ip: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        self.app_ip = app_ip
        # This parameter is required.
        self.instance_id = instance_id
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_ip is not None:
            result['AppIp'] = self.app_ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppIp') is not None:
            self.app_ip = m.get('AppIp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListAgentProfilesResponseBodyData(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        agent_profile_template_id: str = None,
        agent_type: str = None,
        create_time: str = None,
        description: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        script_id: str = None,
        system: bool = None,
        update_time: str = None,
        variables_json: str = None,
    ):
        self.agent_profile_id = agent_profile_id
        self.agent_profile_template_id = agent_profile_template_id
        # agent type
        self.agent_type = agent_type
        self.create_time = create_time
        self.description = description
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.script_id = script_id
        self.system = system
        self.update_time = update_time
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.agent_type is not None:
            result['AgentType'] = self.agent_type
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.system is not None:
            result['System'] = self.system
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AgentType') is not None:
            self.agent_type = m.get('AgentType')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('System') is not None:
            self.system = m.get('System')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class ListAgentProfilesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListAgentProfilesResponseBodyData] = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListAgentProfilesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentProfilesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAgentProfilesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAgentProfilesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAllTenantBindNumberBindingResponseBodyDataList(TeaModel):
    def __init__(
        self,
        billing_type: str = None,
        binding_id: str = None,
        instance_name_list: List[str] = None,
        number: str = None,
        serialized_params: str = None,
        trunk_name: str = None,
    ):
        self.billing_type = billing_type
        self.binding_id = binding_id
        self.instance_name_list = instance_name_list
        self.number = number
        self.serialized_params = serialized_params
        self.trunk_name = trunk_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.billing_type is not None:
            result['BillingType'] = self.billing_type
        if self.binding_id is not None:
            result['BindingId'] = self.binding_id
        if self.instance_name_list is not None:
            result['InstanceNameList'] = self.instance_name_list
        if self.number is not None:
            result['Number'] = self.number
        if self.serialized_params is not None:
            result['SerializedParams'] = self.serialized_params
        if self.trunk_name is not None:
            result['TrunkName'] = self.trunk_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillingType') is not None:
            self.billing_type = m.get('BillingType')
        if m.get('BindingId') is not None:
            self.binding_id = m.get('BindingId')
        if m.get('InstanceNameList') is not None:
            self.instance_name_list = m.get('InstanceNameList')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('SerializedParams') is not None:
            self.serialized_params = m.get('SerializedParams')
        if m.get('TrunkName') is not None:
            self.trunk_name = m.get('TrunkName')
        return self


class ListAllTenantBindNumberBindingResponseBodyData(TeaModel):
    def __init__(
        self,
        list: List[ListAllTenantBindNumberBindingResponseBodyDataList] = None,
    ):
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListAllTenantBindNumberBindingResponseBodyDataList()
                self.list.append(temp_model.from_map(k))
        return self


class ListAllTenantBindNumberBindingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListAllTenantBindNumberBindingResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListAllTenantBindNumberBindingResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAllTenantBindNumberBindingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAllTenantBindNumberBindingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAllTenantBindNumberBindingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAnnotationMissionRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
        annotation_mission_name: str = None,
        annotation_status_list_filter: List[int] = None,
        annotation_status_list_string_filter: str = None,
        create_time_end_filter: int = None,
        create_time_start_filter: int = None,
        instance_id: str = None,
        page_index: int = None,
        page_size: int = None,
    ):
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_name = annotation_mission_name
        self.annotation_status_list_filter = annotation_status_list_filter
        self.annotation_status_list_string_filter = annotation_status_list_string_filter
        self.create_time_end_filter = create_time_end_filter
        self.create_time_start_filter = create_time_start_filter
        self.instance_id = instance_id
        self.page_index = page_index
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_name is not None:
            result['AnnotationMissionName'] = self.annotation_mission_name
        if self.annotation_status_list_filter is not None:
            result['AnnotationStatusListFilter'] = self.annotation_status_list_filter
        if self.annotation_status_list_string_filter is not None:
            result['AnnotationStatusListStringFilter'] = self.annotation_status_list_string_filter
        if self.create_time_end_filter is not None:
            result['CreateTimeEndFilter'] = self.create_time_end_filter
        if self.create_time_start_filter is not None:
            result['CreateTimeStartFilter'] = self.create_time_start_filter
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionName') is not None:
            self.annotation_mission_name = m.get('AnnotationMissionName')
        if m.get('AnnotationStatusListFilter') is not None:
            self.annotation_status_list_filter = m.get('AnnotationStatusListFilter')
        if m.get('AnnotationStatusListStringFilter') is not None:
            self.annotation_status_list_string_filter = m.get('AnnotationStatusListStringFilter')
        if m.get('CreateTimeEndFilter') is not None:
            self.create_time_end_filter = m.get('CreateTimeEndFilter')
        if m.get('CreateTimeStartFilter') is not None:
            self.create_time_start_filter = m.get('CreateTimeStartFilter')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAnnotationMissionResponseBodyDataAnnotationMissionList(TeaModel):
    def __init__(
        self,
        annotation_mission_data_source_type: int = None,
        annotation_mission_debug_data_source_list: List[int] = None,
        annotation_mission_id: str = None,
        annotation_mission_name: str = None,
        annotation_status: int = None,
        conversation_time_end_filter: int = None,
        conversation_time_start_filter: int = None,
        create_time: int = None,
        exclude_other_mission_session: bool = None,
        finish_time: int = None,
        instance_id: str = None,
        sampling_count: int = None,
        sampling_description: str = None,
        sampling_rate: int = None,
        sampling_type: int = None,
        session_end_reason_filter_list: List[int] = None,
        session_finish_count: int = None,
        session_total_count: int = None,
    ):
        self.annotation_mission_data_source_type = annotation_mission_data_source_type
        self.annotation_mission_debug_data_source_list = annotation_mission_debug_data_source_list
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_name = annotation_mission_name
        self.annotation_status = annotation_status
        self.conversation_time_end_filter = conversation_time_end_filter
        self.conversation_time_start_filter = conversation_time_start_filter
        self.create_time = create_time
        self.exclude_other_mission_session = exclude_other_mission_session
        self.finish_time = finish_time
        self.instance_id = instance_id
        self.sampling_count = sampling_count
        self.sampling_description = sampling_description
        self.sampling_rate = sampling_rate
        self.sampling_type = sampling_type
        self.session_end_reason_filter_list = session_end_reason_filter_list
        self.session_finish_count = session_finish_count
        self.session_total_count = session_total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_data_source_type is not None:
            result['AnnotationMissionDataSourceType'] = self.annotation_mission_data_source_type
        if self.annotation_mission_debug_data_source_list is not None:
            result['AnnotationMissionDebugDataSourceList'] = self.annotation_mission_debug_data_source_list
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_name is not None:
            result['AnnotationMissionName'] = self.annotation_mission_name
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.conversation_time_end_filter is not None:
            result['ConversationTimeEndFilter'] = self.conversation_time_end_filter
        if self.conversation_time_start_filter is not None:
            result['ConversationTimeStartFilter'] = self.conversation_time_start_filter
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.exclude_other_mission_session is not None:
            result['ExcludeOtherMissionSession'] = self.exclude_other_mission_session
        if self.finish_time is not None:
            result['FinishTime'] = self.finish_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.sampling_count is not None:
            result['SamplingCount'] = self.sampling_count
        if self.sampling_description is not None:
            result['SamplingDescription'] = self.sampling_description
        if self.sampling_rate is not None:
            result['SamplingRate'] = self.sampling_rate
        if self.sampling_type is not None:
            result['SamplingType'] = self.sampling_type
        if self.session_end_reason_filter_list is not None:
            result['SessionEndReasonFilterList'] = self.session_end_reason_filter_list
        if self.session_finish_count is not None:
            result['SessionFinishCount'] = self.session_finish_count
        if self.session_total_count is not None:
            result['SessionTotalCount'] = self.session_total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionDataSourceType') is not None:
            self.annotation_mission_data_source_type = m.get('AnnotationMissionDataSourceType')
        if m.get('AnnotationMissionDebugDataSourceList') is not None:
            self.annotation_mission_debug_data_source_list = m.get('AnnotationMissionDebugDataSourceList')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionName') is not None:
            self.annotation_mission_name = m.get('AnnotationMissionName')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('ConversationTimeEndFilter') is not None:
            self.conversation_time_end_filter = m.get('ConversationTimeEndFilter')
        if m.get('ConversationTimeStartFilter') is not None:
            self.conversation_time_start_filter = m.get('ConversationTimeStartFilter')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ExcludeOtherMissionSession') is not None:
            self.exclude_other_mission_session = m.get('ExcludeOtherMissionSession')
        if m.get('FinishTime') is not None:
            self.finish_time = m.get('FinishTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SamplingCount') is not None:
            self.sampling_count = m.get('SamplingCount')
        if m.get('SamplingDescription') is not None:
            self.sampling_description = m.get('SamplingDescription')
        if m.get('SamplingRate') is not None:
            self.sampling_rate = m.get('SamplingRate')
        if m.get('SamplingType') is not None:
            self.sampling_type = m.get('SamplingType')
        if m.get('SessionEndReasonFilterList') is not None:
            self.session_end_reason_filter_list = m.get('SessionEndReasonFilterList')
        if m.get('SessionFinishCount') is not None:
            self.session_finish_count = m.get('SessionFinishCount')
        if m.get('SessionTotalCount') is not None:
            self.session_total_count = m.get('SessionTotalCount')
        return self


class ListAnnotationMissionResponseBodyData(TeaModel):
    def __init__(
        self,
        annotation_mission_list: List[ListAnnotationMissionResponseBodyDataAnnotationMissionList] = None,
        message: str = None,
        page_index: int = None,
        page_size: int = None,
        success: bool = None,
        total_count: int = None,
        total_page_count: int = None,
    ):
        self.annotation_mission_list = annotation_mission_list
        self.message = message
        self.page_index = page_index
        self.page_size = page_size
        self.success = success
        self.total_count = total_count
        self.total_page_count = total_page_count

    def validate(self):
        if self.annotation_mission_list:
            for k in self.annotation_mission_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnnotationMissionList'] = []
        if self.annotation_mission_list is not None:
            for k in self.annotation_mission_list:
                result['AnnotationMissionList'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.total_page_count is not None:
            result['TotalPageCount'] = self.total_page_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.annotation_mission_list = []
        if m.get('AnnotationMissionList') is not None:
            for k in m.get('AnnotationMissionList'):
                temp_model = ListAnnotationMissionResponseBodyDataAnnotationMissionList()
                self.annotation_mission_list.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('TotalPageCount') is not None:
            self.total_page_count = m.get('TotalPageCount')
        return self


class ListAnnotationMissionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListAnnotationMissionResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListAnnotationMissionResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAnnotationMissionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAnnotationMissionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAnnotationMissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAnnotationMissionSessionRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        environment: int = None,
        include_status_list_json_string: str = None,
        page_index: int = None,
        page_size: int = None,
    ):
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.environment = environment
        self.include_status_list_json_string = include_status_list_json_string
        self.page_index = page_index
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.environment is not None:
            result['Environment'] = self.environment
        if self.include_status_list_json_string is not None:
            result['IncludeStatusListJsonString'] = self.include_status_list_json_string
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('Environment') is not None:
            self.environment = m.get('Environment')
        if m.get('IncludeStatusListJsonString') is not None:
            self.include_status_list_json_string = m.get('IncludeStatusListJsonString')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_customization_data_info_id: str = None,
        annotation_mission_chat_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        content: str = None,
        create: bool = None,
        create_time: int = None,
        customization_data_description: str = None,
        customization_data_id: str = None,
        customization_data_name: str = None,
        customization_data_weight: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
    ):
        # id
        self.annotation_mission_chat_customization_data_info_id = annotation_mission_chat_customization_data_info_id
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.content = content
        self.create = create
        self.create_time = create_time
        self.customization_data_description = customization_data_description
        # id
        self.customization_data_id = customization_data_id
        self.customization_data_name = customization_data_name
        self.customization_data_weight = customization_data_weight
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_customization_data_info_id is not None:
            result['AnnotationMissionChatCustomizationDataInfoId'] = self.annotation_mission_chat_customization_data_info_id
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.content is not None:
            result['Content'] = self.content
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.customization_data_description is not None:
            result['CustomizationDataDescription'] = self.customization_data_description
        if self.customization_data_id is not None:
            result['CustomizationDataId'] = self.customization_data_id
        if self.customization_data_name is not None:
            result['CustomizationDataName'] = self.customization_data_name
        if self.customization_data_weight is not None:
            result['CustomizationDataWeight'] = self.customization_data_weight
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatCustomizationDataInfoId') is not None:
            self.annotation_mission_chat_customization_data_info_id = m.get('AnnotationMissionChatCustomizationDataInfoId')
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CustomizationDataDescription') is not None:
            self.customization_data_description = m.get('CustomizationDataDescription')
        if m.get('CustomizationDataId') is not None:
            self.customization_data_id = m.get('CustomizationDataId')
        if m.get('CustomizationDataName') is not None:
            self.customization_data_name = m.get('CustomizationDataName')
        if m.get('CustomizationDataWeight') is not None:
            self.customization_data_weight = m.get('CustomizationDataWeight')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_intent_user_say_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        bot_id: str = None,
        content: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        dialog_id: int = None,
        instance_id: str = None,
        intent_id: int = None,
        modified_time: int = None,
    ):
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        # id
        self.annotation_mission_chat_intent_user_say_info_id = annotation_mission_chat_intent_user_say_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.bot_id = bot_id
        self.content = content
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.dialog_id = dialog_id
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_intent_user_say_info_id is not None:
            result['AnnotationMissionChatIntentUserSayInfoId'] = self.annotation_mission_chat_intent_user_say_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.bot_id is not None:
            result['BotId'] = self.bot_id
        if self.content is not None:
            result['Content'] = self.content
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.dialog_id is not None:
            result['DialogId'] = self.dialog_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatIntentUserSayInfoId') is not None:
            self.annotation_mission_chat_intent_user_say_info_id = m.get('AnnotationMissionChatIntentUserSayInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('BotId') is not None:
            self.bot_id = m.get('BotId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('DialogId') is not None:
            self.dialog_id = m.get('DialogId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_tag_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_mission_tag_info_id: str = None,
        annotation_mission_tag_info_name: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
    ):
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        # id
        self.annotation_mission_chat_tag_info_id = annotation_mission_chat_tag_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        # tag id
        self.annotation_mission_tag_info_id = annotation_mission_tag_info_id
        self.annotation_mission_tag_info_name = annotation_mission_tag_info_name
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_tag_info_id is not None:
            result['AnnotationMissionChatTagInfoId'] = self.annotation_mission_chat_tag_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_mission_tag_info_id is not None:
            result['AnnotationMissionTagInfoId'] = self.annotation_mission_tag_info_id
        if self.annotation_mission_tag_info_name is not None:
            result['AnnotationMissionTagInfoName'] = self.annotation_mission_tag_info_name
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatTagInfoId') is not None:
            self.annotation_mission_chat_tag_info_id = m.get('AnnotationMissionChatTagInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationMissionTagInfoId') is not None:
            self.annotation_mission_tag_info_id = m.get('AnnotationMissionTagInfoId')
        if m.get('AnnotationMissionTagInfoName') is not None:
            self.annotation_mission_tag_info_name = m.get('AnnotationMissionTagInfoName')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_vocabulary_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
        vocabulary: str = None,
        vocabulary_description: str = None,
        vocabulary_id: str = None,
        vocabulary_name: str = None,
        vocabulary_weight: int = None,
    ):
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        # id
        self.annotation_mission_chat_vocabulary_info_id = annotation_mission_chat_vocabulary_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time
        self.vocabulary = vocabulary
        self.vocabulary_description = vocabulary_description
        self.vocabulary_id = vocabulary_id
        self.vocabulary_name = vocabulary_name
        self.vocabulary_weight = vocabulary_weight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_vocabulary_info_id is not None:
            result['AnnotationMissionChatVocabularyInfoId'] = self.annotation_mission_chat_vocabulary_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.vocabulary is not None:
            result['Vocabulary'] = self.vocabulary
        if self.vocabulary_description is not None:
            result['VocabularyDescription'] = self.vocabulary_description
        if self.vocabulary_id is not None:
            result['VocabularyId'] = self.vocabulary_id
        if self.vocabulary_name is not None:
            result['VocabularyName'] = self.vocabulary_name
        if self.vocabulary_weight is not None:
            result['VocabularyWeight'] = self.vocabulary_weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatVocabularyInfoId') is not None:
            self.annotation_mission_chat_vocabulary_info_id = m.get('AnnotationMissionChatVocabularyInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('Vocabulary') is not None:
            self.vocabulary = m.get('Vocabulary')
        if m.get('VocabularyDescription') is not None:
            self.vocabulary_description = m.get('VocabularyDescription')
        if m.get('VocabularyId') is not None:
            self.vocabulary_id = m.get('VocabularyId')
        if m.get('VocabularyName') is not None:
            self.vocabulary_name = m.get('VocabularyName')
        if m.get('VocabularyWeight') is not None:
            self.vocabulary_weight = m.get('VocabularyWeight')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList(TeaModel):
    def __init__(
        self,
        annotation_asr_result: str = None,
        annotation_mission_chat_customization_data_info_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList] = None,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_intent_user_say_info_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList] = None,
        annotation_mission_chat_tag_info_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList] = None,
        annotation_mission_chat_vocabulary_info_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList] = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_status: int = None,
        answer: str = None,
        asr_annotation_status: int = None,
        create_time: int = None,
        instance_id: str = None,
        intent_annotation_status: int = None,
        modified_time: int = None,
        occur_time: int = None,
        original_asr_result: str = None,
        sequence_id: str = None,
        sub_status: int = None,
        tag_annotation_status: int = None,
        translation_error: int = None,
    ):
        self.annotation_asr_result = annotation_asr_result
        self.annotation_mission_chat_customization_data_info_list = annotation_mission_chat_customization_data_info_list
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        self.annotation_mission_chat_intent_user_say_info_list = annotation_mission_chat_intent_user_say_info_list
        self.annotation_mission_chat_tag_info_list = annotation_mission_chat_tag_info_list
        self.annotation_mission_chat_vocabulary_info_list = annotation_mission_chat_vocabulary_info_list
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.annotation_status = annotation_status
        self.answer = answer
        self.asr_annotation_status = asr_annotation_status
        self.create_time = create_time
        self.instance_id = instance_id
        self.intent_annotation_status = intent_annotation_status
        self.modified_time = modified_time
        self.occur_time = occur_time
        self.original_asr_result = original_asr_result
        self.sequence_id = sequence_id
        self.sub_status = sub_status
        self.tag_annotation_status = tag_annotation_status
        self.translation_error = translation_error

    def validate(self):
        if self.annotation_mission_chat_customization_data_info_list:
            for k in self.annotation_mission_chat_customization_data_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_intent_user_say_info_list:
            for k in self.annotation_mission_chat_intent_user_say_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_tag_info_list:
            for k in self.annotation_mission_chat_tag_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_vocabulary_info_list:
            for k in self.annotation_mission_chat_vocabulary_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_asr_result is not None:
            result['AnnotationAsrResult'] = self.annotation_asr_result
        result['AnnotationMissionChatCustomizationDataInfoList'] = []
        if self.annotation_mission_chat_customization_data_info_list is not None:
            for k in self.annotation_mission_chat_customization_data_info_list:
                result['AnnotationMissionChatCustomizationDataInfoList'].append(k.to_map() if k else None)
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        result['AnnotationMissionChatIntentUserSayInfoList'] = []
        if self.annotation_mission_chat_intent_user_say_info_list is not None:
            for k in self.annotation_mission_chat_intent_user_say_info_list:
                result['AnnotationMissionChatIntentUserSayInfoList'].append(k.to_map() if k else None)
        result['AnnotationMissionChatTagInfoList'] = []
        if self.annotation_mission_chat_tag_info_list is not None:
            for k in self.annotation_mission_chat_tag_info_list:
                result['AnnotationMissionChatTagInfoList'].append(k.to_map() if k else None)
        result['AnnotationMissionChatVocabularyInfoList'] = []
        if self.annotation_mission_chat_vocabulary_info_list is not None:
            for k in self.annotation_mission_chat_vocabulary_info_list:
                result['AnnotationMissionChatVocabularyInfoList'].append(k.to_map() if k else None)
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.answer is not None:
            result['Answer'] = self.answer
        if self.asr_annotation_status is not None:
            result['AsrAnnotationStatus'] = self.asr_annotation_status
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_annotation_status is not None:
            result['IntentAnnotationStatus'] = self.intent_annotation_status
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.occur_time is not None:
            result['OccurTime'] = self.occur_time
        if self.original_asr_result is not None:
            result['OriginalAsrResult'] = self.original_asr_result
        if self.sequence_id is not None:
            result['SequenceId'] = self.sequence_id
        if self.sub_status is not None:
            result['SubStatus'] = self.sub_status
        if self.tag_annotation_status is not None:
            result['TagAnnotationStatus'] = self.tag_annotation_status
        if self.translation_error is not None:
            result['TranslationError'] = self.translation_error
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationAsrResult') is not None:
            self.annotation_asr_result = m.get('AnnotationAsrResult')
        self.annotation_mission_chat_customization_data_info_list = []
        if m.get('AnnotationMissionChatCustomizationDataInfoList') is not None:
            for k in m.get('AnnotationMissionChatCustomizationDataInfoList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList()
                self.annotation_mission_chat_customization_data_info_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        self.annotation_mission_chat_intent_user_say_info_list = []
        if m.get('AnnotationMissionChatIntentUserSayInfoList') is not None:
            for k in m.get('AnnotationMissionChatIntentUserSayInfoList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList()
                self.annotation_mission_chat_intent_user_say_info_list.append(temp_model.from_map(k))
        self.annotation_mission_chat_tag_info_list = []
        if m.get('AnnotationMissionChatTagInfoList') is not None:
            for k in m.get('AnnotationMissionChatTagInfoList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList()
                self.annotation_mission_chat_tag_info_list.append(temp_model.from_map(k))
        self.annotation_mission_chat_vocabulary_info_list = []
        if m.get('AnnotationMissionChatVocabularyInfoList') is not None:
            for k in m.get('AnnotationMissionChatVocabularyInfoList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList()
                self.annotation_mission_chat_vocabulary_info_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('Answer') is not None:
            self.answer = m.get('Answer')
        if m.get('AsrAnnotationStatus') is not None:
            self.asr_annotation_status = m.get('AsrAnnotationStatus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentAnnotationStatus') is not None:
            self.intent_annotation_status = m.get('IntentAnnotationStatus')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('OccurTime') is not None:
            self.occur_time = m.get('OccurTime')
        if m.get('OriginalAsrResult') is not None:
            self.original_asr_result = m.get('OriginalAsrResult')
        if m.get('SequenceId') is not None:
            self.sequence_id = m.get('SequenceId')
        if m.get('SubStatus') is not None:
            self.sub_status = m.get('SubStatus')
        if m.get('TagAnnotationStatus') is not None:
            self.tag_annotation_status = m.get('TagAnnotationStatus')
        if m.get('TranslationError') is not None:
            self.translation_error = m.get('TranslationError')
        return self


class ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList] = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_status: int = None,
        create_time: int = None,
        debug_conversation: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: str = None,
        modified_time: int = None,
        script_id: str = None,
        session_id: str = None,
        version: int = None,
    ):
        self.annotation_mission_chat_list = annotation_mission_chat_list
        self.annotation_mission_id = annotation_mission_id
        # ID
        self.annotation_mission_session_id = annotation_mission_session_id
        self.annotation_status = annotation_status
        self.create_time = create_time
        self.debug_conversation = debug_conversation
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.modified_time = modified_time
        self.script_id = script_id
        self.session_id = session_id
        self.version = version

    def validate(self):
        if self.annotation_mission_chat_list:
            for k in self.annotation_mission_chat_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnnotationMissionChatList'] = []
        if self.annotation_mission_chat_list is not None:
            for k in self.annotation_mission_chat_list:
                result['AnnotationMissionChatList'].append(k.to_map() if k else None)
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.debug_conversation is not None:
            result['DebugConversation'] = self.debug_conversation
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.session_id is not None:
            result['SessionId'] = self.session_id
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.annotation_mission_chat_list = []
        if m.get('AnnotationMissionChatList') is not None:
            for k in m.get('AnnotationMissionChatList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionListAnnotationMissionChatList()
                self.annotation_mission_chat_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DebugConversation') is not None:
            self.debug_conversation = m.get('DebugConversation')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SessionId') is not None:
            self.session_id = m.get('SessionId')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ListAnnotationMissionSessionResponseBodyData(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
        annotation_mission_session_list: List[ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList] = None,
        message: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_list = annotation_mission_session_list
        self.message = message
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.annotation_mission_session_list:
            for k in self.annotation_mission_session_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        result['AnnotationMissionSessionList'] = []
        if self.annotation_mission_session_list is not None:
            for k in self.annotation_mission_session_list:
                result['AnnotationMissionSessionList'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        self.annotation_mission_session_list = []
        if m.get('AnnotationMissionSessionList') is not None:
            for k in m.get('AnnotationMissionSessionList'):
                temp_model = ListAnnotationMissionSessionResponseBodyDataAnnotationMissionSessionList()
                self.annotation_mission_session_list.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAnnotationMissionSessionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListAnnotationMissionSessionResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListAnnotationMissionSessionResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAnnotationMissionSessionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListAnnotationMissionSessionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAnnotationMissionSessionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListApiPluginsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        uuids_json: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        self.uuids_json = uuids_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.uuids_json is not None:
            result['UuidsJson'] = self.uuids_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('UuidsJson') is not None:
            self.uuids_json = m.get('UuidsJson')
        return self


class ListApiPluginsResponseBodyApiPlugins(TeaModel):
    def __init__(
        self,
        description: str = None,
        drafted_config_json: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        instance_id: str = None,
        name: str = None,
        published_config_json: str = None,
        status: str = None,
        type: str = None,
        uuid: str = None,
    ):
        self.description = description
        self.drafted_config_json = drafted_config_json
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.instance_id = instance_id
        self.name = name
        self.published_config_json = published_config_json
        self.status = status
        self.type = type
        self.uuid = uuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.drafted_config_json is not None:
            result['DraftedConfigJson'] = self.drafted_config_json
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.published_config_json is not None:
            result['PublishedConfigJson'] = self.published_config_json
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DraftedConfigJson') is not None:
            self.drafted_config_json = m.get('DraftedConfigJson')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PublishedConfigJson') is not None:
            self.published_config_json = m.get('PublishedConfigJson')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class ListApiPluginsResponseBody(TeaModel):
    def __init__(
        self,
        api_plugins: List[ListApiPluginsResponseBodyApiPlugins] = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.api_plugins = api_plugins
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.api_plugins:
            for k in self.api_plugins:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ApiPlugins'] = []
        if self.api_plugins is not None:
            for k in self.api_plugins:
                result['ApiPlugins'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.api_plugins = []
        if m.get('ApiPlugins') is not None:
            for k in m.get('ApiPlugins'):
                temp_model = ListApiPluginsResponseBodyApiPlugins()
                self.api_plugins.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListApiPluginsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListApiPluginsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListApiPluginsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBeebotIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_name: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.intent_name = intent_name
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListBeebotIntentResponseBodyIntents(TeaModel):
    def __init__(
        self,
        alias_name: str = None,
        create_time: str = None,
        create_user_id: str = None,
        create_user_name: str = None,
        intent_id: int = None,
        intent_name: str = None,
        modify_time: str = None,
        modify_user_id: str = None,
        modify_user_name: str = None,
    ):
        self.alias_name = alias_name
        self.create_time = create_time
        self.create_user_id = create_user_id
        self.create_user_name = create_user_name
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.modify_time = modify_time
        self.modify_user_id = modify_user_id
        self.modify_user_name = modify_user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias_name is not None:
            result['AliasName'] = self.alias_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.create_user_id is not None:
            result['CreateUserId'] = self.create_user_id
        if self.create_user_name is not None:
            result['CreateUserName'] = self.create_user_name
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.modify_user_id is not None:
            result['ModifyUserId'] = self.modify_user_id
        if self.modify_user_name is not None:
            result['ModifyUserName'] = self.modify_user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliasName') is not None:
            self.alias_name = m.get('AliasName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CreateUserId') is not None:
            self.create_user_id = m.get('CreateUserId')
        if m.get('CreateUserName') is not None:
            self.create_user_name = m.get('CreateUserName')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('ModifyUserId') is not None:
            self.modify_user_id = m.get('ModifyUserId')
        if m.get('ModifyUserName') is not None:
            self.modify_user_name = m.get('ModifyUserName')
        return self


class ListBeebotIntentResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        intents: List[ListBeebotIntentResponseBodyIntents] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.intents = intents
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ListBeebotIntentResponseBodyIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListBeebotIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListBeebotIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListBeebotIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBeebotIntentLgfRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_id: str = None,
        lgf_text: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        self.lgf_text = lgf_text
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.lgf_text is not None:
            result['LgfText'] = self.lgf_text
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('LgfText') is not None:
            self.lgf_text = m.get('LgfText')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListBeebotIntentLgfResponseBodyLgfs(TeaModel):
    def __init__(
        self,
        create_time: str = None,
        intent_id: int = None,
        lgf_id: int = None,
        modify_time: str = None,
        rule_text: str = None,
    ):
        self.create_time = create_time
        self.intent_id = intent_id
        self.lgf_id = lgf_id
        self.modify_time = modify_time
        self.rule_text = rule_text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.rule_text is not None:
            result['RuleText'] = self.rule_text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('RuleText') is not None:
            self.rule_text = m.get('RuleText')
        return self


class ListBeebotIntentLgfResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        lgfs: List[ListBeebotIntentLgfResponseBodyLgfs] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.lgfs = lgfs
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.lgfs:
            for k in self.lgfs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Lgfs'] = []
        if self.lgfs is not None:
            for k in self.lgfs:
                result['Lgfs'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.lgfs = []
        if m.get('Lgfs') is not None:
            for k in m.get('Lgfs'):
                temp_model = ListBeebotIntentLgfResponseBodyLgfs()
                self.lgfs.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListBeebotIntentLgfResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListBeebotIntentLgfResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListBeebotIntentLgfResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBeebotIntentUserSayRequest(TeaModel):
    def __init__(
        self,
        content: str = None,
        instance_id: str = None,
        intent_id: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        self.content = content
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListBeebotIntentUserSayResponseBodyUserSays(TeaModel):
    def __init__(
        self,
        content: str = None,
        create_time: str = None,
        intent_id: int = None,
        modify_time: str = None,
        user_say_id: str = None,
    ):
        self.content = content
        self.create_time = create_time
        self.intent_id = intent_id
        self.modify_time = modify_time
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class ListBeebotIntentUserSayResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
        user_says: List[ListBeebotIntentUserSayResponseBodyUserSays] = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count
        self.user_says = user_says

    def validate(self):
        if self.user_says:
            for k in self.user_says:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        result['UserSays'] = []
        if self.user_says is not None:
            for k in self.user_says:
                result['UserSays'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        self.user_says = []
        if m.get('UserSays') is not None:
            for k in m.get('UserSays'):
                temp_model = ListBeebotIntentUserSayResponseBodyUserSays()
                self.user_says.append(temp_model.from_map(k))
        return self


class ListBeebotIntentUserSayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListBeebotIntentUserSayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListBeebotIntentUserSayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListChatbotInstancesRequest(TeaModel):
    def __init__(
        self,
        agent_key: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.agent_key = agent_key
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListChatbotInstancesResponseBodyBots(TeaModel):
    def __init__(
        self,
        avatar: str = None,
        create_time: str = None,
        instance_id: str = None,
        introduction: str = None,
        language_code: str = None,
        name: str = None,
        time_zone: str = None,
    ):
        self.avatar = avatar
        self.create_time = create_time
        self.instance_id = instance_id
        self.introduction = introduction
        self.language_code = language_code
        self.name = name
        self.time_zone = time_zone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['Avatar'] = self.avatar
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.introduction is not None:
            result['Introduction'] = self.introduction
        if self.language_code is not None:
            result['LanguageCode'] = self.language_code
        if self.name is not None:
            result['Name'] = self.name
        if self.time_zone is not None:
            result['TimeZone'] = self.time_zone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Avatar') is not None:
            self.avatar = m.get('Avatar')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Introduction') is not None:
            self.introduction = m.get('Introduction')
        if m.get('LanguageCode') is not None:
            self.language_code = m.get('LanguageCode')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('TimeZone') is not None:
            self.time_zone = m.get('TimeZone')
        return self


class ListChatbotInstancesResponseBody(TeaModel):
    def __init__(
        self,
        bots: List[ListChatbotInstancesResponseBodyBots] = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.bots = bots
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.bots:
            for k in self.bots:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Bots'] = []
        if self.bots is not None:
            for k in self.bots:
                result['Bots'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.bots = []
        if m.get('Bots') is not None:
            for k in m.get('Bots'):
                temp_model = ListChatbotInstancesResponseBodyBots()
                self.bots.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListChatbotInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListChatbotInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListChatbotInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDialogueFlowsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListDialogueFlowsResponseBodyDialogueFlows(TeaModel):
    def __init__(
        self,
        dialogue_flow_definition: str = None,
        dialogue_flow_id: str = None,
        dialogue_flow_name: str = None,
        dialogue_flow_type: str = None,
        script_id: str = None,
        script_version: str = None,
    ):
        self.dialogue_flow_definition = dialogue_flow_definition
        self.dialogue_flow_id = dialogue_flow_id
        self.dialogue_flow_name = dialogue_flow_name
        self.dialogue_flow_type = dialogue_flow_type
        self.script_id = script_id
        self.script_version = script_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.dialogue_flow_name is not None:
            result['DialogueFlowName'] = self.dialogue_flow_name
        if self.dialogue_flow_type is not None:
            result['DialogueFlowType'] = self.dialogue_flow_type
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('DialogueFlowName') is not None:
            self.dialogue_flow_name = m.get('DialogueFlowName')
        if m.get('DialogueFlowType') is not None:
            self.dialogue_flow_type = m.get('DialogueFlowType')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        return self


class ListDialogueFlowsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dialogue_flows: List[ListDialogueFlowsResponseBodyDialogueFlows] = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.dialogue_flows = dialogue_flows
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.dialogue_flows:
            for k in self.dialogue_flows:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['DialogueFlows'] = []
        if self.dialogue_flows is not None:
            for k in self.dialogue_flows:
                result['DialogueFlows'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.dialogue_flows = []
        if m.get('DialogueFlows') is not None:
            for k in m.get('DialogueFlows'):
                temp_model = ListDialogueFlowsResponseBodyDialogueFlows()
                self.dialogue_flows.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListDialogueFlowsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListDialogueFlowsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDialogueFlowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDownloadTasksRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles(TeaModel):
    def __init__(
        self,
        file_id: str = None,
        progress: int = None,
        status: str = None,
        title: str = None,
    ):
        self.file_id = file_id
        self.progress = progress
        self.status = status
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class ListDownloadTasksResponseBodyDownloadTasksList(TeaModel):
    def __init__(
        self,
        download_task_files: List[ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles] = None,
        expire_time: int = None,
        status: str = None,
        task_id: str = None,
        title: str = None,
    ):
        self.download_task_files = download_task_files
        self.expire_time = expire_time
        self.status = status
        self.task_id = task_id
        self.title = title

    def validate(self):
        if self.download_task_files:
            for k in self.download_task_files:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DownloadTaskFiles'] = []
        if self.download_task_files is not None:
            for k in self.download_task_files:
                result['DownloadTaskFiles'].append(k.to_map() if k else None)
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.download_task_files = []
        if m.get('DownloadTaskFiles') is not None:
            for k in m.get('DownloadTaskFiles'):
                temp_model = ListDownloadTasksResponseBodyDownloadTasksListDownloadTaskFiles()
                self.download_task_files.append(temp_model.from_map(k))
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class ListDownloadTasksResponseBodyDownloadTasks(TeaModel):
    def __init__(
        self,
        list: List[ListDownloadTasksResponseBodyDownloadTasksList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListDownloadTasksResponseBodyDownloadTasksList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDownloadTasksResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        download_tasks: ListDownloadTasksResponseBodyDownloadTasks = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.download_tasks = download_tasks
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.download_tasks:
            self.download_tasks.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.download_tasks is not None:
            result['DownloadTasks'] = self.download_tasks.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DownloadTasks') is not None:
            temp_model = ListDownloadTasksResponseBodyDownloadTasks()
            self.download_tasks = temp_model.from_map(m['DownloadTasks'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListDownloadTasksResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListDownloadTasksResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDownloadTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListFlashSmsTemplatesRequest(TeaModel):
    def __init__(
        self,
        config_id: str = None,
        instance_id: str = None,
        provider_id: str = None,
    ):
        # This parameter is required.
        self.config_id = config_id
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.provider_id = provider_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.config_id is not None:
            result['ConfigId'] = self.config_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.provider_id is not None:
            result['ProviderId'] = self.provider_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConfigId') is not None:
            self.config_id = m.get('ConfigId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ProviderId') is not None:
            self.provider_id = m.get('ProviderId')
        return self


class ListFlashSmsTemplatesResponseBodyData(TeaModel):
    def __init__(
        self,
        template_content: str = None,
        template_id: str = None,
        template_name: str = None,
    ):
        self.template_content = template_content
        self.template_id = template_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class ListFlashSmsTemplatesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: List[ListFlashSmsTemplatesResponseBodyData] = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListFlashSmsTemplatesResponseBodyData()
                self.data.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListFlashSmsTemplatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListFlashSmsTemplatesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListFlashSmsTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListGlobalQuestionsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListGlobalQuestionsResponseBodyGlobalQuestionsList(TeaModel):
    def __init__(
        self,
        answers: str = None,
        global_question_id: str = None,
        global_question_name: str = None,
        global_question_type: str = None,
        questions: str = None,
        script_id: str = None,
    ):
        self.answers = answers
        self.global_question_id = global_question_id
        self.global_question_name = global_question_name
        self.global_question_type = global_question_type
        self.questions = questions
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListGlobalQuestionsResponseBodyGlobalQuestions(TeaModel):
    def __init__(
        self,
        list: List[ListGlobalQuestionsResponseBodyGlobalQuestionsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListGlobalQuestionsResponseBodyGlobalQuestionsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListGlobalQuestionsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        global_questions: ListGlobalQuestionsResponseBodyGlobalQuestions = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.global_questions = global_questions
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.global_questions:
            self.global_questions.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('GlobalQuestions') is not None:
            temp_model = ListGlobalQuestionsResponseBodyGlobalQuestions()
            self.global_questions = temp_model.from_map(m['GlobalQuestions'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListGlobalQuestionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListGlobalQuestionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListGlobalQuestionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListInstancesRequest(TeaModel):
    def __init__(
        self,
        name: str = None,
        page_number: int = None,
        page_size: int = None,
        resource_group_id: str = None,
        tag: List[ListInstancesRequestTag] = None,
    ):
        self.name = name
        self.page_number = page_number
        self.page_size = page_size
        self.resource_group_id = resource_group_id
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListInstancesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListInstancesResponseBodyInstancesResourceTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListInstancesResponseBodyInstances(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        creator_id: int = None,
        creator_name: str = None,
        instance_description: str = None,
        instance_id: str = None,
        instance_name: str = None,
        is_preset: bool = None,
        max_concurrent_conversation: int = None,
        owner_name: str = None,
        resource_group_id: str = None,
        resource_tags: List[ListInstancesResponseBodyInstancesResourceTags] = None,
    ):
        self.creation_time = creation_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.instance_description = instance_description
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.is_preset = is_preset
        self.max_concurrent_conversation = max_concurrent_conversation
        self.owner_name = owner_name
        self.resource_group_id = resource_group_id
        self.resource_tags = resource_tags

    def validate(self):
        if self.resource_tags:
            for k in self.resource_tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.is_preset is not None:
            result['IsPreset'] = self.is_preset
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        result['ResourceTags'] = []
        if self.resource_tags is not None:
            for k in self.resource_tags:
                result['ResourceTags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('IsPreset') is not None:
            self.is_preset = m.get('IsPreset')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        self.resource_tags = []
        if m.get('ResourceTags') is not None:
            for k in m.get('ResourceTags'):
                temp_model = ListInstancesResponseBodyInstancesResourceTags()
                self.resource_tags.append(temp_model.from_map(k))
        return self


class ListInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        instances: List[ListInstancesResponseBodyInstances] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.instances = instances
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.instances:
            for k in self.instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Instances'] = []
        if self.instances is not None:
            for k in self.instances:
                result['Instances'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.instances = []
        if m.get('Instances') is not None:
            for k in m.get('Instances'):
                temp_model = ListInstancesResponseBodyInstances()
                self.instances.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIntentionsRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_data_source_type: int = None,
        bot_id: str = None,
        environment: int = None,
        instance_id: str = None,
        intent_id: int = None,
        page_index: int = None,
        page_size: int = None,
        script_id: str = None,
        user_nick: str = None,
    ):
        self.annotation_mission_data_source_type = annotation_mission_data_source_type
        self.bot_id = bot_id
        self.environment = environment
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.page_index = page_index
        self.page_size = page_size
        self.script_id = script_id
        self.user_nick = user_nick

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_data_source_type is not None:
            result['AnnotationMissionDataSourceType'] = self.annotation_mission_data_source_type
        if self.bot_id is not None:
            result['BotId'] = self.bot_id
        if self.environment is not None:
            result['Environment'] = self.environment
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionDataSourceType') is not None:
            self.annotation_mission_data_source_type = m.get('AnnotationMissionDataSourceType')
        if m.get('BotId') is not None:
            self.bot_id = m.get('BotId')
        if m.get('Environment') is not None:
            self.environment = m.get('Environment')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class ListIntentionsResponseBodyDataIntentListRuleCheck(TeaModel):
    def __init__(
        self,
        error: List[str] = None,
        strict: bool = None,
        text: str = None,
        warning: List[str] = None,
    ):
        self.error = error
        self.strict = strict
        self.text = text
        self.warning = warning

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error is not None:
            result['Error'] = self.error
        if self.strict is not None:
            result['Strict'] = self.strict
        if self.text is not None:
            result['Text'] = self.text
        if self.warning is not None:
            result['Warning'] = self.warning
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Error') is not None:
            self.error = m.get('Error')
        if m.get('Strict') is not None:
            self.strict = m.get('Strict')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        if m.get('Warning') is not None:
            self.warning = m.get('Warning')
        return self


class ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch(TeaModel):
    def __init__(
        self,
        id: str = None,
        label: str = None,
        name: str = None,
        type: str = None,
        value: str = None,
    ):
        self.id = id
        self.label = label
        self.name = name
        self.type = type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.label is not None:
            result['Label'] = self.label
        if self.name is not None:
            result['Name'] = self.name
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions(TeaModel):
    def __init__(
        self,
        aliyun_function: str = None,
        aliyun_service: str = None,
        code: str = None,
        description: str = None,
        end_point: str = None,
        function: str = None,
        name: str = None,
        params: Dict[str, Any] = None,
        switch: List[ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch] = None,
        type: str = None,
    ):
        self.aliyun_function = aliyun_function
        self.aliyun_service = aliyun_service
        self.code = code
        self.description = description
        self.end_point = end_point
        self.function = function
        self.name = name
        self.params = params
        self.switch = switch
        self.type = type

    def validate(self):
        if self.switch:
            for k in self.switch:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_function is not None:
            result['AliyunFunction'] = self.aliyun_function
        if self.aliyun_service is not None:
            result['AliyunService'] = self.aliyun_service
        if self.code is not None:
            result['Code'] = self.code
        if self.description is not None:
            result['Description'] = self.description
        if self.end_point is not None:
            result['EndPoint'] = self.end_point
        if self.function is not None:
            result['Function'] = self.function
        if self.name is not None:
            result['Name'] = self.name
        if self.params is not None:
            result['Params'] = self.params
        result['Switch'] = []
        if self.switch is not None:
            for k in self.switch:
                result['Switch'].append(k.to_map() if k else None)
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunFunction') is not None:
            self.aliyun_function = m.get('AliyunFunction')
        if m.get('AliyunService') is not None:
            self.aliyun_service = m.get('AliyunService')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('EndPoint') is not None:
            self.end_point = m.get('EndPoint')
        if m.get('Function') is not None:
            self.function = m.get('Function')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        self.switch = []
        if m.get('Switch') is not None:
            for k in m.get('Switch'):
                temp_model = ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctionsSwitch()
                self.switch.append(temp_model.from_map(k))
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListIntentionsResponseBodyDataIntentListSlotTags(TeaModel):
    def __init__(
        self,
        user_say_id: str = None,
        value: str = None,
    ):
        self.user_say_id = user_say_id
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListIntentionsResponseBodyDataIntentListSlot(TeaModel):
    def __init__(
        self,
        feedback_functions: List[ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions] = None,
        feedback_type: str = None,
        id: str = None,
        is_array: bool = None,
        is_encrypt: bool = None,
        is_interactive: bool = None,
        is_necessary: bool = None,
        life_span: int = None,
        name: str = None,
        question: List[str] = None,
        tags: List[ListIntentionsResponseBodyDataIntentListSlotTags] = None,
        value: str = None,
    ):
        self.feedback_functions = feedback_functions
        self.feedback_type = feedback_type
        self.id = id
        self.is_array = is_array
        self.is_encrypt = is_encrypt
        self.is_interactive = is_interactive
        self.is_necessary = is_necessary
        self.life_span = life_span
        self.name = name
        self.question = question
        self.tags = tags
        self.value = value

    def validate(self):
        if self.feedback_functions:
            for k in self.feedback_functions:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['FeedbackFunctions'] = []
        if self.feedback_functions is not None:
            for k in self.feedback_functions:
                result['FeedbackFunctions'].append(k.to_map() if k else None)
        if self.feedback_type is not None:
            result['FeedbackType'] = self.feedback_type
        if self.id is not None:
            result['Id'] = self.id
        if self.is_array is not None:
            result['IsArray'] = self.is_array
        if self.is_encrypt is not None:
            result['IsEncrypt'] = self.is_encrypt
        if self.is_interactive is not None:
            result['IsInteractive'] = self.is_interactive
        if self.is_necessary is not None:
            result['IsNecessary'] = self.is_necessary
        if self.life_span is not None:
            result['LifeSpan'] = self.life_span
        if self.name is not None:
            result['Name'] = self.name
        if self.question is not None:
            result['Question'] = self.question
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.feedback_functions = []
        if m.get('FeedbackFunctions') is not None:
            for k in m.get('FeedbackFunctions'):
                temp_model = ListIntentionsResponseBodyDataIntentListSlotFeedbackFunctions()
                self.feedback_functions.append(temp_model.from_map(k))
        if m.get('FeedbackType') is not None:
            self.feedback_type = m.get('FeedbackType')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsArray') is not None:
            self.is_array = m.get('IsArray')
        if m.get('IsEncrypt') is not None:
            self.is_encrypt = m.get('IsEncrypt')
        if m.get('IsInteractive') is not None:
            self.is_interactive = m.get('IsInteractive')
        if m.get('IsNecessary') is not None:
            self.is_necessary = m.get('IsNecessary')
        if m.get('LifeSpan') is not None:
            self.life_span = m.get('LifeSpan')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Question') is not None:
            self.question = m.get('Question')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = ListIntentionsResponseBodyDataIntentListSlotTags()
                self.tags.append(temp_model.from_map(k))
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListIntentionsResponseBodyDataIntentListUserSayUserSayData(TeaModel):
    def __init__(
        self,
        slot_id: str = None,
        text: str = None,
    ):
        self.slot_id = slot_id
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.slot_id is not None:
            result['SlotId'] = self.slot_id
        if self.text is not None:
            result['Text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SlotId') is not None:
            self.slot_id = m.get('SlotId')
        if m.get('Text') is not None:
            self.text = m.get('Text')
        return self


class ListIntentionsResponseBodyDataIntentListUserSay(TeaModel):
    def __init__(
        self,
        from_id: str = None,
        id: str = None,
        strict: bool = None,
        user_say_data: List[ListIntentionsResponseBodyDataIntentListUserSayUserSayData] = None,
    ):
        self.from_id = from_id
        self.id = id
        self.strict = strict
        self.user_say_data = user_say_data

    def validate(self):
        if self.user_say_data:
            for k in self.user_say_data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.from_id is not None:
            result['FromId'] = self.from_id
        if self.id is not None:
            result['Id'] = self.id
        if self.strict is not None:
            result['Strict'] = self.strict
        result['UserSayData'] = []
        if self.user_say_data is not None:
            for k in self.user_say_data:
                result['UserSayData'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FromId') is not None:
            self.from_id = m.get('FromId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Strict') is not None:
            self.strict = m.get('Strict')
        self.user_say_data = []
        if m.get('UserSayData') is not None:
            for k in m.get('UserSayData'):
                temp_model = ListIntentionsResponseBodyDataIntentListUserSayUserSayData()
                self.user_say_data.append(temp_model.from_map(k))
        return self


class ListIntentionsResponseBodyDataIntentList(TeaModel):
    def __init__(
        self,
        alias: List[str] = None,
        bot_id: int = None,
        bot_name: str = None,
        dialog_id: str = None,
        id: int = None,
        language: str = None,
        name: str = None,
        rule_check: List[ListIntentionsResponseBodyDataIntentListRuleCheck] = None,
        slot: List[ListIntentionsResponseBodyDataIntentListSlot] = None,
        table_id: int = None,
        type: int = None,
        user_say: List[ListIntentionsResponseBodyDataIntentListUserSay] = None,
    ):
        self.alias = alias
        self.bot_id = bot_id
        self.bot_name = bot_name
        self.dialog_id = dialog_id
        self.id = id
        self.language = language
        self.name = name
        self.rule_check = rule_check
        self.slot = slot
        self.table_id = table_id
        self.type = type
        self.user_say = user_say

    def validate(self):
        if self.rule_check:
            for k in self.rule_check:
                if k:
                    k.validate()
        if self.slot:
            for k in self.slot:
                if k:
                    k.validate()
        if self.user_say:
            for k in self.user_say:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias is not None:
            result['Alias'] = self.alias
        if self.bot_id is not None:
            result['BotId'] = self.bot_id
        if self.bot_name is not None:
            result['BotName'] = self.bot_name
        if self.dialog_id is not None:
            result['DialogId'] = self.dialog_id
        if self.id is not None:
            result['Id'] = self.id
        if self.language is not None:
            result['Language'] = self.language
        if self.name is not None:
            result['Name'] = self.name
        result['RuleCheck'] = []
        if self.rule_check is not None:
            for k in self.rule_check:
                result['RuleCheck'].append(k.to_map() if k else None)
        result['Slot'] = []
        if self.slot is not None:
            for k in self.slot:
                result['Slot'].append(k.to_map() if k else None)
        if self.table_id is not None:
            result['TableId'] = self.table_id
        if self.type is not None:
            result['Type'] = self.type
        result['UserSay'] = []
        if self.user_say is not None:
            for k in self.user_say:
                result['UserSay'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Alias') is not None:
            self.alias = m.get('Alias')
        if m.get('BotId') is not None:
            self.bot_id = m.get('BotId')
        if m.get('BotName') is not None:
            self.bot_name = m.get('BotName')
        if m.get('DialogId') is not None:
            self.dialog_id = m.get('DialogId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        self.rule_check = []
        if m.get('RuleCheck') is not None:
            for k in m.get('RuleCheck'):
                temp_model = ListIntentionsResponseBodyDataIntentListRuleCheck()
                self.rule_check.append(temp_model.from_map(k))
        self.slot = []
        if m.get('Slot') is not None:
            for k in m.get('Slot'):
                temp_model = ListIntentionsResponseBodyDataIntentListSlot()
                self.slot.append(temp_model.from_map(k))
        if m.get('TableId') is not None:
            self.table_id = m.get('TableId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.user_say = []
        if m.get('UserSay') is not None:
            for k in m.get('UserSay'):
                temp_model = ListIntentionsResponseBodyDataIntentListUserSay()
                self.user_say.append(temp_model.from_map(k))
        return self


class ListIntentionsResponseBodyData(TeaModel):
    def __init__(
        self,
        bot_id: str = None,
        intent_list: List[ListIntentionsResponseBodyDataIntentList] = None,
        message: str = None,
        success: bool = None,
    ):
        self.bot_id = bot_id
        self.intent_list = intent_list
        self.message = message
        self.success = success

    def validate(self):
        if self.intent_list:
            for k in self.intent_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bot_id is not None:
            result['BotId'] = self.bot_id
        result['IntentList'] = []
        if self.intent_list is not None:
            for k in self.intent_list:
                result['IntentList'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BotId') is not None:
            self.bot_id = m.get('BotId')
        self.intent_list = []
        if m.get('IntentList') is not None:
            for k in m.get('IntentList'):
                temp_model = ListIntentionsResponseBodyDataIntentList()
                self.intent_list.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIntentionsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ListIntentionsResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ListIntentionsResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIntentionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListIntentionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListIntentionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIntentsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        keyword: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.keyword = keyword
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListIntentsResponseBodyIntentsList(TeaModel):
    def __init__(
        self,
        create_time: int = None,
        intent_description: str = None,
        intent_id: str = None,
        intent_name: str = None,
        keywords: str = None,
        script_id: str = None,
        update_time: int = None,
        utterances: str = None,
    ):
        self.create_time = create_time
        self.intent_description = intent_description
        self.intent_id = intent_id
        self.intent_name = intent_name
        self.keywords = keywords
        self.script_id = script_id
        self.update_time = update_time
        self.utterances = utterances

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class ListIntentsResponseBodyIntents(TeaModel):
    def __init__(
        self,
        list: List[ListIntentsResponseBodyIntentsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListIntentsResponseBodyIntentsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListIntentsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        intents: ListIntentsResponseBodyIntents = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.intents = intents
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.intents:
            self.intents.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intents is not None:
            result['Intents'] = self.intents.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Intents') is not None:
            temp_model = ListIntentsResponseBodyIntents()
            self.intents = temp_model.from_map(m['Intents'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIntentsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListIntentsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListIntentsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsRequest(TeaModel):
    def __init__(
        self,
        async_query: bool = None,
        end_time: int = None,
        instance_id: str = None,
        job_group_status_filter: str = None,
        only_min_concurrency_enabled: bool = None,
        page_number: int = None,
        page_size: int = None,
        search_text: str = None,
        start_time: int = None,
    ):
        self.async_query = async_query
        self.end_time = end_time
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_status_filter = job_group_status_filter
        self.only_min_concurrency_enabled = only_min_concurrency_enabled
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        self.search_text = search_text
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_query is not None:
            result['AsyncQuery'] = self.async_query
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_status_filter is not None:
            result['JobGroupStatusFilter'] = self.job_group_status_filter
        if self.only_min_concurrency_enabled is not None:
            result['OnlyMinConcurrencyEnabled'] = self.only_min_concurrency_enabled
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.search_text is not None:
            result['SearchText'] = self.search_text
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsyncQuery') is not None:
            self.async_query = m.get('AsyncQuery')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupStatusFilter') is not None:
            self.job_group_status_filter = m.get('JobGroupStatusFilter')
        if m.get('OnlyMinConcurrencyEnabled') is not None:
            self.only_min_concurrency_enabled = m.get('OnlyMinConcurrencyEnabled')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SearchText') is not None:
            self.search_text = m.get('SearchText')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsResponseBodyJobGroupsListExportProgress(TeaModel):
    def __init__(
        self,
        file_http_url: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.file_http_url = file_http_url
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgress(TeaModel):
    def __init__(
        self,
        cancelled_num: int = None,
        duration: int = None,
        executing_num: int = None,
        failed_num: int = None,
        paused_num: int = None,
        scheduling: int = None,
        start_time: int = None,
        status: str = None,
        total_completed: int = None,
        total_jobs: int = None,
        total_not_answered: int = None,
    ):
        self.cancelled_num = cancelled_num
        self.duration = duration
        self.executing_num = executing_num
        self.failed_num = failed_num
        self.paused_num = paused_num
        self.scheduling = scheduling
        self.start_time = start_time
        self.status = status
        self.total_completed = total_completed
        self.total_jobs = total_jobs
        self.total_not_answered = total_not_answered

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategy(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        start_time: int = None,
    ):
        self.end_time = end_time
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsResponseBodyJobGroupsList(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        export_progress: ListJobGroupsResponseBodyJobGroupsListExportProgress = None,
        job_data_parsing_task_id: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        modify_time: str = None,
        progress: ListJobGroupsResponseBodyJobGroupsListProgress = None,
        script_id: str = None,
        script_name: str = None,
        script_version: str = None,
        status: str = None,
        strategy: ListJobGroupsResponseBodyJobGroupsListStrategy = None,
        total_call_num: int = None,
    ):
        self.creation_time = creation_time
        self.export_progress = export_progress
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.modify_time = modify_time
        self.progress = progress
        self.script_id = script_id
        self.script_name = script_name
        self.script_version = script_version
        self.status = status
        self.strategy = strategy
        self.total_call_num = total_call_num

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.total_call_num is not None:
            result['TotalCallNum'] = self.total_call_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('TotalCallNum') is not None:
            self.total_call_num = m.get('TotalCallNum')
        return self


class ListJobGroupsResponseBodyJobGroups(TeaModel):
    def __init__(
        self,
        list: List[ListJobGroupsResponseBodyJobGroupsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobGroupsResponseBodyJobGroupsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobGroupsResponseBody(TeaModel):
    def __init__(
        self,
        async_task_id: str = None,
        code: str = None,
        http_status_code: int = None,
        job_groups: ListJobGroupsResponseBodyJobGroups = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.async_task_id = async_task_id
        self.code = code
        self.http_status_code = http_status_code
        self.job_groups = job_groups
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_groups:
            self.job_groups.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_groups is not None:
            result['JobGroups'] = self.job_groups.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroups') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroups()
            self.job_groups = temp_model.from_map(m['JobGroups'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListJobGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsAsyncRequest(TeaModel):
    def __init__(
        self,
        async_task_id: str = None,
    ):
        # This parameter is required.
        self.async_task_id = async_task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_task_id is not None:
            result['AsyncTaskId'] = self.async_task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AsyncTaskId') is not None:
            self.async_task_id = m.get('AsyncTaskId')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsExportProgress(TeaModel):
    def __init__(
        self,
        file_http_url: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.file_http_url = file_http_url
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsProgress(TeaModel):
    def __init__(
        self,
        cancelled_num: int = None,
        duration: int = None,
        executing_num: int = None,
        failed_num: int = None,
        paused_num: int = None,
        scheduling: int = None,
        start_time: int = None,
        status: str = None,
        total_completed: int = None,
        total_jobs: int = None,
        total_not_answered: int = None,
    ):
        self.cancelled_num = cancelled_num
        self.duration = duration
        self.executing_num = executing_num
        self.failed_num = failed_num
        self.paused_num = paused_num
        self.scheduling = scheduling
        self.start_time = start_time
        self.status = status
        self.total_completed = total_completed
        self.total_jobs = total_jobs
        self.total_not_answered = total_not_answered

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancelled_num is not None:
            result['CancelledNum'] = self.cancelled_num
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.executing_num is not None:
            result['ExecutingNum'] = self.executing_num
        if self.failed_num is not None:
            result['FailedNum'] = self.failed_num
        if self.paused_num is not None:
            result['PausedNum'] = self.paused_num
        if self.scheduling is not None:
            result['Scheduling'] = self.scheduling
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CancelledNum') is not None:
            self.cancelled_num = m.get('CancelledNum')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('ExecutingNum') is not None:
            self.executing_num = m.get('ExecutingNum')
        if m.get('FailedNum') is not None:
            self.failed_num = m.get('FailedNum')
        if m.get('PausedNum') is not None:
            self.paused_num = m.get('PausedNum')
        if m.get('Scheduling') is not None:
            self.scheduling = m.get('Scheduling')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        return self


class ListJobGroupsAsyncResponseBodyJobGroupsStrategy(TeaModel):
    def __init__(
        self,
        end_time: int = None,
        start_time: int = None,
    ):
        self.end_time = end_time
        self.start_time = start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        return self


class ListJobGroupsAsyncResponseBodyJobGroups(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        export_progress: ListJobGroupsAsyncResponseBodyJobGroupsExportProgress = None,
        job_data_parsing_task_id: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        modify_time: str = None,
        progress: ListJobGroupsAsyncResponseBodyJobGroupsProgress = None,
        script_id: str = None,
        script_name: str = None,
        script_version: str = None,
        status: str = None,
        strategy: ListJobGroupsAsyncResponseBodyJobGroupsStrategy = None,
        total_call_num: int = None,
    ):
        self.creation_time = creation_time
        self.export_progress = export_progress
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.modify_time = modify_time
        self.progress = progress
        self.script_id = script_id
        self.script_name = script_name
        self.script_version = script_version
        self.status = status
        self.strategy = strategy
        self.total_call_num = total_call_num

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.progress:
            self.progress.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.total_call_num is not None:
            result['TotalCallNum'] = self.total_call_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsAsyncResponseBodyJobGroupsStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('TotalCallNum') is not None:
            self.total_call_num = m.get('TotalCallNum')
        return self


class ListJobGroupsAsyncResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_groups: List[ListJobGroupsAsyncResponseBodyJobGroups] = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        success: bool = None,
        timeout: bool = None,
        total_count: int = None,
        vaild: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_groups = job_groups
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.success = success
        self.timeout = timeout
        self.total_count = total_count
        self.vaild = vaild

    def validate(self):
        if self.job_groups:
            for k in self.job_groups:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['JobGroups'] = []
        if self.job_groups is not None:
            for k in self.job_groups:
                result['JobGroups'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.vaild is not None:
            result['Vaild'] = self.vaild
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.job_groups = []
        if m.get('JobGroups') is not None:
            for k in m.get('JobGroups'):
                temp_model = ListJobGroupsAsyncResponseBodyJobGroups()
                self.job_groups.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('Vaild') is not None:
            self.vaild = m.get('Vaild')
        return self


class ListJobGroupsAsyncResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListJobGroupsAsyncResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobGroupsAsyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_id: List[str] = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class ListJobsResponseBodyJobsContacts(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsResponseBodyJobsExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsResponseBodyJobsSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        summary_name: str = None,
    ):
        self.category = category
        self.content = content
        self.summary_name = summary_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class ListJobsResponseBodyJobsTasksContact(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsResponseBodyJobsTasksConversationSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        summary_name: str = None,
    ):
        self.category = category
        self.content = content
        self.summary_name = summary_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        return self


class ListJobsResponseBodyJobsTasksConversation(TeaModel):
    def __init__(
        self,
        script: str = None,
        speaker: str = None,
        summary: List[ListJobsResponseBodyJobsTasksConversationSummary] = None,
        timestamp: int = None,
    ):
        self.script = script
        self.speaker = speaker
        self.summary = summary
        self.timestamp = timestamp

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script is not None:
            result['Script'] = self.script
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsResponseBodyJobsTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class ListJobsResponseBodyJobsTasks(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        brief: str = None,
        call_id: str = None,
        called_number: str = None,
        calling_number: str = None,
        chatbot_id: str = None,
        contact: ListJobsResponseBodyJobsTasksContact = None,
        conversation: List[ListJobsResponseBodyJobsTasksConversation] = None,
        duration: int = None,
        job_id: str = None,
        planed_time: int = None,
        scenario_id: str = None,
        status: str = None,
        task_id: str = None,
    ):
        self.actual_time = actual_time
        self.brief = brief
        self.call_id = call_id
        self.called_number = called_number
        self.calling_number = calling_number
        self.chatbot_id = chatbot_id
        self.contact = contact
        self.conversation = conversation
        self.duration = duration
        self.job_id = job_id
        self.planed_time = planed_time
        self.scenario_id = scenario_id
        self.status = status
        self.task_id = task_id

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = ListJobsResponseBodyJobsTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = ListJobsResponseBodyJobsTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobsResponseBodyJobs(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        contacts: List[ListJobsResponseBodyJobsContacts] = None,
        extras: List[ListJobsResponseBodyJobsExtras] = None,
        failure_reason: str = None,
        job_group_id: str = None,
        job_id: str = None,
        priority: int = None,
        reference_id: str = None,
        scenario_id: str = None,
        status: str = None,
        strategy_id: str = None,
        summary: List[ListJobsResponseBodyJobsSummary] = None,
        system_priority: int = None,
        tasks: List[ListJobsResponseBodyJobsTasks] = None,
    ):
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.extras = extras
        self.failure_reason = failure_reason
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.priority = priority
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.status = status
        self.strategy_id = strategy_id
        self.summary = summary
        self.system_priority = system_priority
        self.tasks = tasks

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsResponseBodyJobsContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsResponseBodyJobsExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsResponseBodyJobsSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = ListJobsResponseBodyJobsTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class ListJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        jobs: List[ListJobsResponseBodyJobs] = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.jobs = jobs
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.jobs:
            for k in self.jobs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Jobs'] = []
        if self.jobs is not None:
            for k in self.jobs:
                result['Jobs'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.jobs = []
        if m.get('Jobs') is not None:
            for k in m.get('Jobs'):
                temp_model = ListJobsResponseBodyJobs()
                self.jobs.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsByGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_failure_reason: str = None,
        job_group_id: str = None,
        job_status: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.job_failure_reason = job_failure_reason
        # This parameter is required.
        self.job_group_id = job_group_id
        self.job_status = job_status
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobsByGroupResponseBodyJobsListContacts(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class ListJobsByGroupResponseBodyJobsListExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsByGroupResponseBodyJobsListSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        conversation_detail_id: str = None,
        job_group_id: str = None,
        job_id: str = None,
        summary_id: str = None,
        summary_name: str = None,
        task_id: str = None,
    ):
        self.category = category
        self.content = content
        self.conversation_detail_id = conversation_detail_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.summary_id = summary_id
        self.summary_name = summary_name
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobsByGroupResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        contacts: List[ListJobsByGroupResponseBodyJobsListContacts] = None,
        extras: List[ListJobsByGroupResponseBodyJobsListExtras] = None,
        failure_reason: str = None,
        job_group_id: str = None,
        job_id: str = None,
        priority: int = None,
        reference_id: str = None,
        scenario_id: str = None,
        status: str = None,
        strategy_id: str = None,
        summary: List[ListJobsByGroupResponseBodyJobsListSummary] = None,
        system_priority: int = None,
    ):
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.extras = extras
        self.failure_reason = failure_reason
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.priority = priority
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.status = status
        self.strategy_id = strategy_id
        self.summary = summary
        self.system_priority = system_priority

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsByGroupResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsByGroupResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsByGroupResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        return self


class ListJobsByGroupResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[ListJobsByGroupResponseBodyJobsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobsByGroupResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobsByGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        jobs: ListJobsByGroupResponseBodyJobs = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.jobs = jobs
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = ListJobsByGroupResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsByGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListJobsByGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListJobsByGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListOutboundCallNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListOutboundCallNumbersResponseBodyOutboundCallNumbersList(TeaModel):
    def __init__(
        self,
        number: str = None,
        outbound_call_number_id: str = None,
        rate_limit_count: str = None,
        rate_limit_period: str = None,
    ):
        self.number = number
        self.outbound_call_number_id = outbound_call_number_id
        self.rate_limit_count = rate_limit_count
        self.rate_limit_period = rate_limit_period

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ListOutboundCallNumbersResponseBodyOutboundCallNumbers(TeaModel):
    def __init__(
        self,
        list: List[ListOutboundCallNumbersResponseBodyOutboundCallNumbersList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListOutboundCallNumbersResponseBodyOutboundCallNumbersList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListOutboundCallNumbersResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        outbound_call_numbers: ListOutboundCallNumbersResponseBodyOutboundCallNumbers = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.outbound_call_numbers = outbound_call_numbers
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.outbound_call_numbers:
            self.outbound_call_numbers.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_numbers is not None:
            result['OutboundCallNumbers'] = self.outbound_call_numbers.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumbers') is not None:
            temp_model = ListOutboundCallNumbersResponseBodyOutboundCallNumbers()
            self.outbound_call_numbers = temp_model.from_map(m['OutboundCallNumbers'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListOutboundCallNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListOutboundCallNumbersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListOutboundCallNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListResourceTagsRequest(TeaModel):
    def __init__(
        self,
        page_number: int = None,
        page_size: int = None,
        resource_type: str = None,
    ):
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.resource_type = resource_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class ListResourceTagsResponseBodyResourceTagsList(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListResourceTagsResponseBodyResourceTags(TeaModel):
    def __init__(
        self,
        list: List[ListResourceTagsResponseBodyResourceTagsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListResourceTagsResponseBodyResourceTagsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListResourceTagsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        resource_tags: ListResourceTagsResponseBodyResourceTags = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.resource_tags = resource_tags
        self.success = success

    def validate(self):
        if self.resource_tags:
            self.resource_tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_tags is not None:
            result['ResourceTags'] = self.resource_tags.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceTags') is not None:
            temp_model = ListResourceTagsResponseBodyResourceTags()
            self.resource_tags = temp_model.from_map(m['ResourceTags'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListResourceTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListResourceTagsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResourceTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSchedulerInstancesRequest(TeaModel):
    def __init__(
        self,
        instance_owner_id: int = None,
    ):
        self.instance_owner_id = instance_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        return self


class ListSchedulerInstancesResponseBodySchedulerInstances(TeaModel):
    def __init__(
        self,
        base_strategy: str = None,
        business: str = None,
        instance_id: str = None,
        max_concurrency: int = None,
        owner_id: str = None,
    ):
        self.base_strategy = base_strategy
        self.business = business
        self.instance_id = instance_id
        self.max_concurrency = max_concurrency
        self.owner_id = owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_strategy is not None:
            result['BaseStrategy'] = self.base_strategy
        if self.business is not None:
            result['Business'] = self.business
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_concurrency is not None:
            result['MaxConcurrency'] = self.max_concurrency
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BaseStrategy') is not None:
            self.base_strategy = m.get('BaseStrategy')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxConcurrency') is not None:
            self.max_concurrency = m.get('MaxConcurrency')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        return self


class ListSchedulerInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        scheduler_instances: List[ListSchedulerInstancesResponseBodySchedulerInstances] = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.scheduler_instances = scheduler_instances
        self.success = success

    def validate(self):
        if self.scheduler_instances:
            for k in self.scheduler_instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SchedulerInstances'] = []
        if self.scheduler_instances is not None:
            for k in self.scheduler_instances:
                result['SchedulerInstances'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.scheduler_instances = []
        if m.get('SchedulerInstances') is not None:
            for k in m.get('SchedulerInstances'):
                temp_model = ListSchedulerInstancesResponseBodySchedulerInstances()
                self.scheduler_instances.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSchedulerInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListSchedulerInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListSchedulerInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptPublishHistoriesRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList(TeaModel):
    def __init__(
        self,
        description: str = None,
        instance_id: str = None,
        publish_time: int = None,
        script_id: str = None,
        script_version: str = None,
    ):
        self.description = description
        self.instance_id = instance_id
        self.publish_time = publish_time
        self.script_id = script_id
        self.script_version = script_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.publish_time is not None:
            result['PublishTime'] = self.publish_time
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PublishTime') is not None:
            self.publish_time = m.get('PublishTime')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        return self


class ListScriptPublishHistoriesResponseBodyScriptPublishHistories(TeaModel):
    def __init__(
        self,
        list: List[ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptPublishHistoriesResponseBodyScriptPublishHistoriesList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptPublishHistoriesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_publish_histories: ListScriptPublishHistoriesResponseBodyScriptPublishHistories = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_publish_histories = script_publish_histories
        self.success = success

    def validate(self):
        if self.script_publish_histories:
            self.script_publish_histories.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_publish_histories is not None:
            result['ScriptPublishHistories'] = self.script_publish_histories.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptPublishHistories') is not None:
            temp_model = ListScriptPublishHistoriesResponseBodyScriptPublishHistories()
            self.script_publish_histories = temp_model.from_map(m['ScriptPublishHistories'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptPublishHistoriesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListScriptPublishHistoriesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptPublishHistoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        ref_ids_json: str = None,
        script_id: str = None,
        search: str = None,
        states_json: str = None,
        uuids_json: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        self.ref_ids_json = ref_ids_json
        # This parameter is required.
        self.script_id = script_id
        self.search = search
        self.states_json = states_json
        self.uuids_json = uuids_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.ref_ids_json is not None:
            result['RefIdsJson'] = self.ref_ids_json
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.search is not None:
            result['Search'] = self.search
        if self.states_json is not None:
            result['StatesJson'] = self.states_json
        if self.uuids_json is not None:
            result['UuidsJson'] = self.uuids_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RefIdsJson') is not None:
            self.ref_ids_json = m.get('RefIdsJson')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Search') is not None:
            self.search = m.get('Search')
        if m.get('StatesJson') is not None:
            self.states_json = m.get('StatesJson')
        if m.get('UuidsJson') is not None:
            self.uuids_json = m.get('UuidsJson')
        return self


class ListScriptRecordingResponseBodyScriptRecordings(TeaModel):
    def __init__(
        self,
        gmt_create: int = None,
        gmt_modified: int = None,
        gmt_upload: int = None,
        inner_id: str = None,
        instance_id: str = None,
        recording_content: str = None,
        recording_duration: int = None,
        recording_name: str = None,
        ref_id: str = None,
        script_id: str = None,
        state: int = None,
        state_extend: str = None,
        storage_uuid: str = None,
        uuid: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.gmt_upload = gmt_upload
        self.inner_id = inner_id
        self.instance_id = instance_id
        self.recording_content = recording_content
        self.recording_duration = recording_duration
        self.recording_name = recording_name
        self.ref_id = ref_id
        self.script_id = script_id
        self.state = state
        self.state_extend = state_extend
        self.storage_uuid = storage_uuid
        self.uuid = uuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.gmt_upload is not None:
            result['GmtUpload'] = self.gmt_upload
        if self.inner_id is not None:
            result['InnerId'] = self.inner_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.recording_content is not None:
            result['RecordingContent'] = self.recording_content
        if self.recording_duration is not None:
            result['RecordingDuration'] = self.recording_duration
        if self.recording_name is not None:
            result['RecordingName'] = self.recording_name
        if self.ref_id is not None:
            result['RefId'] = self.ref_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.state is not None:
            result['State'] = self.state
        if self.state_extend is not None:
            result['StateExtend'] = self.state_extend
        if self.storage_uuid is not None:
            result['StorageUuid'] = self.storage_uuid
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GmtUpload') is not None:
            self.gmt_upload = m.get('GmtUpload')
        if m.get('InnerId') is not None:
            self.inner_id = m.get('InnerId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordingContent') is not None:
            self.recording_content = m.get('RecordingContent')
        if m.get('RecordingDuration') is not None:
            self.recording_duration = m.get('RecordingDuration')
        if m.get('RecordingName') is not None:
            self.recording_name = m.get('RecordingName')
        if m.get('RefId') is not None:
            self.ref_id = m.get('RefId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('StateExtend') is not None:
            self.state_extend = m.get('StateExtend')
        if m.get('StorageUuid') is not None:
            self.storage_uuid = m.get('StorageUuid')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class ListScriptRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        page_number: int = None,
        page_size: int = None,
        request_id: str = None,
        script_recordings: List[ListScriptRecordingResponseBodyScriptRecordings] = None,
        success: bool = None,
        total_count: int = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.page_number = page_number
        self.page_size = page_size
        self.request_id = request_id
        self.script_recordings = script_recordings
        self.success = success
        self.total_count = total_count

    def validate(self):
        if self.script_recordings:
            for k in self.script_recordings:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScriptRecordings'] = []
        if self.script_recordings is not None:
            for k in self.script_recordings:
                result['ScriptRecordings'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.script_recordings = []
        if m.get('ScriptRecordings') is not None:
            for k in m.get('ScriptRecordings'):
                temp_model = ListScriptRecordingResponseBodyScriptRecordings()
                self.script_recordings.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListScriptRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptVoiceConfigsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_content: str = None,
        script_id: str = None,
        script_voice_config_id: str = None,
        script_waveform_relation: str = None,
        source: str = None,
        type: str = None,
    ):
        self.instance_id = instance_id
        self.script_content = script_content
        self.script_id = script_id
        self.script_voice_config_id = script_voice_config_id
        self.script_waveform_relation = script_waveform_relation
        self.source = source
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs(TeaModel):
    def __init__(
        self,
        list: List[ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptVoiceConfigsResponseBodyScriptVoiceConfigsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptVoiceConfigsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_voice_configs: ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_voice_configs = script_voice_configs
        self.success = success

    def validate(self):
        if self.script_voice_configs:
            self.script_voice_configs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_configs is not None:
            result['ScriptVoiceConfigs'] = self.script_voice_configs.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfigs') is not None:
            temp_model = ListScriptVoiceConfigsResponseBodyScriptVoiceConfigs()
            self.script_voice_configs = temp_model.from_map(m['ScriptVoiceConfigs'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptVoiceConfigsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListScriptVoiceConfigsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptVoiceConfigsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScriptsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        nlu_engine: str = None,
        page_number: int = None,
        page_size: int = None,
        script_name: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.nlu_engine = nlu_engine
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        self.script_name = script_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        return self


class ListScriptsResponseBodyScriptsListNluProfile(TeaModel):
    def __init__(
        self,
        fc_function: str = None,
        fc_http_trigger_url: str = None,
        fc_region: str = None,
    ):
        self.fc_function = fc_function
        self.fc_http_trigger_url = fc_http_trigger_url
        self.fc_region = fc_region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fc_function is not None:
            result['FcFunction'] = self.fc_function
        if self.fc_http_trigger_url is not None:
            result['FcHttpTriggerUrl'] = self.fc_http_trigger_url
        if self.fc_region is not None:
            result['FcRegion'] = self.fc_region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FcFunction') is not None:
            self.fc_function = m.get('FcFunction')
        if m.get('FcHttpTriggerUrl') is not None:
            self.fc_http_trigger_url = m.get('FcHttpTriggerUrl')
        if m.get('FcRegion') is not None:
            self.fc_region = m.get('FcRegion')
        return self


class ListScriptsResponseBodyScriptsList(TeaModel):
    def __init__(
        self,
        agent_key: str = None,
        agent_llm: bool = None,
        create_time: int = None,
        debug_status: str = None,
        emotion_enable: bool = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        is_preset: bool = None,
        long_wait_enable: bool = None,
        mini_playback_enable: bool = None,
        new_barge_in_enable: bool = None,
        nlu_access_type: str = None,
        nlu_engine: str = None,
        nlu_profile: ListScriptsResponseBodyScriptsListNluProfile = None,
        reject_reason: str = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        update_time: int = None,
        agent_id: int = None,
    ):
        self.agent_key = agent_key
        self.agent_llm = agent_llm
        self.create_time = create_time
        self.debug_status = debug_status
        self.emotion_enable = emotion_enable
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.is_preset = is_preset
        self.long_wait_enable = long_wait_enable
        self.mini_playback_enable = mini_playback_enable
        self.new_barge_in_enable = new_barge_in_enable
        self.nlu_access_type = nlu_access_type
        self.nlu_engine = nlu_engine
        self.nlu_profile = nlu_profile
        self.reject_reason = reject_reason
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.update_time = update_time
        self.agent_id = agent_id

    def validate(self):
        if self.nlu_profile:
            self.nlu_profile.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.agent_llm is not None:
            result['AgentLlm'] = self.agent_llm
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.is_preset is not None:
            result['IsPreset'] = self.is_preset
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.nlu_access_type is not None:
            result['NluAccessType'] = self.nlu_access_type
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.nlu_profile is not None:
            result['NluProfile'] = self.nlu_profile.to_map()
        if self.reject_reason is not None:
            result['RejectReason'] = self.reject_reason
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.agent_id is not None:
            result['agentId'] = self.agent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AgentLlm') is not None:
            self.agent_llm = m.get('AgentLlm')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('IsPreset') is not None:
            self.is_preset = m.get('IsPreset')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('NluAccessType') is not None:
            self.nlu_access_type = m.get('NluAccessType')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('NluProfile') is not None:
            temp_model = ListScriptsResponseBodyScriptsListNluProfile()
            self.nlu_profile = temp_model.from_map(m['NluProfile'])
        if m.get('RejectReason') is not None:
            self.reject_reason = m.get('RejectReason')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('agentId') is not None:
            self.agent_id = m.get('agentId')
        return self


class ListScriptsResponseBodyScripts(TeaModel):
    def __init__(
        self,
        list: List[ListScriptsResponseBodyScriptsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListScriptsResponseBodyScriptsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListScriptsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        scripts: ListScriptsResponseBodyScripts = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.scripts = scripts
        self.success = success

    def validate(self):
        if self.scripts:
            self.scripts.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scripts is not None:
            result['Scripts'] = self.scripts.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scripts') is not None:
            temp_model = ListScriptsResponseBodyScripts()
            self.scripts = temp_model.from_map(m['Scripts'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScriptsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListScriptsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListScriptsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[ListTagResourcesRequestTag] = None,
    ):
        self.next_token = next_token
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        next_token: str = None,
        request_id: str = None,
        success: bool = None,
        tag_resources: List[ListTagResourcesResponseBodyTagResources] = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.next_token = next_token
        self.request_id = request_id
        self.success = success
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = ListTagResourcesResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListTagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ListTagsResponseBodyTagGroups(TeaModel):
    def __init__(
        self,
        script_id: str = None,
        tag_group: str = None,
        tag_group_id: str = None,
        tag_group_index: int = None,
    ):
        self.script_id = script_id
        self.tag_group = tag_group
        self.tag_group_id = tag_group_id
        self.tag_group_index = tag_group_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_id is not None:
            result['TagGroupId'] = self.tag_group_id
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupId') is not None:
            self.tag_group_id = m.get('TagGroupId')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class ListTagsResponseBodyTags(TeaModel):
    def __init__(
        self,
        script_id: str = None,
        tag_group: str = None,
        tag_id: str = None,
        tag_index: int = None,
        tag_name: str = None,
    ):
        self.script_id = script_id
        self.tag_group = tag_group
        self.tag_id = tag_id
        self.tag_index = tag_index
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        if self.tag_index is not None:
            result['TagIndex'] = self.tag_index
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        if m.get('TagIndex') is not None:
            self.tag_index = m.get('TagIndex')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class ListTagsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        tag_groups: List[ListTagsResponseBodyTagGroups] = None,
        tags: List[ListTagsResponseBodyTags] = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.tag_groups = tag_groups
        self.tags = tags

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = ListTagsResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = ListTagsResponseBodyTags()
                self.tags.append(temp_model.from_map(k))
        return self


class ListTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListTagsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyAgentProfileRequest(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        api_plugin_json: str = None,
        description: str = None,
        faq_category_ids: List[int] = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        variables_json: str = None,
    ):
        # This parameter is required.
        self.agent_profile_id = agent_profile_id
        self.api_plugin_json = api_plugin_json
        self.description = description
        self.faq_category_ids = faq_category_ids
        # This parameter is required.
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.api_plugin_json is not None:
            result['ApiPluginJson'] = self.api_plugin_json
        if self.description is not None:
            result['Description'] = self.description
        if self.faq_category_ids is not None:
            result['FaqCategoryIds'] = self.faq_category_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('ApiPluginJson') is not None:
            self.api_plugin_json = m.get('ApiPluginJson')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FaqCategoryIds') is not None:
            self.faq_category_ids = m.get('FaqCategoryIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class ModifyAgentProfileShrinkRequest(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        api_plugin_json: str = None,
        description: str = None,
        faq_category_ids_shrink: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        variables_json: str = None,
    ):
        # This parameter is required.
        self.agent_profile_id = agent_profile_id
        self.api_plugin_json = api_plugin_json
        self.description = description
        self.faq_category_ids_shrink = faq_category_ids_shrink
        # This parameter is required.
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.api_plugin_json is not None:
            result['ApiPluginJson'] = self.api_plugin_json
        if self.description is not None:
            result['Description'] = self.description
        if self.faq_category_ids_shrink is not None:
            result['FaqCategoryIds'] = self.faq_category_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('ApiPluginJson') is not None:
            self.api_plugin_json = m.get('ApiPluginJson')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FaqCategoryIds') is not None:
            self.faq_category_ids_shrink = m.get('FaqCategoryIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class ModifyAgentProfileResponseBodyData(TeaModel):
    def __init__(
        self,
        agent_profile_id: str = None,
        agent_profile_template_id: str = None,
        agent_type: str = None,
        api_plugin_json: str = None,
        create_time: str = None,
        description: str = None,
        instance_id: str = None,
        instruction_json: str = None,
        labels_json: str = None,
        model: str = None,
        model_config: str = None,
        nlu_config_json: str = None,
        prompt: str = None,
        prompt_json: str = None,
        scenario: str = None,
        script_id: str = None,
        system: bool = None,
        update_time: str = None,
        variables_json: str = None,
    ):
        self.agent_profile_id = agent_profile_id
        # agent template id
        self.agent_profile_template_id = agent_profile_template_id
        # agent type
        self.agent_type = agent_type
        self.api_plugin_json = api_plugin_json
        self.create_time = create_time
        self.description = description
        self.instance_id = instance_id
        self.instruction_json = instruction_json
        self.labels_json = labels_json
        self.model = model
        self.model_config = model_config
        self.nlu_config_json = nlu_config_json
        self.prompt = prompt
        self.prompt_json = prompt_json
        self.scenario = scenario
        self.script_id = script_id
        self.system = system
        self.update_time = update_time
        self.variables_json = variables_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_profile_id is not None:
            result['AgentProfileId'] = self.agent_profile_id
        if self.agent_profile_template_id is not None:
            result['AgentProfileTemplateId'] = self.agent_profile_template_id
        if self.agent_type is not None:
            result['AgentType'] = self.agent_type
        if self.api_plugin_json is not None:
            result['ApiPluginJson'] = self.api_plugin_json
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instruction_json is not None:
            result['InstructionJson'] = self.instruction_json
        if self.labels_json is not None:
            result['LabelsJson'] = self.labels_json
        if self.model is not None:
            result['Model'] = self.model
        if self.model_config is not None:
            result['ModelConfig'] = self.model_config
        if self.nlu_config_json is not None:
            result['NluConfigJson'] = self.nlu_config_json
        if self.prompt is not None:
            result['Prompt'] = self.prompt
        if self.prompt_json is not None:
            result['PromptJson'] = self.prompt_json
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.system is not None:
            result['System'] = self.system
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variables_json is not None:
            result['VariablesJson'] = self.variables_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentProfileId') is not None:
            self.agent_profile_id = m.get('AgentProfileId')
        if m.get('AgentProfileTemplateId') is not None:
            self.agent_profile_template_id = m.get('AgentProfileTemplateId')
        if m.get('AgentType') is not None:
            self.agent_type = m.get('AgentType')
        if m.get('ApiPluginJson') is not None:
            self.api_plugin_json = m.get('ApiPluginJson')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstructionJson') is not None:
            self.instruction_json = m.get('InstructionJson')
        if m.get('LabelsJson') is not None:
            self.labels_json = m.get('LabelsJson')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelConfig') is not None:
            self.model_config = m.get('ModelConfig')
        if m.get('NluConfigJson') is not None:
            self.nlu_config_json = m.get('NluConfigJson')
        if m.get('Prompt') is not None:
            self.prompt = m.get('Prompt')
        if m.get('PromptJson') is not None:
            self.prompt_json = m.get('PromptJson')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('System') is not None:
            self.system = m.get('System')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariablesJson') is not None:
            self.variables_json = m.get('VariablesJson')
        return self


class ModifyAgentProfileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ModifyAgentProfileResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ModifyAgentProfileResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyAgentProfileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyAgentProfileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyAgentProfileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyAnnotationMissionRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_id: str = None,
        annotation_mission_name: str = None,
        annotation_status: int = None,
        delete: bool = None,
    ):
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_name = annotation_mission_name
        self.annotation_status = annotation_status
        self.delete = delete

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_name is not None:
            result['AnnotationMissionName'] = self.annotation_mission_name
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.delete is not None:
            result['Delete'] = self.delete
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionName') is not None:
            self.annotation_mission_name = m.get('AnnotationMissionName')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        return self


class ModifyAnnotationMissionResponseBodyData(TeaModel):
    def __init__(
        self,
        message: str = None,
        success: bool = None,
    ):
        self.message = message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyAnnotationMissionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: ModifyAnnotationMissionResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = ModifyAnnotationMissionResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyAnnotationMissionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyAnnotationMissionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyAnnotationMissionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyBatchJobsRequest(TeaModel):
    def __init__(
        self,
        batch_job_name: str = None,
        calling_number: List[str] = None,
        description: str = None,
        instance_id: str = None,
        job_file_path: str = None,
        job_group_id: str = None,
        scenario_id: str = None,
        script_id: str = None,
        strategy_json: str = None,
        submitted: bool = None,
    ):
        # This parameter is required.
        self.batch_job_name = batch_job_name
        self.calling_number = calling_number
        self.description = description
        # This parameter is required.
        self.instance_id = instance_id
        self.job_file_path = job_file_path
        # This parameter is required.
        self.job_group_id = job_group_id
        self.scenario_id = scenario_id
        self.script_id = script_id
        self.strategy_json = strategy_json
        # This parameter is required.
        self.submitted = submitted

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.batch_job_name is not None:
            result['BatchJobName'] = self.batch_job_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BatchJobName') is not None:
            self.batch_job_name = m.get('BatchJobName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        return self


class ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ModifyBatchJobsResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        customized: str = None,
        end_time: int = None,
        follow_up_strategy: str = None,
        is_template: bool = None,
        max_attempts_per_day: int = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        start_time: int = None,
        strategy_description: str = None,
        strategy_id: str = None,
        strategy_name: str = None,
        type: str = None,
        working_time: List[ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime] = None,
    ):
        self.customized = customized
        self.end_time = end_time
        self.follow_up_strategy = follow_up_strategy
        self.is_template = is_template
        self.max_attempts_per_day = max_attempts_per_day
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.start_time = start_time
        self.strategy_description = strategy_description
        self.strategy_id = strategy_id
        self.strategy_name = strategy_name
        self.type = type
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyBatchJobsResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ModifyBatchJobsResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        creation_time: int = None,
        job_file_path: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        scenario_id: str = None,
        strategy: ModifyBatchJobsResponseBodyJobGroupStrategy = None,
    ):
        self.calling_numbers = calling_numbers
        self.creation_time = creation_time
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.scenario_id = scenario_id
        self.strategy = strategy

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = ModifyBatchJobsResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class ModifyBatchJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group: ModifyBatchJobsResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = ModifyBatchJobsResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyBatchJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyBatchJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyBeebotIntentRequestIntentDefinition(TeaModel):
    def __init__(
        self,
        alias_name: str = None,
        intent_name: str = None,
    ):
        self.alias_name = alias_name
        # This parameter is required.
        self.intent_name = intent_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alias_name is not None:
            result['AliasName'] = self.alias_name
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliasName') is not None:
            self.alias_name = m.get('AliasName')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        return self


class ModifyBeebotIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_definition: ModifyBeebotIntentRequestIntentDefinition = None,
        intent_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_definition = intent_definition
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        if self.intent_definition:
            self.intent_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_definition is not None:
            result['IntentDefinition'] = self.intent_definition.to_map()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDefinition') is not None:
            temp_model = ModifyBeebotIntentRequestIntentDefinition()
            self.intent_definition = temp_model.from_map(m['IntentDefinition'])
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyBeebotIntentShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_definition_shrink: str = None,
        intent_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.intent_definition_shrink = intent_definition_shrink
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_definition_shrink is not None:
            result['IntentDefinition'] = self.intent_definition_shrink
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDefinition') is not None:
            self.intent_definition_shrink = m.get('IntentDefinition')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyBeebotIntentResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        intent_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyBeebotIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyBeebotIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyBeebotIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyBeebotIntentLgfRequestLgfDefinition(TeaModel):
    def __init__(
        self,
        intent_id: int = None,
        rule_text: str = None,
    ):
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.rule_text = rule_text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.rule_text is not None:
            result['RuleText'] = self.rule_text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('RuleText') is not None:
            self.rule_text = m.get('RuleText')
        return self


class ModifyBeebotIntentLgfRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        lgf_definition: ModifyBeebotIntentLgfRequestLgfDefinition = None,
        lgf_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.lgf_definition = lgf_definition
        # This parameter is required.
        self.lgf_id = lgf_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        if self.lgf_definition:
            self.lgf_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.lgf_definition is not None:
            result['LgfDefinition'] = self.lgf_definition.to_map()
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LgfDefinition') is not None:
            temp_model = ModifyBeebotIntentLgfRequestLgfDefinition()
            self.lgf_definition = temp_model.from_map(m['LgfDefinition'])
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyBeebotIntentLgfShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        lgf_definition_shrink: str = None,
        lgf_id: int = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.lgf_definition_shrink = lgf_definition_shrink
        # This parameter is required.
        self.lgf_id = lgf_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.lgf_definition_shrink is not None:
            result['LgfDefinition'] = self.lgf_definition_shrink
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LgfDefinition') is not None:
            self.lgf_definition_shrink = m.get('LgfDefinition')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyBeebotIntentLgfResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        lgf_id: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.lgf_id = lgf_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.lgf_id is not None:
            result['LgfId'] = self.lgf_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('LgfId') is not None:
            self.lgf_id = m.get('LgfId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyBeebotIntentLgfResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyBeebotIntentLgfResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyBeebotIntentLgfResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyBeebotIntentUserSayRequestUserSayDefinition(TeaModel):
    def __init__(
        self,
        content: str = None,
        intent_id: int = None,
    ):
        # This parameter is required.
        self.content = content
        # This parameter is required.
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class ModifyBeebotIntentUserSayRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        user_say_definition: ModifyBeebotIntentUserSayRequestUserSayDefinition = None,
        user_say_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.user_say_definition = user_say_definition
        # This parameter is required.
        self.user_say_id = user_say_id

    def validate(self):
        if self.user_say_definition:
            self.user_say_definition.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_say_definition is not None:
            result['UserSayDefinition'] = self.user_say_definition.to_map()
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserSayDefinition') is not None:
            temp_model = ModifyBeebotIntentUserSayRequestUserSayDefinition()
            self.user_say_definition = temp_model.from_map(m['UserSayDefinition'])
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class ModifyBeebotIntentUserSayShrinkRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        user_say_definition_shrink: str = None,
        user_say_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.user_say_definition_shrink = user_say_definition_shrink
        # This parameter is required.
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.user_say_definition_shrink is not None:
            result['UserSayDefinition'] = self.user_say_definition_shrink
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('UserSayDefinition') is not None:
            self.user_say_definition_shrink = m.get('UserSayDefinition')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class ModifyBeebotIntentUserSayResponseBody(TeaModel):
    def __init__(
        self,
        beebot_request_id: str = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        user_say_id: int = None,
    ):
        self.beebot_request_id = beebot_request_id
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.user_say_id = user_say_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.beebot_request_id is not None:
            result['BeebotRequestId'] = self.beebot_request_id
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.user_say_id is not None:
            result['UserSayId'] = self.user_say_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeebotRequestId') is not None:
            self.beebot_request_id = m.get('BeebotRequestId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('UserSayId') is not None:
            self.user_say_id = m.get('UserSayId')
        return self


class ModifyBeebotIntentUserSayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyBeebotIntentUserSayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyBeebotIntentUserSayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyDialogueFlowRequest(TeaModel):
    def __init__(
        self,
        dialogue_flow_definition: str = None,
        dialogue_flow_id: str = None,
        instance_id: str = None,
        is_drafted: bool = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.dialogue_flow_definition = dialogue_flow_definition
        # This parameter is required.
        self.dialogue_flow_id = dialogue_flow_id
        # This parameter is required.
        self.instance_id = instance_id
        self.is_drafted = is_drafted
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyDialogueFlowResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dialogue_flow_definition: str = None,
        dialogue_flow_id: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.dialogue_flow_definition = dialogue_flow_definition
        self.dialogue_flow_id = dialogue_flow_id
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_flow_definition is not None:
            result['DialogueFlowDefinition'] = self.dialogue_flow_definition
        if self.dialogue_flow_id is not None:
            result['DialogueFlowId'] = self.dialogue_flow_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueFlowDefinition') is not None:
            self.dialogue_flow_definition = m.get('DialogueFlowDefinition')
        if m.get('DialogueFlowId') is not None:
            self.dialogue_flow_id = m.get('DialogueFlowId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyDialogueFlowResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyDialogueFlowResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyDialogueFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyEmptyNumberNoMoreCallsInfoRequest(TeaModel):
    def __init__(
        self,
        empty_number_no_more_calls: bool = None,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        self.empty_number_no_more_calls = empty_number_no_more_calls
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_no_more_calls is not None:
            result['EmptyNumberNoMoreCalls'] = self.empty_number_no_more_calls
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EmptyNumberNoMoreCalls') is not None:
            self.empty_number_no_more_calls = m.get('EmptyNumberNoMoreCalls')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class ModifyEmptyNumberNoMoreCallsInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyEmptyNumberNoMoreCallsInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyEmptyNumberNoMoreCallsInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyEmptyNumberNoMoreCallsInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyGlobalQuestionRequest(TeaModel):
    def __init__(
        self,
        answers: str = None,
        global_question_id: str = None,
        global_question_name: str = None,
        global_question_type: str = None,
        instance_id: str = None,
        questions: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.answers = answers
        # This parameter is required.
        self.global_question_id = global_question_id
        # This parameter is required.
        self.global_question_name = global_question_name
        # This parameter is required.
        self.global_question_type = global_question_type
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.questions = questions
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.answers is not None:
            result['Answers'] = self.answers
        if self.global_question_id is not None:
            result['GlobalQuestionId'] = self.global_question_id
        if self.global_question_name is not None:
            result['GlobalQuestionName'] = self.global_question_name
        if self.global_question_type is not None:
            result['GlobalQuestionType'] = self.global_question_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.questions is not None:
            result['Questions'] = self.questions
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Answers') is not None:
            self.answers = m.get('Answers')
        if m.get('GlobalQuestionId') is not None:
            self.global_question_id = m.get('GlobalQuestionId')
        if m.get('GlobalQuestionName') is not None:
            self.global_question_name = m.get('GlobalQuestionName')
        if m.get('GlobalQuestionType') is not None:
            self.global_question_type = m.get('GlobalQuestionType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Questions') is not None:
            self.questions = m.get('Questions')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class ModifyGlobalQuestionResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        dialogue_question_id: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.dialogue_question_id = dialogue_question_id
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.dialogue_question_id is not None:
            result['DialogueQuestionId'] = self.dialogue_question_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('DialogueQuestionId') is not None:
            self.dialogue_question_id = m.get('DialogueQuestionId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyGlobalQuestionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyGlobalQuestionResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyGlobalQuestionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyInstanceRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        instance_description: str = None,
        instance_id: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
    ):
        self.calling_number = calling_number
        self.instance_description = instance_description
        # This parameter is required.
        self.instance_id = instance_id
        self.instance_name = instance_name
        # This parameter is required.
        self.max_concurrent_conversation = max_concurrent_conversation

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        return self


class ModifyInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        creator_id: int = None,
        creator_name: str = None,
        instance_description: str = None,
        instance_id: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        owner_name: str = None,
    ):
        self.creation_time = creation_time
        self.creator_id = creator_id
        self.creator_name = creator_name
        self.instance_description = instance_description
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.max_concurrent_conversation = max_concurrent_conversation
        self.owner_name = owner_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.creator_id is not None:
            result['CreatorId'] = self.creator_id
        if self.creator_name is not None:
            result['CreatorName'] = self.creator_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.owner_name is not None:
            result['OwnerName'] = self.owner_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CreatorId') is not None:
            self.creator_id = m.get('CreatorId')
        if m.get('CreatorName') is not None:
            self.creator_name = m.get('CreatorName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('OwnerName') is not None:
            self.owner_name = m.get('OwnerName')
        return self


class ModifyInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        instance: ModifyInstanceResponseBodyInstance = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.instance = instance
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Instance') is not None:
            temp_model = ModifyInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyIntentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        intent_description: str = None,
        intent_id: str = None,
        intent_name: str = None,
        keywords: str = None,
        script_id: str = None,
        utterances: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.intent_description = intent_description
        # This parameter is required.
        self.intent_id = intent_id
        # This parameter is required.
        self.intent_name = intent_name
        self.keywords = keywords
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.utterances = utterances

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_description is not None:
            result['IntentDescription'] = self.intent_description
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.intent_name is not None:
            result['IntentName'] = self.intent_name
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.utterances is not None:
            result['Utterances'] = self.utterances
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentDescription') is not None:
            self.intent_description = m.get('IntentDescription')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('IntentName') is not None:
            self.intent_name = m.get('IntentName')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Utterances') is not None:
            self.utterances = m.get('Utterances')
        return self


class ModifyIntentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        intent_id: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.intent_id = intent_id
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyIntentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyIntentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyIntentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyJobGroupRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        description: str = None,
        flash_sms_extras: str = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_group_status: str = None,
        min_concurrency: int = None,
        name: str = None,
        priority: str = None,
        recall_calling_number: List[str] = None,
        recall_strategy_json: str = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        script_id: str = None,
        strategy_json: str = None,
    ):
        self.calling_number = calling_number
        self.description = description
        self.flash_sms_extras = flash_sms_extras
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id
        self.job_group_status = job_group_status
        self.min_concurrency = min_concurrency
        # This parameter is required.
        self.name = name
        self.priority = priority
        self.recall_calling_number = recall_calling_number
        self.recall_strategy_json = recall_strategy_json
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.script_id = script_id
        self.strategy_json = strategy_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.description is not None:
            result['Description'] = self.description
        if self.flash_sms_extras is not None:
            result['FlashSmsExtras'] = self.flash_sms_extras
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_status is not None:
            result['JobGroupStatus'] = self.job_group_status
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.name is not None:
            result['Name'] = self.name
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_calling_number is not None:
            result['RecallCallingNumber'] = self.recall_calling_number
        if self.recall_strategy_json is not None:
            result['RecallStrategyJson'] = self.recall_strategy_json
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FlashSmsExtras') is not None:
            self.flash_sms_extras = m.get('FlashSmsExtras')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupStatus') is not None:
            self.job_group_status = m.get('JobGroupStatus')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallCallingNumber') is not None:
            self.recall_calling_number = m.get('RecallCallingNumber')
        if m.get('RecallStrategyJson') is not None:
            self.recall_strategy_json = m.get('RecallStrategyJson')
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        return self


class ModifyJobGroupResponseBodyJobGroupExportProgress(TeaModel):
    def __init__(
        self,
        file_http_url: str = None,
        progress: str = None,
        status: str = None,
    ):
        self.file_http_url = file_http_url
        self.progress = progress
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_http_url is not None:
            result['FileHttpUrl'] = self.file_http_url
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileHttpUrl') is not None:
            self.file_http_url = m.get('FileHttpUrl')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ModifyJobGroupResponseBodyJobGroupRecallStrategy(TeaModel):
    def __init__(
        self,
        empty_number_ignore: bool = None,
        in_arrears_ignore: bool = None,
        out_of_service_ignore: bool = None,
    ):
        self.empty_number_ignore = empty_number_ignore
        self.in_arrears_ignore = in_arrears_ignore
        self.out_of_service_ignore = out_of_service_ignore

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.empty_number_ignore is not None:
            result['EmptyNumberIgnore'] = self.empty_number_ignore
        if self.in_arrears_ignore is not None:
            result['InArrearsIgnore'] = self.in_arrears_ignore
        if self.out_of_service_ignore is not None:
            result['OutOfServiceIgnore'] = self.out_of_service_ignore
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EmptyNumberIgnore') is not None:
            self.empty_number_ignore = m.get('EmptyNumberIgnore')
        if m.get('InArrearsIgnore') is not None:
            self.in_arrears_ignore = m.get('InArrearsIgnore')
        if m.get('OutOfServiceIgnore') is not None:
            self.out_of_service_ignore = m.get('OutOfServiceIgnore')
        return self


class ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        begin_time: str = None,
        end_time: str = None,
    ):
        self.begin_time = begin_time
        self.end_time = end_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        return self


class ModifyJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        customized: str = None,
        end_time: int = None,
        follow_up_strategy: str = None,
        is_template: bool = None,
        max_attempts_per_day: int = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        start_time: int = None,
        strategy_description: str = None,
        strategy_id: str = None,
        strategy_name: str = None,
        type: str = None,
        working_time: List[ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime] = None,
    ):
        self.customized = customized
        self.end_time = end_time
        self.follow_up_strategy = follow_up_strategy
        self.is_template = is_template
        self.max_attempts_per_day = max_attempts_per_day
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.start_time = start_time
        self.strategy_description = strategy_description
        self.strategy_id = strategy_id
        self.strategy_name = strategy_name
        self.type = type
        self.working_time = working_time

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.type is not None:
            result['Type'] = self.type
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        return self


class ModifyJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        creation_time: int = None,
        export_progress: ModifyJobGroupResponseBodyJobGroupExportProgress = None,
        flash_sms_extras: str = None,
        job_data_parsing_task_id: str = None,
        job_file_path: str = None,
        job_group_description: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        min_concurrency: int = None,
        modify_time: str = None,
        priority: str = None,
        recall_strategy: ModifyJobGroupResponseBodyJobGroupRecallStrategy = None,
        ringing_duration: int = None,
        scenario_id: str = None,
        script_name: str = None,
        script_version: str = None,
        status: str = None,
        strategy: ModifyJobGroupResponseBodyJobGroupStrategy = None,
    ):
        self.calling_numbers = calling_numbers
        self.creation_time = creation_time
        self.export_progress = export_progress
        self.flash_sms_extras = flash_sms_extras
        self.job_data_parsing_task_id = job_data_parsing_task_id
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.min_concurrency = min_concurrency
        self.modify_time = modify_time
        self.priority = priority
        self.recall_strategy = recall_strategy
        self.ringing_duration = ringing_duration
        self.scenario_id = scenario_id
        self.script_name = script_name
        self.script_version = script_version
        self.status = status
        self.strategy = strategy

    def validate(self):
        if self.export_progress:
            self.export_progress.validate()
        if self.recall_strategy:
            self.recall_strategy.validate()
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.export_progress is not None:
            result['ExportProgress'] = self.export_progress.to_map()
        if self.flash_sms_extras is not None:
            result['FlashSmsExtras'] = self.flash_sms_extras
        if self.job_data_parsing_task_id is not None:
            result['JobDataParsingTaskId'] = self.job_data_parsing_task_id
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.min_concurrency is not None:
            result['MinConcurrency'] = self.min_concurrency
        if self.modify_time is not None:
            result['ModifyTime'] = self.modify_time
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.recall_strategy is not None:
            result['RecallStrategy'] = self.recall_strategy.to_map()
        if self.ringing_duration is not None:
            result['RingingDuration'] = self.ringing_duration
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('ExportProgress') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupExportProgress()
            self.export_progress = temp_model.from_map(m['ExportProgress'])
        if m.get('FlashSmsExtras') is not None:
            self.flash_sms_extras = m.get('FlashSmsExtras')
        if m.get('JobDataParsingTaskId') is not None:
            self.job_data_parsing_task_id = m.get('JobDataParsingTaskId')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('MinConcurrency') is not None:
            self.min_concurrency = m.get('MinConcurrency')
        if m.get('ModifyTime') is not None:
            self.modify_time = m.get('ModifyTime')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('RecallStrategy') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupRecallStrategy()
            self.recall_strategy = temp_model.from_map(m['RecallStrategy'])
        if m.get('RingingDuration') is not None:
            self.ringing_duration = m.get('RingingDuration')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Strategy') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        return self


class ModifyJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        job_group: ModifyJobGroupResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('JobGroup') is not None:
            temp_model = ModifyJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyOutboundCallNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        number: str = None,
        outbound_call_number_id: str = None,
        rate_limit_count: int = None,
        rate_limit_period: int = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.number = number
        # This parameter is required.
        self.outbound_call_number_id = outbound_call_number_id
        # This parameter is required.
        self.rate_limit_count = rate_limit_count
        # This parameter is required.
        self.rate_limit_period = rate_limit_period

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ModifyOutboundCallNumberResponseBodyOutboundCallNumber(TeaModel):
    def __init__(
        self,
        number: str = None,
        outbound_call_number_id: str = None,
        rate_limit_count: str = None,
        rate_limit_period: str = None,
    ):
        self.number = number
        self.outbound_call_number_id = outbound_call_number_id
        self.rate_limit_count = rate_limit_count
        self.rate_limit_period = rate_limit_period

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.outbound_call_number_id is not None:
            result['OutboundCallNumberId'] = self.outbound_call_number_id
        if self.rate_limit_count is not None:
            result['RateLimitCount'] = self.rate_limit_count
        if self.rate_limit_period is not None:
            result['RateLimitPeriod'] = self.rate_limit_period
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('OutboundCallNumberId') is not None:
            self.outbound_call_number_id = m.get('OutboundCallNumberId')
        if m.get('RateLimitCount') is not None:
            self.rate_limit_count = m.get('RateLimitCount')
        if m.get('RateLimitPeriod') is not None:
            self.rate_limit_period = m.get('RateLimitPeriod')
        return self


class ModifyOutboundCallNumberResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        outbound_call_number: ModifyOutboundCallNumberResponseBodyOutboundCallNumber = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.outbound_call_number = outbound_call_number
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.outbound_call_number:
            self.outbound_call_number.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.outbound_call_number is not None:
            result['OutboundCallNumber'] = self.outbound_call_number.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('OutboundCallNumber') is not None:
            temp_model = ModifyOutboundCallNumberResponseBodyOutboundCallNumber()
            self.outbound_call_number = temp_model.from_map(m['OutboundCallNumber'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyOutboundCallNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyOutboundCallNumberResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyOutboundCallNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScriptRequest(TeaModel):
    def __init__(
        self,
        agent_id: int = None,
        agent_key: str = None,
        agent_llm: bool = None,
        asr_config: str = None,
        chat_config: str = None,
        chatbot_id: str = None,
        emotion_enable: bool = None,
        industry: str = None,
        instance_id: str = None,
        label_config: str = None,
        long_wait_enable: bool = None,
        mini_playback_config_list_json_string: str = None,
        mini_playback_enable: bool = None,
        new_barge_in_enable: bool = None,
        nls_config: str = None,
        nlu_access_type: str = None,
        nlu_engine: str = None,
        scene: str = None,
        script_content: List[str] = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        script_waveform: List[str] = None,
        tts_config: str = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.agent_llm = agent_llm
        self.asr_config = asr_config
        self.chat_config = chat_config
        self.chatbot_id = chatbot_id
        self.emotion_enable = emotion_enable
        # This parameter is required.
        self.industry = industry
        # This parameter is required.
        self.instance_id = instance_id
        self.label_config = label_config
        self.long_wait_enable = long_wait_enable
        self.mini_playback_config_list_json_string = mini_playback_config_list_json_string
        self.mini_playback_enable = mini_playback_enable
        self.new_barge_in_enable = new_barge_in_enable
        self.nls_config = nls_config
        self.nlu_access_type = nlu_access_type
        self.nlu_engine = nlu_engine
        # This parameter is required.
        self.scene = scene
        self.script_content = script_content
        self.script_description = script_description
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.script_name = script_name
        self.script_waveform = script_waveform
        self.tts_config = tts_config

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.agent_llm is not None:
            result['AgentLlm'] = self.agent_llm
        if self.asr_config is not None:
            result['AsrConfig'] = self.asr_config
        if self.chat_config is not None:
            result['ChatConfig'] = self.chat_config
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.emotion_enable is not None:
            result['EmotionEnable'] = self.emotion_enable
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.label_config is not None:
            result['LabelConfig'] = self.label_config
        if self.long_wait_enable is not None:
            result['LongWaitEnable'] = self.long_wait_enable
        if self.mini_playback_config_list_json_string is not None:
            result['MiniPlaybackConfigListJsonString'] = self.mini_playback_config_list_json_string
        if self.mini_playback_enable is not None:
            result['MiniPlaybackEnable'] = self.mini_playback_enable
        if self.new_barge_in_enable is not None:
            result['NewBargeInEnable'] = self.new_barge_in_enable
        if self.nls_config is not None:
            result['NlsConfig'] = self.nls_config
        if self.nlu_access_type is not None:
            result['NluAccessType'] = self.nlu_access_type
        if self.nlu_engine is not None:
            result['NluEngine'] = self.nlu_engine
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.script_waveform is not None:
            result['ScriptWaveform'] = self.script_waveform
        if self.tts_config is not None:
            result['TtsConfig'] = self.tts_config
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AgentLlm') is not None:
            self.agent_llm = m.get('AgentLlm')
        if m.get('AsrConfig') is not None:
            self.asr_config = m.get('AsrConfig')
        if m.get('ChatConfig') is not None:
            self.chat_config = m.get('ChatConfig')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('EmotionEnable') is not None:
            self.emotion_enable = m.get('EmotionEnable')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LabelConfig') is not None:
            self.label_config = m.get('LabelConfig')
        if m.get('LongWaitEnable') is not None:
            self.long_wait_enable = m.get('LongWaitEnable')
        if m.get('MiniPlaybackConfigListJsonString') is not None:
            self.mini_playback_config_list_json_string = m.get('MiniPlaybackConfigListJsonString')
        if m.get('MiniPlaybackEnable') is not None:
            self.mini_playback_enable = m.get('MiniPlaybackEnable')
        if m.get('NewBargeInEnable') is not None:
            self.new_barge_in_enable = m.get('NewBargeInEnable')
        if m.get('NlsConfig') is not None:
            self.nls_config = m.get('NlsConfig')
        if m.get('NluAccessType') is not None:
            self.nlu_access_type = m.get('NluAccessType')
        if m.get('NluEngine') is not None:
            self.nlu_engine = m.get('NluEngine')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('ScriptWaveform') is not None:
            self.script_waveform = m.get('ScriptWaveform')
        if m.get('TtsConfig') is not None:
            self.tts_config = m.get('TtsConfig')
        return self


class ModifyScriptResponseBodyScript(TeaModel):
    def __init__(
        self,
        debug_status: str = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        update_time: int = None,
    ):
        self.debug_status = debug_status
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ModifyScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script: ModifyScriptResponseBodyScript = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script = script
        self.success = success

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = ModifyScriptResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScriptVoiceConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        script_voice_config_id: str = None,
        script_waveform_relation: str = None,
        type: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.script_voice_config_id = script_voice_config_id
        self.script_waveform_relation = script_waveform_relation
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_content: str = None,
        script_id: str = None,
        script_voice_config_id: str = None,
        script_waveform_relation: str = None,
        source: str = None,
        type: str = None,
    ):
        self.instance_id = instance_id
        self.script_content = script_content
        self.script_id = script_id
        self.script_voice_config_id = script_voice_config_id
        self.script_waveform_relation = script_waveform_relation
        self.source = source
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_voice_config_id is not None:
            result['ScriptVoiceConfigId'] = self.script_voice_config_id
        if self.script_waveform_relation is not None:
            result['ScriptWaveformRelation'] = self.script_waveform_relation
        if self.source is not None:
            result['Source'] = self.source
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVoiceConfigId') is not None:
            self.script_voice_config_id = m.get('ScriptVoiceConfigId')
        if m.get('ScriptWaveformRelation') is not None:
            self.script_waveform_relation = m.get('ScriptWaveformRelation')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ModifyScriptVoiceConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_voice_config: ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_voice_config = script_voice_config
        self.success = success

    def validate(self):
        if self.script_voice_config:
            self.script_voice_config.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script_voice_config is not None:
            result['ScriptVoiceConfig'] = self.script_voice_config.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScriptVoiceConfig') is not None:
            temp_model = ModifyScriptVoiceConfigResponseBodyScriptVoiceConfig()
            self.script_voice_config = temp_model.from_map(m['ScriptVoiceConfig'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyScriptVoiceConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyScriptVoiceConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyScriptVoiceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTTSConfigRequest(TeaModel):
    def __init__(
        self,
        app_key: str = None,
        instance_id: str = None,
        nls_service_type: str = None,
        pitch_rate: str = None,
        script_id: str = None,
        speech_rate: str = None,
        voice: str = None,
        volume: str = None,
    ):
        self.app_key = app_key
        # This parameter is required.
        self.instance_id = instance_id
        self.nls_service_type = nls_service_type
        # 语调 [-500,500]之间整数。默认值为0。
        # 
        # 大于0表示升高音高。
        # 
        # 小于0表示降低音高。
        self.pitch_rate = pitch_rate
        # This parameter is required.
        self.script_id = script_id
        self.speech_rate = speech_rate
        self.voice = voice
        self.volume = volume

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nls_service_type is not None:
            result['NlsServiceType'] = self.nls_service_type
        if self.pitch_rate is not None:
            result['PitchRate'] = self.pitch_rate
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NlsServiceType') is not None:
            self.nls_service_type = m.get('NlsServiceType')
        if m.get('PitchRate') is not None:
            self.pitch_rate = m.get('PitchRate')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class ModifyTTSConfigResponseBodyTTSConfig(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        pitch_rate: str = None,
        script_id: str = None,
        speech_rate: str = None,
        ttsconfig_id: str = None,
        voice: str = None,
        volume: str = None,
    ):
        self.instance_id = instance_id
        # 语调
        # [-500,500]之间整数。默认值为0。
        # 
        # 大于0表示升高音高。
        # 
        # 小于0表示降低音高。
        self.pitch_rate = pitch_rate
        self.script_id = script_id
        self.speech_rate = speech_rate
        self.ttsconfig_id = ttsconfig_id
        self.voice = voice
        self.volume = volume

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.pitch_rate is not None:
            result['PitchRate'] = self.pitch_rate
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.speech_rate is not None:
            result['SpeechRate'] = self.speech_rate
        if self.ttsconfig_id is not None:
            result['TTSConfigId'] = self.ttsconfig_id
        if self.voice is not None:
            result['Voice'] = self.voice
        if self.volume is not None:
            result['Volume'] = self.volume
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PitchRate') is not None:
            self.pitch_rate = m.get('PitchRate')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SpeechRate') is not None:
            self.speech_rate = m.get('SpeechRate')
        if m.get('TTSConfigId') is not None:
            self.ttsconfig_id = m.get('TTSConfigId')
        if m.get('Voice') is not None:
            self.voice = m.get('Voice')
        if m.get('Volume') is not None:
            self.volume = m.get('Volume')
        return self


class ModifyTTSConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        ttsconfig: ModifyTTSConfigResponseBodyTTSConfig = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.ttsconfig = ttsconfig

    def validate(self):
        if self.ttsconfig:
            self.ttsconfig.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.ttsconfig is not None:
            result['TTSConfig'] = self.ttsconfig.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TTSConfig') is not None:
            temp_model = ModifyTTSConfigResponseBodyTTSConfig()
            self.ttsconfig = temp_model.from_map(m['TTSConfig'])
        return self


class ModifyTTSConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyTTSConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTTSConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyTagGroupsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
        tag_groups: str = None,
        tags: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id
        # This parameter is required.
        self.tag_groups = tag_groups
        # This parameter is required.
        self.tags = tags

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_groups is not None:
            result['TagGroups'] = self.tag_groups
        if self.tags is not None:
            result['Tags'] = self.tags
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroups') is not None:
            self.tag_groups = m.get('TagGroups')
        if m.get('Tags') is not None:
            self.tags = m.get('Tags')
        return self


class ModifyTagGroupsResponseBodyTagGroups(TeaModel):
    def __init__(
        self,
        script_id: str = None,
        tag_group: str = None,
        tag_group_id: str = None,
        tag_group_index: int = None,
    ):
        self.script_id = script_id
        self.tag_group = tag_group
        self.tag_group_id = tag_group_id
        self.tag_group_index = tag_group_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_group_id is not None:
            result['TagGroupId'] = self.tag_group_id
        if self.tag_group_index is not None:
            result['TagGroupIndex'] = self.tag_group_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagGroupId') is not None:
            self.tag_group_id = m.get('TagGroupId')
        if m.get('TagGroupIndex') is not None:
            self.tag_group_index = m.get('TagGroupIndex')
        return self


class ModifyTagGroupsResponseBodyTags(TeaModel):
    def __init__(
        self,
        script_id: str = None,
        tag_group: str = None,
        tag_id: str = None,
        tag_index: int = None,
        tag_name: str = None,
    ):
        self.script_id = script_id
        self.tag_group = tag_group
        self.tag_id = tag_id
        self.tag_index = tag_index
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_id is not None:
            result['TagId'] = self.tag_id
        if self.tag_index is not None:
            result['TagIndex'] = self.tag_index
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagId') is not None:
            self.tag_id = m.get('TagId')
        if m.get('TagIndex') is not None:
            self.tag_index = m.get('TagIndex')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class ModifyTagGroupsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        tag_groups: List[ModifyTagGroupsResponseBodyTagGroups] = None,
        tags: List[ModifyTagGroupsResponseBodyTags] = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.tag_groups = tag_groups
        self.tags = tags

    def validate(self):
        if self.tag_groups:
            for k in self.tag_groups:
                if k:
                    k.validate()
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TagGroups'] = []
        if self.tag_groups is not None:
            for k in self.tag_groups:
                result['TagGroups'].append(k.to_map() if k else None)
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.tag_groups = []
        if m.get('TagGroups') is not None:
            for k in m.get('TagGroups'):
                temp_model = ModifyTagGroupsResponseBodyTagGroups()
                self.tag_groups.append(temp_model.from_map(k))
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = ModifyTagGroupsResponseBodyTags()
                self.tags.append(temp_model.from_map(k))
        return self


class ModifyTagGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ModifyTagGroupsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ModifyTagGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishScriptRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.description = description
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class PublishScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: PublishScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PublishScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishScriptForDebugRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class PublishScriptForDebugResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishScriptForDebugResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: PublishScriptForDebugResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = PublishScriptForDebugResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryJobsRequest(TeaModel):
    def __init__(
        self,
        contact_name: str = None,
        end_time: int = None,
        instance_id: str = None,
        job_group_id: str = None,
        page_number: int = None,
        page_size: int = None,
        phone_number: str = None,
        scenario_id: str = None,
        start_time: int = None,
        time_alignment: str = None,
    ):
        self.contact_name = contact_name
        self.end_time = end_time
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        self.phone_number = phone_number
        self.scenario_id = scenario_id
        self.start_time = start_time
        self.time_alignment = time_alignment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.time_alignment is not None:
            result['TimeAlignment'] = self.time_alignment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TimeAlignment') is not None:
            self.time_alignment = m.get('TimeAlignment')
        return self


class QueryJobsResponseBodyJobsListContacts(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsResponseBodyJobsListExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryJobsResponseBodyJobsListSummary(TeaModel):
    def __init__(
        self,
        category: str = None,
        content: str = None,
        conversation_detail_id: str = None,
        group_id: str = None,
        job_id: str = None,
        summary_id: str = None,
        summary_name: str = None,
        task_id: str = None,
    ):
        self.category = category
        self.content = content
        self.conversation_detail_id = conversation_detail_id
        self.group_id = group_id
        self.job_id = job_id
        self.summary_id = summary_id
        self.summary_name = summary_name
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QueryJobsResponseBodyJobsListTagHits(TeaModel):
    def __init__(
        self,
        tag_group: str = None,
        tag_name: str = None,
    ):
        self.tag_group = tag_group
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class QueryJobsResponseBodyJobsListTasksContact(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_name: str = None,
        honorific: str = None,
        job_id: str = None,
        phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        state: str = None,
    ):
        self.contact_id = contact_id
        self.contact_name = contact_name
        self.honorific = honorific
        self.job_id = job_id
        self.phone_number = phone_number
        self.reference_id = reference_id
        self.role = role
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsResponseBodyJobsListTasks(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        brief: str = None,
        call_id: str = None,
        called_number: str = None,
        calling_number: str = None,
        chatbot_id: str = None,
        contact: QueryJobsResponseBodyJobsListTasksContact = None,
        duration: int = None,
        job_id: str = None,
        planed_time: int = None,
        scenario_id: str = None,
        status: str = None,
        task_id: str = None,
    ):
        self.actual_time = actual_time
        self.brief = brief
        self.call_id = call_id
        self.called_number = called_number
        self.calling_number = calling_number
        self.chatbot_id = chatbot_id
        self.contact = contact
        self.duration = duration
        self.job_id = job_id
        self.planed_time = planed_time
        self.scenario_id = scenario_id
        self.status = status
        self.task_id = task_id

    def validate(self):
        if self.contact:
            self.contact.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('Contact') is not None:
            temp_model = QueryJobsResponseBodyJobsListTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QueryJobsResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        calling_numbers: List[str] = None,
        contacts: List[QueryJobsResponseBodyJobsListContacts] = None,
        extras: List[QueryJobsResponseBodyJobsListExtras] = None,
        failure_reason: str = None,
        job_group_id: str = None,
        job_id: str = None,
        priority: int = None,
        reference_id: str = None,
        scenario_id: str = None,
        status: str = None,
        strategy_id: str = None,
        summary: List[QueryJobsResponseBodyJobsListSummary] = None,
        tag_hits: List[QueryJobsResponseBodyJobsListTagHits] = None,
        tasks: List[QueryJobsResponseBodyJobsListTasks] = None,
    ):
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.extras = extras
        self.failure_reason = failure_reason
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.priority = priority
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.status = status
        self.strategy_id = strategy_id
        self.summary = summary
        self.tag_hits = tag_hits
        self.tasks = tasks

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.tag_hits:
            for k in self.tag_hits:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.status is not None:
            result['Status'] = self.status
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['TagHits'] = []
        if self.tag_hits is not None:
            for k in self.tag_hits:
                result['TagHits'].append(k.to_map() if k else None)
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = QueryJobsResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = QueryJobsResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = QueryJobsResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        self.tag_hits = []
        if m.get('TagHits') is not None:
            for k in m.get('TagHits'):
                temp_model = QueryJobsResponseBodyJobsListTagHits()
                self.tag_hits.append(temp_model.from_map(k))
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = QueryJobsResponseBodyJobsListTasks()
                self.tasks.append(temp_model.from_map(k))
        return self


class QueryJobsResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[QueryJobsResponseBodyJobsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryJobsResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        jobs: QueryJobsResponseBodyJobs = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.jobs = jobs
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = QueryJobsResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryJobsWithResultRequest(TeaModel):
    def __init__(
        self,
        end_actual_time_filter: int = None,
        has_answered_filter: bool = None,
        has_hang_up_by_rejection_filter: bool = None,
        has_reached_end_of_flow_filter: bool = None,
        instance_id: str = None,
        job_failure_reasons_filter: str = None,
        job_group_id: str = None,
        job_status_filter: str = None,
        page_number: int = None,
        page_size: int = None,
        query_text: str = None,
        start_actual_time_filter: int = None,
        task_status_filter: str = None,
    ):
        self.end_actual_time_filter = end_actual_time_filter
        self.has_answered_filter = has_answered_filter
        self.has_hang_up_by_rejection_filter = has_hang_up_by_rejection_filter
        self.has_reached_end_of_flow_filter = has_reached_end_of_flow_filter
        # This parameter is required.
        self.instance_id = instance_id
        self.job_failure_reasons_filter = job_failure_reasons_filter
        # This parameter is required.
        self.job_group_id = job_group_id
        self.job_status_filter = job_status_filter
        self.page_number = page_number
        self.page_size = page_size
        self.query_text = query_text
        self.start_actual_time_filter = start_actual_time_filter
        self.task_status_filter = task_status_filter

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_actual_time_filter is not None:
            result['EndActualTimeFilter'] = self.end_actual_time_filter
        if self.has_answered_filter is not None:
            result['HasAnsweredFilter'] = self.has_answered_filter
        if self.has_hang_up_by_rejection_filter is not None:
            result['HasHangUpByRejectionFilter'] = self.has_hang_up_by_rejection_filter
        if self.has_reached_end_of_flow_filter is not None:
            result['HasReachedEndOfFlowFilter'] = self.has_reached_end_of_flow_filter
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_failure_reasons_filter is not None:
            result['JobFailureReasonsFilter'] = self.job_failure_reasons_filter
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status_filter is not None:
            result['JobStatusFilter'] = self.job_status_filter
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.query_text is not None:
            result['QueryText'] = self.query_text
        if self.start_actual_time_filter is not None:
            result['StartActualTimeFilter'] = self.start_actual_time_filter
        if self.task_status_filter is not None:
            result['TaskStatusFilter'] = self.task_status_filter
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndActualTimeFilter') is not None:
            self.end_actual_time_filter = m.get('EndActualTimeFilter')
        if m.get('HasAnsweredFilter') is not None:
            self.has_answered_filter = m.get('HasAnsweredFilter')
        if m.get('HasHangUpByRejectionFilter') is not None:
            self.has_hang_up_by_rejection_filter = m.get('HasHangUpByRejectionFilter')
        if m.get('HasReachedEndOfFlowFilter') is not None:
            self.has_reached_end_of_flow_filter = m.get('HasReachedEndOfFlowFilter')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobFailureReasonsFilter') is not None:
            self.job_failure_reasons_filter = m.get('JobFailureReasonsFilter')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatusFilter') is not None:
            self.job_status_filter = m.get('JobStatusFilter')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('QueryText') is not None:
            self.query_text = m.get('QueryText')
        if m.get('StartActualTimeFilter') is not None:
            self.start_actual_time_filter = m.get('StartActualTimeFilter')
        if m.get('TaskStatusFilter') is not None:
            self.task_status_filter = m.get('TaskStatusFilter')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskContact(TeaModel):
    def __init__(
        self,
        honorific: str = None,
        id: str = None,
        job_uuid: str = None,
        name: str = None,
        phone_number: str = None,
        preferred_phone_number: str = None,
        reference_id: str = None,
        role: str = None,
        round: int = None,
        state: str = None,
    ):
        self.honorific = honorific
        self.id = id
        self.job_uuid = job_uuid
        self.name = name
        self.phone_number = phone_number
        self.preferred_phone_number = preferred_phone_number
        self.reference_id = reference_id
        self.role = role
        self.round = round
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.id is not None:
            result['Id'] = self.id
        if self.job_uuid is not None:
            result['JobUuid'] = self.job_uuid
        if self.name is not None:
            result['Name'] = self.name
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.preferred_phone_number is not None:
            result['PreferredPhoneNumber'] = self.preferred_phone_number
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobUuid') is not None:
            self.job_uuid = m.get('JobUuid')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PreferredPhoneNumber') is not None:
            self.preferred_phone_number = m.get('PreferredPhoneNumber')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes(TeaModel):
    def __init__(
        self,
        code: str = None,
        hint: str = None,
    ):
        self.code = code
        self.hint = hint

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.hint is not None:
            result['Hint'] = self.hint
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Hint') is not None:
            self.hint = m.get('Hint')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        # Key
        self.key = key
        # Value
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits(TeaModel):
    def __init__(
        self,
        tag_group: str = None,
        tag_name: str = None,
    ):
        self.tag_group = tag_group
        self.tag_name = tag_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_group is not None:
            result['TagGroup'] = self.tag_group
        if self.tag_name is not None:
            result['TagName'] = self.tag_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagGroup') is not None:
            self.tag_group = m.get('TagGroup')
        if m.get('TagName') is not None:
            self.tag_name = m.get('TagName')
        return self


class QueryJobsWithResultResponseBodyJobsListLatestTask(TeaModel):
    def __init__(
        self,
        call_duration: int = None,
        call_duration_display: str = None,
        call_time: int = None,
        contact: QueryJobsWithResultResponseBodyJobsListLatestTaskContact = None,
        dial_exception_codes: List[QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes] = None,
        extras: List[QueryJobsWithResultResponseBodyJobsListLatestTaskExtras] = None,
        has_answered: bool = None,
        has_hang_up_by_rejection: bool = None,
        has_last_playback_completed: bool = None,
        has_reached_end_of_flow: bool = None,
        status: str = None,
        status_name: str = None,
        tag_hits: List[QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits] = None,
        task_end_reason: str = None,
    ):
        self.call_duration = call_duration
        self.call_duration_display = call_duration_display
        self.call_time = call_time
        self.contact = contact
        self.dial_exception_codes = dial_exception_codes
        self.extras = extras
        self.has_answered = has_answered
        self.has_hang_up_by_rejection = has_hang_up_by_rejection
        self.has_last_playback_completed = has_last_playback_completed
        self.has_reached_end_of_flow = has_reached_end_of_flow
        self.status = status
        self.status_name = status_name
        self.tag_hits = tag_hits
        self.task_end_reason = task_end_reason

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.dial_exception_codes:
            for k in self.dial_exception_codes:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.tag_hits:
            for k in self.tag_hits:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_duration is not None:
            result['CallDuration'] = self.call_duration
        if self.call_duration_display is not None:
            result['CallDurationDisplay'] = self.call_duration_display
        if self.call_time is not None:
            result['CallTime'] = self.call_time
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        result['DialExceptionCodes'] = []
        if self.dial_exception_codes is not None:
            for k in self.dial_exception_codes:
                result['DialExceptionCodes'].append(k.to_map() if k else None)
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_last_playback_completed is not None:
            result['HasLastPlaybackCompleted'] = self.has_last_playback_completed
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.status is not None:
            result['Status'] = self.status
        if self.status_name is not None:
            result['StatusName'] = self.status_name
        result['TagHits'] = []
        if self.tag_hits is not None:
            for k in self.tag_hits:
                result['TagHits'].append(k.to_map() if k else None)
        if self.task_end_reason is not None:
            result['TaskEndReason'] = self.task_end_reason
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallDuration') is not None:
            self.call_duration = m.get('CallDuration')
        if m.get('CallDurationDisplay') is not None:
            self.call_duration_display = m.get('CallDurationDisplay')
        if m.get('CallTime') is not None:
            self.call_time = m.get('CallTime')
        if m.get('Contact') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskContact()
            self.contact = temp_model.from_map(m['Contact'])
        self.dial_exception_codes = []
        if m.get('DialExceptionCodes') is not None:
            for k in m.get('DialExceptionCodes'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskDialExceptionCodes()
                self.dial_exception_codes.append(temp_model.from_map(k))
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasLastPlaybackCompleted') is not None:
            self.has_last_playback_completed = m.get('HasLastPlaybackCompleted')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StatusName') is not None:
            self.status_name = m.get('StatusName')
        self.tag_hits = []
        if m.get('TagHits') is not None:
            for k in m.get('TagHits'):
                temp_model = QueryJobsWithResultResponseBodyJobsListLatestTaskTagHits()
                self.tag_hits.append(temp_model.from_map(k))
        if m.get('TaskEndReason') is not None:
            self.task_end_reason = m.get('TaskEndReason')
        return self


class QueryJobsWithResultResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        id: str = None,
        job_failure_reason: str = None,
        latest_task: QueryJobsWithResultResponseBodyJobsListLatestTask = None,
        status: str = None,
        status_name: str = None,
    ):
        self.id = id
        self.job_failure_reason = job_failure_reason
        self.latest_task = latest_task
        self.status = status
        self.status_name = status_name

    def validate(self):
        if self.latest_task:
            self.latest_task.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.latest_task is not None:
            result['LatestTask'] = self.latest_task.to_map()
        if self.status is not None:
            result['Status'] = self.status
        if self.status_name is not None:
            result['StatusName'] = self.status_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('LatestTask') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobsListLatestTask()
            self.latest_task = temp_model.from_map(m['LatestTask'])
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StatusName') is not None:
            self.status_name = m.get('StatusName')
        return self


class QueryJobsWithResultResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[QueryJobsWithResultResponseBodyJobsList] = None,
        page_count: int = None,
        page_number: int = None,
        page_size: int = None,
        row_count: int = None,
    ):
        self.list = list
        self.page_count = page_count
        self.page_number = page_number
        self.page_size = page_size
        self.row_count = row_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_count is not None:
            result['PageCount'] = self.page_count
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryJobsWithResultResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageCount') is not None:
            self.page_count = m.get('PageCount')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        return self


class QueryJobsWithResultResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        jobs: QueryJobsWithResultResponseBodyJobs = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        variable_names: List[str] = None,
    ):
        # Code
        self.code = code
        self.http_status_code = http_status_code
        self.jobs = jobs
        self.message = message
        self.request_id = request_id
        self.success = success
        self.variable_names = variable_names

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.variable_names is not None:
            result['VariableNames'] = self.variable_names
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Jobs') is not None:
            temp_model = QueryJobsWithResultResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('VariableNames') is not None:
            self.variable_names = m.get('VariableNames')
        return self


class QueryJobsWithResultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryJobsWithResultResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryJobsWithResultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScriptWaveformsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_content: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_content = script_content
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class QueryScriptWaveformsResponseBodyScriptWaveforms(TeaModel):
    def __init__(
        self,
        file_id: str = None,
        file_name: str = None,
        script_content: str = None,
        script_id: str = None,
        script_waveform_id: str = None,
    ):
        self.file_id = file_id
        self.file_name = file_name
        self.script_content = script_content
        self.script_id = script_id
        self.script_waveform_id = script_waveform_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.script_content is not None:
            result['ScriptContent'] = self.script_content
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_waveform_id is not None:
            result['ScriptWaveformId'] = self.script_waveform_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('ScriptContent') is not None:
            self.script_content = m.get('ScriptContent')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptWaveformId') is not None:
            self.script_waveform_id = m.get('ScriptWaveformId')
        return self


class QueryScriptWaveformsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script_waveforms: List[QueryScriptWaveformsResponseBodyScriptWaveforms] = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script_waveforms = script_waveforms
        self.success = success

    def validate(self):
        if self.script_waveforms:
            for k in self.script_waveforms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ScriptWaveforms'] = []
        if self.script_waveforms is not None:
            for k in self.script_waveforms:
                result['ScriptWaveforms'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.script_waveforms = []
        if m.get('ScriptWaveforms') is not None:
            for k in m.get('ScriptWaveforms'):
                temp_model = QueryScriptWaveformsResponseBodyScriptWaveforms()
                self.script_waveforms.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryScriptWaveformsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryScriptWaveformsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryScriptWaveformsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryScriptsByStatusRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
        status_list: List[str] = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.page_number = page_number
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.status_list = status_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status_list is not None:
            result['StatusList'] = self.status_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StatusList') is not None:
            self.status_list = m.get('StatusList')
        return self


class QueryScriptsByStatusResponseBodyScriptsList(TeaModel):
    def __init__(
        self,
        applied_version: str = None,
        debug_status: str = None,
        debug_version: str = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        update_time: int = None,
    ):
        self.applied_version = applied_version
        self.debug_status = debug_status
        self.debug_version = debug_version
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.debug_version is not None:
            result['DebugVersion'] = self.debug_version
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('DebugVersion') is not None:
            self.debug_version = m.get('DebugVersion')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class QueryScriptsByStatusResponseBodyScripts(TeaModel):
    def __init__(
        self,
        list: List[QueryScriptsByStatusResponseBodyScriptsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryScriptsByStatusResponseBodyScriptsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryScriptsByStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        scripts: QueryScriptsByStatusResponseBodyScripts = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.scripts = scripts
        self.success = success

    def validate(self):
        if self.scripts:
            self.scripts.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scripts is not None:
            result['Scripts'] = self.scripts.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Scripts') is not None:
            temp_model = QueryScriptsByStatusResponseBodyScripts()
            self.scripts = temp_model.from_map(m['Scripts'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryScriptsByStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryScriptsByStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryScriptsByStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RecordFailureRequest(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        call_id: str = None,
        called_number: str = None,
        calling_number: str = None,
        disposition_code: str = None,
        exception_codes: str = None,
        instance_id: str = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.actual_time = actual_time
        # This parameter is required.
        self.call_id = call_id
        # This parameter is required.
        self.called_number = called_number
        # This parameter is required.
        self.calling_number = calling_number
        # This parameter is required.
        self.disposition_code = disposition_code
        self.exception_codes = exception_codes
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.disposition_code is not None:
            result['DispositionCode'] = self.disposition_code
        if self.exception_codes is not None:
            result['ExceptionCodes'] = self.exception_codes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('DispositionCode') is not None:
            self.disposition_code = m.get('DispositionCode')
        if m.get('ExceptionCodes') is not None:
            self.exception_codes = m.get('ExceptionCodes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class RecordFailureResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RecordFailureResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RecordFailureResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RecordFailureResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumeJobsRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
        scenario_id: str = None,
    ):
        # This parameter is required.
        self.all = all
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class ResumeJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumeJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResumeJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResumeJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RollbackScriptRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        rollback_version: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.rollback_version = rollback_version
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.rollback_version is not None:
            result['RollbackVersion'] = self.rollback_version
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RollbackVersion') is not None:
            self.rollback_version = m.get('RollbackVersion')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class RollbackScriptResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RollbackScriptResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: RollbackScriptResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RollbackScriptResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveAfterAnswerDelayPlaybackRequest(TeaModel):
    def __init__(
        self,
        after_answer_delay_playback: int = None,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        self.after_answer_delay_playback = after_answer_delay_playback
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.after_answer_delay_playback is not None:
            result['AfterAnswerDelayPlayback'] = self.after_answer_delay_playback
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AfterAnswerDelayPlayback') is not None:
            self.after_answer_delay_playback = m.get('AfterAnswerDelayPlayback')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveAfterAnswerDelayPlaybackResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAfterAnswerDelayPlaybackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveAfterAnswerDelayPlaybackResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveAfterAnswerDelayPlaybackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_customization_data_info_id: str = None,
        annotation_mission_chat_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        content: str = None,
        create: bool = None,
        create_time: int = None,
        customization_data_description: str = None,
        customization_data_id: str = None,
        customization_data_name: str = None,
        customization_data_weight: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
    ):
        # id
        self.annotation_mission_chat_customization_data_info_id = annotation_mission_chat_customization_data_info_id
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.content = content
        self.create = create
        self.create_time = create_time
        self.customization_data_description = customization_data_description
        # id
        self.customization_data_id = customization_data_id
        self.customization_data_name = customization_data_name
        self.customization_data_weight = customization_data_weight
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_customization_data_info_id is not None:
            result['AnnotationMissionChatCustomizationDataInfoId'] = self.annotation_mission_chat_customization_data_info_id
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.content is not None:
            result['Content'] = self.content
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.customization_data_description is not None:
            result['CustomizationDataDescription'] = self.customization_data_description
        if self.customization_data_id is not None:
            result['CustomizationDataId'] = self.customization_data_id
        if self.customization_data_name is not None:
            result['CustomizationDataName'] = self.customization_data_name
        if self.customization_data_weight is not None:
            result['CustomizationDataWeight'] = self.customization_data_weight
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatCustomizationDataInfoId') is not None:
            self.annotation_mission_chat_customization_data_info_id = m.get('AnnotationMissionChatCustomizationDataInfoId')
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('CustomizationDataDescription') is not None:
            self.customization_data_description = m.get('CustomizationDataDescription')
        if m.get('CustomizationDataId') is not None:
            self.customization_data_id = m.get('CustomizationDataId')
        if m.get('CustomizationDataName') is not None:
            self.customization_data_name = m.get('CustomizationDataName')
        if m.get('CustomizationDataWeight') is not None:
            self.customization_data_weight = m.get('CustomizationDataWeight')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_intent_user_say_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        bot_id: str = None,
        content: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        dialog_id: int = None,
        instance_id: str = None,
        intent_id: int = None,
        modified_time: int = None,
    ):
        self.annotation_mission_chat_id = annotation_mission_chat_id
        self.annotation_mission_chat_intent_user_say_info_id = annotation_mission_chat_intent_user_say_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.bot_id = bot_id
        self.content = content
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.dialog_id = dialog_id
        self.instance_id = instance_id
        self.intent_id = intent_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_intent_user_say_info_id is not None:
            result['AnnotationMissionChatIntentUserSayInfoId'] = self.annotation_mission_chat_intent_user_say_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.bot_id is not None:
            result['BotId'] = self.bot_id
        if self.content is not None:
            result['Content'] = self.content
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.dialog_id is not None:
            result['DialogId'] = self.dialog_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatIntentUserSayInfoId') is not None:
            self.annotation_mission_chat_intent_user_say_info_id = m.get('AnnotationMissionChatIntentUserSayInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('BotId') is not None:
            self.bot_id = m.get('BotId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('DialogId') is not None:
            self.dialog_id = m.get('DialogId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_tag_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_mission_tag_info_id: str = None,
        annotation_mission_tag_info_name: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
    ):
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        # id
        self.annotation_mission_chat_tag_info_id = annotation_mission_chat_tag_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        # tag id
        self.annotation_mission_tag_info_id = annotation_mission_tag_info_id
        self.annotation_mission_tag_info_name = annotation_mission_tag_info_name
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_tag_info_id is not None:
            result['AnnotationMissionChatTagInfoId'] = self.annotation_mission_chat_tag_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_mission_tag_info_id is not None:
            result['AnnotationMissionTagInfoId'] = self.annotation_mission_tag_info_id
        if self.annotation_mission_tag_info_name is not None:
            result['AnnotationMissionTagInfoName'] = self.annotation_mission_tag_info_name
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatTagInfoId') is not None:
            self.annotation_mission_chat_tag_info_id = m.get('AnnotationMissionChatTagInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationMissionTagInfoId') is not None:
            self.annotation_mission_tag_info_id = m.get('AnnotationMissionTagInfoId')
        if m.get('AnnotationMissionTagInfoName') is not None:
            self.annotation_mission_tag_info_name = m.get('AnnotationMissionTagInfoName')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_vocabulary_info_id: str = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        create: bool = None,
        create_time: int = None,
        delete: bool = None,
        instance_id: str = None,
        modified_time: int = None,
        vocabulary: str = None,
        vocabulary_description: str = None,
        vocabulary_id: str = None,
        vocabulary_name: str = None,
        vocabulary_weight: int = None,
    ):
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        # id
        self.annotation_mission_chat_vocabulary_info_id = annotation_mission_chat_vocabulary_info_id
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.create = create
        self.create_time = create_time
        self.delete = delete
        self.instance_id = instance_id
        self.modified_time = modified_time
        self.vocabulary = vocabulary
        self.vocabulary_description = vocabulary_description
        self.vocabulary_id = vocabulary_id
        self.vocabulary_name = vocabulary_name
        self.vocabulary_weight = vocabulary_weight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        if self.annotation_mission_chat_vocabulary_info_id is not None:
            result['AnnotationMissionChatVocabularyInfoId'] = self.annotation_mission_chat_vocabulary_info_id
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.create is not None:
            result['Create'] = self.create
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.vocabulary is not None:
            result['Vocabulary'] = self.vocabulary
        if self.vocabulary_description is not None:
            result['VocabularyDescription'] = self.vocabulary_description
        if self.vocabulary_id is not None:
            result['VocabularyId'] = self.vocabulary_id
        if self.vocabulary_name is not None:
            result['VocabularyName'] = self.vocabulary_name
        if self.vocabulary_weight is not None:
            result['VocabularyWeight'] = self.vocabulary_weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        if m.get('AnnotationMissionChatVocabularyInfoId') is not None:
            self.annotation_mission_chat_vocabulary_info_id = m.get('AnnotationMissionChatVocabularyInfoId')
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('Create') is not None:
            self.create = m.get('Create')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('Vocabulary') is not None:
            self.vocabulary = m.get('Vocabulary')
        if m.get('VocabularyDescription') is not None:
            self.vocabulary_description = m.get('VocabularyDescription')
        if m.get('VocabularyId') is not None:
            self.vocabulary_id = m.get('VocabularyId')
        if m.get('VocabularyName') is not None:
            self.vocabulary_name = m.get('VocabularyName')
        if m.get('VocabularyWeight') is not None:
            self.vocabulary_weight = m.get('VocabularyWeight')
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList(TeaModel):
    def __init__(
        self,
        annotation_asr_result: str = None,
        annotation_mission_chat_customization_data_info_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList] = None,
        annotation_mission_chat_id: str = None,
        annotation_mission_chat_intent_user_say_info_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList] = None,
        annotation_mission_chat_tag_info_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList] = None,
        annotation_mission_chat_vocabulary_info_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList] = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_status: int = None,
        answer: str = None,
        asr_annotation_status: int = None,
        create_time: int = None,
        instance_id: str = None,
        intent_annotation_status: int = None,
        modified_time: int = None,
        occur_time: int = None,
        original_asr_result: str = None,
        sequence_id: str = None,
        sub_status: int = None,
        tag_annotation_status: int = None,
        translation_error: int = None,
    ):
        self.annotation_asr_result = annotation_asr_result
        self.annotation_mission_chat_customization_data_info_list = annotation_mission_chat_customization_data_info_list
        # chat id
        self.annotation_mission_chat_id = annotation_mission_chat_id
        self.annotation_mission_chat_intent_user_say_info_list = annotation_mission_chat_intent_user_say_info_list
        self.annotation_mission_chat_tag_info_list = annotation_mission_chat_tag_info_list
        self.annotation_mission_chat_vocabulary_info_list = annotation_mission_chat_vocabulary_info_list
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.annotation_status = annotation_status
        self.answer = answer
        self.asr_annotation_status = asr_annotation_status
        self.create_time = create_time
        self.instance_id = instance_id
        self.intent_annotation_status = intent_annotation_status
        self.modified_time = modified_time
        self.occur_time = occur_time
        self.original_asr_result = original_asr_result
        self.sequence_id = sequence_id
        self.sub_status = sub_status
        self.tag_annotation_status = tag_annotation_status
        self.translation_error = translation_error

    def validate(self):
        if self.annotation_mission_chat_customization_data_info_list:
            for k in self.annotation_mission_chat_customization_data_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_intent_user_say_info_list:
            for k in self.annotation_mission_chat_intent_user_say_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_tag_info_list:
            for k in self.annotation_mission_chat_tag_info_list:
                if k:
                    k.validate()
        if self.annotation_mission_chat_vocabulary_info_list:
            for k in self.annotation_mission_chat_vocabulary_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_asr_result is not None:
            result['AnnotationAsrResult'] = self.annotation_asr_result
        result['AnnotationMissionChatCustomizationDataInfoList'] = []
        if self.annotation_mission_chat_customization_data_info_list is not None:
            for k in self.annotation_mission_chat_customization_data_info_list:
                result['AnnotationMissionChatCustomizationDataInfoList'].append(k.to_map() if k else None)
        if self.annotation_mission_chat_id is not None:
            result['AnnotationMissionChatId'] = self.annotation_mission_chat_id
        result['AnnotationMissionChatIntentUserSayInfoList'] = []
        if self.annotation_mission_chat_intent_user_say_info_list is not None:
            for k in self.annotation_mission_chat_intent_user_say_info_list:
                result['AnnotationMissionChatIntentUserSayInfoList'].append(k.to_map() if k else None)
        result['AnnotationMissionChatTagInfoList'] = []
        if self.annotation_mission_chat_tag_info_list is not None:
            for k in self.annotation_mission_chat_tag_info_list:
                result['AnnotationMissionChatTagInfoList'].append(k.to_map() if k else None)
        result['AnnotationMissionChatVocabularyInfoList'] = []
        if self.annotation_mission_chat_vocabulary_info_list is not None:
            for k in self.annotation_mission_chat_vocabulary_info_list:
                result['AnnotationMissionChatVocabularyInfoList'].append(k.to_map() if k else None)
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.answer is not None:
            result['Answer'] = self.answer
        if self.asr_annotation_status is not None:
            result['AsrAnnotationStatus'] = self.asr_annotation_status
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.intent_annotation_status is not None:
            result['IntentAnnotationStatus'] = self.intent_annotation_status
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.occur_time is not None:
            result['OccurTime'] = self.occur_time
        if self.original_asr_result is not None:
            result['OriginalAsrResult'] = self.original_asr_result
        if self.sequence_id is not None:
            result['SequenceId'] = self.sequence_id
        if self.sub_status is not None:
            result['SubStatus'] = self.sub_status
        if self.tag_annotation_status is not None:
            result['TagAnnotationStatus'] = self.tag_annotation_status
        if self.translation_error is not None:
            result['TranslationError'] = self.translation_error
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationAsrResult') is not None:
            self.annotation_asr_result = m.get('AnnotationAsrResult')
        self.annotation_mission_chat_customization_data_info_list = []
        if m.get('AnnotationMissionChatCustomizationDataInfoList') is not None:
            for k in m.get('AnnotationMissionChatCustomizationDataInfoList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatCustomizationDataInfoList()
                self.annotation_mission_chat_customization_data_info_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionChatId') is not None:
            self.annotation_mission_chat_id = m.get('AnnotationMissionChatId')
        self.annotation_mission_chat_intent_user_say_info_list = []
        if m.get('AnnotationMissionChatIntentUserSayInfoList') is not None:
            for k in m.get('AnnotationMissionChatIntentUserSayInfoList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatIntentUserSayInfoList()
                self.annotation_mission_chat_intent_user_say_info_list.append(temp_model.from_map(k))
        self.annotation_mission_chat_tag_info_list = []
        if m.get('AnnotationMissionChatTagInfoList') is not None:
            for k in m.get('AnnotationMissionChatTagInfoList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatTagInfoList()
                self.annotation_mission_chat_tag_info_list.append(temp_model.from_map(k))
        self.annotation_mission_chat_vocabulary_info_list = []
        if m.get('AnnotationMissionChatVocabularyInfoList') is not None:
            for k in m.get('AnnotationMissionChatVocabularyInfoList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatListAnnotationMissionChatVocabularyInfoList()
                self.annotation_mission_chat_vocabulary_info_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('Answer') is not None:
            self.answer = m.get('Answer')
        if m.get('AsrAnnotationStatus') is not None:
            self.asr_annotation_status = m.get('AsrAnnotationStatus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntentAnnotationStatus') is not None:
            self.intent_annotation_status = m.get('IntentAnnotationStatus')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('OccurTime') is not None:
            self.occur_time = m.get('OccurTime')
        if m.get('OriginalAsrResult') is not None:
            self.original_asr_result = m.get('OriginalAsrResult')
        if m.get('SequenceId') is not None:
            self.sequence_id = m.get('SequenceId')
        if m.get('SubStatus') is not None:
            self.sub_status = m.get('SubStatus')
        if m.get('TagAnnotationStatus') is not None:
            self.tag_annotation_status = m.get('TagAnnotationStatus')
        if m.get('TranslationError') is not None:
            self.translation_error = m.get('TranslationError')
        return self


class SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList(TeaModel):
    def __init__(
        self,
        annotation_mission_chat_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList] = None,
        annotation_mission_id: str = None,
        annotation_mission_session_id: str = None,
        annotation_status: int = None,
        create_time: int = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: str = None,
        modified_time: int = None,
        script_id: str = None,
        session_id: str = None,
    ):
        self.annotation_mission_chat_list = annotation_mission_chat_list
        self.annotation_mission_id = annotation_mission_id
        self.annotation_mission_session_id = annotation_mission_session_id
        self.annotation_status = annotation_status
        self.create_time = create_time
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.modified_time = modified_time
        self.script_id = script_id
        self.session_id = session_id

    def validate(self):
        if self.annotation_mission_chat_list:
            for k in self.annotation_mission_chat_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnnotationMissionChatList'] = []
        if self.annotation_mission_chat_list is not None:
            for k in self.annotation_mission_chat_list:
                result['AnnotationMissionChatList'].append(k.to_map() if k else None)
        if self.annotation_mission_id is not None:
            result['AnnotationMissionId'] = self.annotation_mission_id
        if self.annotation_mission_session_id is not None:
            result['AnnotationMissionSessionId'] = self.annotation_mission_session_id
        if self.annotation_status is not None:
            result['AnnotationStatus'] = self.annotation_status
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.modified_time is not None:
            result['ModifiedTime'] = self.modified_time
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.session_id is not None:
            result['SessionId'] = self.session_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.annotation_mission_chat_list = []
        if m.get('AnnotationMissionChatList') is not None:
            for k in m.get('AnnotationMissionChatList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionListAnnotationMissionChatList()
                self.annotation_mission_chat_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionId') is not None:
            self.annotation_mission_id = m.get('AnnotationMissionId')
        if m.get('AnnotationMissionSessionId') is not None:
            self.annotation_mission_session_id = m.get('AnnotationMissionSessionId')
        if m.get('AnnotationStatus') is not None:
            self.annotation_status = m.get('AnnotationStatus')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('ModifiedTime') is not None:
            self.modified_time = m.get('ModifiedTime')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('SessionId') is not None:
            self.session_id = m.get('SessionId')
        return self


class SaveAnnotationMissionSessionListRequest(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        agent_key: str = None,
        annotation_mission_data_source_type: int = None,
        annotation_mission_session_list: List[SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList] = None,
        annotation_mission_session_list_json_string: str = None,
        environment: int = None,
        user_nick: str = None,
    ):
        self.agent_id = agent_id
        self.agent_key = agent_key
        self.annotation_mission_data_source_type = annotation_mission_data_source_type
        self.annotation_mission_session_list = annotation_mission_session_list
        self.annotation_mission_session_list_json_string = annotation_mission_session_list_json_string
        self.environment = environment
        self.user_nick = user_nick

    def validate(self):
        if self.annotation_mission_session_list:
            for k in self.annotation_mission_session_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_key is not None:
            result['AgentKey'] = self.agent_key
        if self.annotation_mission_data_source_type is not None:
            result['AnnotationMissionDataSourceType'] = self.annotation_mission_data_source_type
        result['AnnotationMissionSessionList'] = []
        if self.annotation_mission_session_list is not None:
            for k in self.annotation_mission_session_list:
                result['AnnotationMissionSessionList'].append(k.to_map() if k else None)
        if self.annotation_mission_session_list_json_string is not None:
            result['AnnotationMissionSessionListJsonString'] = self.annotation_mission_session_list_json_string
        if self.environment is not None:
            result['Environment'] = self.environment
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentKey') is not None:
            self.agent_key = m.get('AgentKey')
        if m.get('AnnotationMissionDataSourceType') is not None:
            self.annotation_mission_data_source_type = m.get('AnnotationMissionDataSourceType')
        self.annotation_mission_session_list = []
        if m.get('AnnotationMissionSessionList') is not None:
            for k in m.get('AnnotationMissionSessionList'):
                temp_model = SaveAnnotationMissionSessionListRequestAnnotationMissionSessionList()
                self.annotation_mission_session_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionSessionListJsonString') is not None:
            self.annotation_mission_session_list_json_string = m.get('AnnotationMissionSessionListJsonString')
        if m.get('Environment') is not None:
            self.environment = m.get('Environment')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_session_list_json_string: str = None,
    ):
        self.annotation_mission_session_list_json_string = annotation_mission_session_list_json_string

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_session_list_json_string is not None:
            result['AnnotationMissionSessionListJsonString'] = self.annotation_mission_session_list_json_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionSessionListJsonString') is not None:
            self.annotation_mission_session_list_json_string = m.get('AnnotationMissionSessionListJsonString')
        return self


class SaveAnnotationMissionSessionListResponseBodyData(TeaModel):
    def __init__(
        self,
        message: str = None,
        message_list: List[str] = None,
        save_annotation_mission_session_list_request: SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest = None,
        success: bool = None,
    ):
        self.message = message
        self.message_list = message_list
        self.save_annotation_mission_session_list_request = save_annotation_mission_session_list_request
        self.success = success

    def validate(self):
        if self.save_annotation_mission_session_list_request:
            self.save_annotation_mission_session_list_request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.message_list is not None:
            result['MessageList'] = self.message_list
        if self.save_annotation_mission_session_list_request is not None:
            result['SaveAnnotationMissionSessionListRequest'] = self.save_annotation_mission_session_list_request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('MessageList') is not None:
            self.message_list = m.get('MessageList')
        if m.get('SaveAnnotationMissionSessionListRequest') is not None:
            temp_model = SaveAnnotationMissionSessionListResponseBodyDataSaveAnnotationMissionSessionListRequest()
            self.save_annotation_mission_session_list_request = temp_model.from_map(m['SaveAnnotationMissionSessionListRequest'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAnnotationMissionSessionListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SaveAnnotationMissionSessionListResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SaveAnnotationMissionSessionListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAnnotationMissionSessionListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveAnnotationMissionSessionListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveAnnotationMissionSessionListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList(TeaModel):
    def __init__(
        self,
        annotation_mission_tag_info_description: str = None,
        annotation_mission_tag_info_id: str = None,
        annotation_mission_tag_info_name: str = None,
        delete: bool = None,
        instance_id: str = None,
        tenant_id: str = None,
    ):
        self.annotation_mission_tag_info_description = annotation_mission_tag_info_description
        # tag id
        self.annotation_mission_tag_info_id = annotation_mission_tag_info_id
        self.annotation_mission_tag_info_name = annotation_mission_tag_info_name
        self.delete = delete
        self.instance_id = instance_id
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.annotation_mission_tag_info_description is not None:
            result['AnnotationMissionTagInfoDescription'] = self.annotation_mission_tag_info_description
        if self.annotation_mission_tag_info_id is not None:
            result['AnnotationMissionTagInfoId'] = self.annotation_mission_tag_info_id
        if self.annotation_mission_tag_info_name is not None:
            result['AnnotationMissionTagInfoName'] = self.annotation_mission_tag_info_name
        if self.delete is not None:
            result['Delete'] = self.delete
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AnnotationMissionTagInfoDescription') is not None:
            self.annotation_mission_tag_info_description = m.get('AnnotationMissionTagInfoDescription')
        if m.get('AnnotationMissionTagInfoId') is not None:
            self.annotation_mission_tag_info_id = m.get('AnnotationMissionTagInfoId')
        if m.get('AnnotationMissionTagInfoName') is not None:
            self.annotation_mission_tag_info_name = m.get('AnnotationMissionTagInfoName')
        if m.get('Delete') is not None:
            self.delete = m.get('Delete')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class SaveAnnotationMissionTagInfoListRequest(TeaModel):
    def __init__(
        self,
        annotation_mission_tag_info_list: List[SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList] = None,
        annotation_mission_tag_info_list_json_string: str = None,
        instance_id: str = None,
        reset: bool = None,
    ):
        self.annotation_mission_tag_info_list = annotation_mission_tag_info_list
        self.annotation_mission_tag_info_list_json_string = annotation_mission_tag_info_list_json_string
        self.instance_id = instance_id
        self.reset = reset

    def validate(self):
        if self.annotation_mission_tag_info_list:
            for k in self.annotation_mission_tag_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AnnotationMissionTagInfoList'] = []
        if self.annotation_mission_tag_info_list is not None:
            for k in self.annotation_mission_tag_info_list:
                result['AnnotationMissionTagInfoList'].append(k.to_map() if k else None)
        if self.annotation_mission_tag_info_list_json_string is not None:
            result['AnnotationMissionTagInfoListJsonString'] = self.annotation_mission_tag_info_list_json_string
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.reset is not None:
            result['Reset'] = self.reset
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.annotation_mission_tag_info_list = []
        if m.get('AnnotationMissionTagInfoList') is not None:
            for k in m.get('AnnotationMissionTagInfoList'):
                temp_model = SaveAnnotationMissionTagInfoListRequestAnnotationMissionTagInfoList()
                self.annotation_mission_tag_info_list.append(temp_model.from_map(k))
        if m.get('AnnotationMissionTagInfoListJsonString') is not None:
            self.annotation_mission_tag_info_list_json_string = m.get('AnnotationMissionTagInfoListJsonString')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Reset') is not None:
            self.reset = m.get('Reset')
        return self


class SaveAnnotationMissionTagInfoListResponseBodyData(TeaModel):
    def __init__(
        self,
        exec_count: int = None,
        message: str = None,
        success: bool = None,
    ):
        self.exec_count = exec_count
        self.message = message
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.exec_count is not None:
            result['ExecCount'] = self.exec_count
        if self.message is not None:
            result['Message'] = self.message
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExecCount') is not None:
            self.exec_count = m.get('ExecCount')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAnnotationMissionTagInfoListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: SaveAnnotationMissionTagInfoListResponseBodyData = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = SaveAnnotationMissionTagInfoListResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveAnnotationMissionTagInfoListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveAnnotationMissionTagInfoListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveAnnotationMissionTagInfoListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveBaseStrategyPeriodRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        only_weekdays: bool = None,
        only_workdays: bool = None,
        strategy_level: int = None,
        working_time: List[str] = None,
        working_time_frames_json: str = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.only_weekdays = only_weekdays
        self.only_workdays = only_workdays
        self.strategy_level = strategy_level
        self.working_time = working_time
        self.working_time_frames_json = working_time_frames_json

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.only_weekdays is not None:
            result['OnlyWeekdays'] = self.only_weekdays
        if self.only_workdays is not None:
            result['OnlyWorkdays'] = self.only_workdays
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        if self.working_time is not None:
            result['WorkingTime'] = self.working_time
        if self.working_time_frames_json is not None:
            result['WorkingTimeFramesJson'] = self.working_time_frames_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('OnlyWeekdays') is not None:
            self.only_weekdays = m.get('OnlyWeekdays')
        if m.get('OnlyWorkdays') is not None:
            self.only_workdays = m.get('OnlyWorkdays')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        if m.get('WorkingTime') is not None:
            self.working_time = m.get('WorkingTime')
        if m.get('WorkingTimeFramesJson') is not None:
            self.working_time_frames_json = m.get('WorkingTimeFramesJson')
        return self


class SaveBaseStrategyPeriodResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveBaseStrategyPeriodResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveBaseStrategyPeriodResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveBaseStrategyPeriodResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContactBlockListRequest(TeaModel):
    def __init__(
        self,
        contact_block_list_list: List[str] = None,
        contact_block_lists_json: str = None,
        instance_id: str = None,
    ):
        self.contact_block_list_list = contact_block_list_list
        self.contact_block_lists_json = contact_block_lists_json
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_block_list_list is not None:
            result['ContactBlockListList'] = self.contact_block_list_list
        if self.contact_block_lists_json is not None:
            result['ContactBlockListsJson'] = self.contact_block_lists_json
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactBlockListList') is not None:
            self.contact_block_list_list = m.get('ContactBlockListList')
        if m.get('ContactBlockListsJson') is not None:
            self.contact_block_lists_json = m.get('ContactBlockListsJson')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SaveContactBlockListResponseBody(TeaModel):
    def __init__(
        self,
        affected_rows: int = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.affected_rows = affected_rows
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveContactBlockListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveContactBlockListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContactBlockListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContactWhiteListRequest(TeaModel):
    def __init__(
        self,
        contact_white_list_list: List[str] = None,
        contact_white_lists_json: str = None,
        instance_id: str = None,
    ):
        self.contact_white_list_list = contact_white_list_list
        self.contact_white_lists_json = contact_white_lists_json
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_white_list_list is not None:
            result['ContactWhiteListList'] = self.contact_white_list_list
        if self.contact_white_lists_json is not None:
            result['ContactWhiteListsJson'] = self.contact_white_lists_json
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactWhiteListList') is not None:
            self.contact_white_list_list = m.get('ContactWhiteListList')
        if m.get('ContactWhiteListsJson') is not None:
            self.contact_white_lists_json = m.get('ContactWhiteListsJson')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SaveContactWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        affected_rows: int = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.affected_rows = affected_rows
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.affected_rows is not None:
            result['AffectedRows'] = self.affected_rows
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AffectedRows') is not None:
            self.affected_rows = m.get('AffectedRows')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveContactWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveContactWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContactWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveEffectiveDaysRequest(TeaModel):
    def __init__(
        self,
        effective_days: int = None,
        entry_id: str = None,
        strategy_level: int = None,
    ):
        self.effective_days = effective_days
        # This parameter is required.
        self.entry_id = entry_id
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effective_days is not None:
            result['EffectiveDays'] = self.effective_days
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EffectiveDays') is not None:
            self.effective_days = m.get('EffectiveDays')
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveEffectiveDaysResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveEffectiveDaysResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveEffectiveDaysResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveEffectiveDaysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveMaxAttemptsPerDayRequest(TeaModel):
    def __init__(
        self,
        entry_id: str = None,
        max_attempts_per_day: int = None,
        strategy_level: int = None,
    ):
        # This parameter is required.
        self.entry_id = entry_id
        self.max_attempts_per_day = max_attempts_per_day
        self.strategy_level = strategy_level

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entry_id is not None:
            result['EntryId'] = self.entry_id
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        if self.strategy_level is not None:
            result['StrategyLevel'] = self.strategy_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EntryId') is not None:
            self.entry_id = m.get('EntryId')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        if m.get('StrategyLevel') is not None:
            self.strategy_level = m.get('StrategyLevel')
        return self


class SaveMaxAttemptsPerDayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveMaxAttemptsPerDayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveMaxAttemptsPerDayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveMaxAttemptsPerDayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SearchTaskRequest(TeaModel):
    def __init__(
        self,
        actual_time_gte: int = None,
        actual_time_lte: int = None,
        call_duration_gte: int = None,
        call_duration_lte: int = None,
        called_number: str = None,
        calling_number: str = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_group_name_query: str = None,
        job_id: str = None,
        job_status_string_list: str = None,
        other_id: str = None,
        page_index: int = None,
        page_size: int = None,
        recording_duration_gte: int = None,
        recording_duration_lte: int = None,
        script_name_query: str = None,
        sort_by: str = None,
        sort_order: str = None,
        task_create_time_gte: int = None,
        task_create_time_lte: int = None,
        task_id: str = None,
        task_status_string_list: str = None,
        user_id_match: str = None,
    ):
        self.actual_time_gte = actual_time_gte
        self.actual_time_lte = actual_time_lte
        self.call_duration_gte = call_duration_gte
        self.call_duration_lte = call_duration_lte
        self.called_number = called_number
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_group_name_query = job_group_name_query
        self.job_id = job_id
        self.job_status_string_list = job_status_string_list
        self.other_id = other_id
        self.page_index = page_index
        self.page_size = page_size
        self.recording_duration_gte = recording_duration_gte
        self.recording_duration_lte = recording_duration_lte
        self.script_name_query = script_name_query
        self.sort_by = sort_by
        self.sort_order = sort_order
        self.task_create_time_gte = task_create_time_gte
        self.task_create_time_lte = task_create_time_lte
        self.task_id = task_id
        self.task_status_string_list = task_status_string_list
        self.user_id_match = user_id_match

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time_gte is not None:
            result['ActualTimeGte'] = self.actual_time_gte
        if self.actual_time_lte is not None:
            result['ActualTimeLte'] = self.actual_time_lte
        if self.call_duration_gte is not None:
            result['CallDurationGte'] = self.call_duration_gte
        if self.call_duration_lte is not None:
            result['CallDurationLte'] = self.call_duration_lte
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name_query is not None:
            result['JobGroupNameQuery'] = self.job_group_name_query
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status_string_list is not None:
            result['JobStatusStringList'] = self.job_status_string_list
        if self.other_id is not None:
            result['OtherId'] = self.other_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.recording_duration_gte is not None:
            result['RecordingDurationGte'] = self.recording_duration_gte
        if self.recording_duration_lte is not None:
            result['RecordingDurationLte'] = self.recording_duration_lte
        if self.script_name_query is not None:
            result['ScriptNameQuery'] = self.script_name_query
        if self.sort_by is not None:
            result['SortBy'] = self.sort_by
        if self.sort_order is not None:
            result['SortOrder'] = self.sort_order
        if self.task_create_time_gte is not None:
            result['TaskCreateTimeGte'] = self.task_create_time_gte
        if self.task_create_time_lte is not None:
            result['TaskCreateTimeLte'] = self.task_create_time_lte
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status_string_list is not None:
            result['TaskStatusStringList'] = self.task_status_string_list
        if self.user_id_match is not None:
            result['UserIdMatch'] = self.user_id_match
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTimeGte') is not None:
            self.actual_time_gte = m.get('ActualTimeGte')
        if m.get('ActualTimeLte') is not None:
            self.actual_time_lte = m.get('ActualTimeLte')
        if m.get('CallDurationGte') is not None:
            self.call_duration_gte = m.get('CallDurationGte')
        if m.get('CallDurationLte') is not None:
            self.call_duration_lte = m.get('CallDurationLte')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupNameQuery') is not None:
            self.job_group_name_query = m.get('JobGroupNameQuery')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatusStringList') is not None:
            self.job_status_string_list = m.get('JobStatusStringList')
        if m.get('OtherId') is not None:
            self.other_id = m.get('OtherId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RecordingDurationGte') is not None:
            self.recording_duration_gte = m.get('RecordingDurationGte')
        if m.get('RecordingDurationLte') is not None:
            self.recording_duration_lte = m.get('RecordingDurationLte')
        if m.get('ScriptNameQuery') is not None:
            self.script_name_query = m.get('ScriptNameQuery')
        if m.get('SortBy') is not None:
            self.sort_by = m.get('SortBy')
        if m.get('SortOrder') is not None:
            self.sort_order = m.get('SortOrder')
        if m.get('TaskCreateTimeGte') is not None:
            self.task_create_time_gte = m.get('TaskCreateTimeGte')
        if m.get('TaskCreateTimeLte') is not None:
            self.task_create_time_lte = m.get('TaskCreateTimeLte')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatusStringList') is not None:
            self.task_status_string_list = m.get('TaskStatusStringList')
        if m.get('UserIdMatch') is not None:
            self.user_id_match = m.get('UserIdMatch')
        return self


class SearchTaskResponseBodySearchTaskInfoList(TeaModel):
    def __init__(
        self,
        actual_time: int = None,
        call_duration: int = None,
        call_duration_display: str = None,
        called_number: str = None,
        calling_number: str = None,
        dial_exception: str = None,
        dial_exception_codes: List[str] = None,
        dial_exception_old: str = None,
        has_answered: bool = None,
        has_hang_up_by_rejection: bool = None,
        has_last_playback_completed: bool = None,
        has_reached_end_of_flow: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_group_name: str = None,
        job_id: str = None,
        job_status: int = None,
        job_status_name: str = None,
        job_status_string: str = None,
        recording_duration: int = None,
        script_name: str = None,
        task_create_time: int = None,
        task_end_reason: int = None,
        task_id: str = None,
        task_status: int = None,
        task_status_name: str = None,
        task_status_string: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.actual_time = actual_time
        self.call_duration = call_duration
        self.call_duration_display = call_duration_display
        self.called_number = called_number
        self.calling_number = calling_number
        self.dial_exception = dial_exception
        self.dial_exception_codes = dial_exception_codes
        self.dial_exception_old = dial_exception_old
        self.has_answered = has_answered
        self.has_hang_up_by_rejection = has_hang_up_by_rejection
        self.has_last_playback_completed = has_last_playback_completed
        self.has_reached_end_of_flow = has_reached_end_of_flow
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_group_name = job_group_name
        self.job_id = job_id
        self.job_status = job_status
        self.job_status_name = job_status_name
        self.job_status_string = job_status_string
        self.recording_duration = recording_duration
        self.script_name = script_name
        self.task_create_time = task_create_time
        self.task_end_reason = task_end_reason
        self.task_id = task_id
        self.task_status = task_status
        self.task_status_name = task_status_name
        self.task_status_string = task_status_string
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.call_duration is not None:
            result['CallDuration'] = self.call_duration
        if self.call_duration_display is not None:
            result['CallDurationDisplay'] = self.call_duration_display
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.dial_exception is not None:
            result['DialException'] = self.dial_exception
        if self.dial_exception_codes is not None:
            result['DialExceptionCodes'] = self.dial_exception_codes
        if self.dial_exception_old is not None:
            result['DialExceptionOld'] = self.dial_exception_old
        if self.has_answered is not None:
            result['HasAnswered'] = self.has_answered
        if self.has_hang_up_by_rejection is not None:
            result['HasHangUpByRejection'] = self.has_hang_up_by_rejection
        if self.has_last_playback_completed is not None:
            result['HasLastPlaybackCompleted'] = self.has_last_playback_completed
        if self.has_reached_end_of_flow is not None:
            result['HasReachedEndOfFlow'] = self.has_reached_end_of_flow
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.job_status_name is not None:
            result['JobStatusName'] = self.job_status_name
        if self.job_status_string is not None:
            result['JobStatusString'] = self.job_status_string
        if self.recording_duration is not None:
            result['RecordingDuration'] = self.recording_duration
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.task_create_time is not None:
            result['TaskCreateTime'] = self.task_create_time
        if self.task_end_reason is not None:
            result['TaskEndReason'] = self.task_end_reason
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.task_status_name is not None:
            result['TaskStatusName'] = self.task_status_name
        if self.task_status_string is not None:
            result['TaskStatusString'] = self.task_status_string
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CallDuration') is not None:
            self.call_duration = m.get('CallDuration')
        if m.get('CallDurationDisplay') is not None:
            self.call_duration_display = m.get('CallDurationDisplay')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('DialException') is not None:
            self.dial_exception = m.get('DialException')
        if m.get('DialExceptionCodes') is not None:
            self.dial_exception_codes = m.get('DialExceptionCodes')
        if m.get('DialExceptionOld') is not None:
            self.dial_exception_old = m.get('DialExceptionOld')
        if m.get('HasAnswered') is not None:
            self.has_answered = m.get('HasAnswered')
        if m.get('HasHangUpByRejection') is not None:
            self.has_hang_up_by_rejection = m.get('HasHangUpByRejection')
        if m.get('HasLastPlaybackCompleted') is not None:
            self.has_last_playback_completed = m.get('HasLastPlaybackCompleted')
        if m.get('HasReachedEndOfFlow') is not None:
            self.has_reached_end_of_flow = m.get('HasReachedEndOfFlow')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('JobStatusName') is not None:
            self.job_status_name = m.get('JobStatusName')
        if m.get('JobStatusString') is not None:
            self.job_status_string = m.get('JobStatusString')
        if m.get('RecordingDuration') is not None:
            self.recording_duration = m.get('RecordingDuration')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('TaskCreateTime') is not None:
            self.task_create_time = m.get('TaskCreateTime')
        if m.get('TaskEndReason') is not None:
            self.task_end_reason = m.get('TaskEndReason')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TaskStatusName') is not None:
            self.task_status_name = m.get('TaskStatusName')
        if m.get('TaskStatusString') is not None:
            self.task_status_string = m.get('TaskStatusString')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class SearchTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        page_index: int = None,
        page_size: int = None,
        request_id: str = None,
        search_task_info_list: List[SearchTaskResponseBodySearchTaskInfoList] = None,
        success: bool = None,
        total: int = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.page_index = page_index
        self.page_size = page_size
        self.request_id = request_id
        self.search_task_info_list = search_task_info_list
        self.success = success
        self.total = total

    def validate(self):
        if self.search_task_info_list:
            for k in self.search_task_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SearchTaskInfoList'] = []
        if self.search_task_info_list is not None:
            for k in self.search_task_info_list:
                result['SearchTaskInfoList'].append(k.to_map() if k else None)
        if self.success is not None:
            result['Success'] = self.success
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.search_task_info_list = []
        if m.get('SearchTaskInfoList') is not None:
            for k in m.get('SearchTaskInfoList'):
                temp_model = SearchTaskResponseBodySearchTaskInfoList()
                self.search_task_info_list.append(temp_model.from_map(k))
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class SearchTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SearchTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SearchTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartJobRequest(TeaModel):
    def __init__(
        self,
        calling_number: List[str] = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_json: str = None,
        scenario_id: str = None,
        script_id: str = None,
    ):
        self.calling_number = calling_number
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        # This parameter is required.
        self.job_json = job_json
        self.scenario_id = scenario_id
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_json is not None:
            result['JobJson'] = self.job_json
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobJson') is not None:
            self.job_json = m.get('JobJson')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class StartJobResponseBodyCallIds(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBodyTaskIds(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBody(TeaModel):
    def __init__(
        self,
        call_ids: List[StartJobResponseBodyCallIds] = None,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        task_ids: List[StartJobResponseBodyTaskIds] = None,
    ):
        self.call_ids = call_ids
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.task_ids = task_ids

    def validate(self):
        if self.call_ids:
            for k in self.call_ids:
                if k:
                    k.validate()
        if self.task_ids:
            for k in self.task_ids:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['CallIds'] = []
        if self.call_ids is not None:
            for k in self.call_ids:
                result['CallIds'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        result['TaskIds'] = []
        if self.task_ids is not None:
            for k in self.task_ids:
                result['TaskIds'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_ids = []
        if m.get('CallIds') is not None:
            for k in m.get('CallIds'):
                temp_model = StartJobResponseBodyCallIds()
                self.call_ids.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        self.task_ids = []
        if m.get('TaskIds') is not None:
            for k in m.get('TaskIds'):
                temp_model = StartJobResponseBodyTaskIds()
                self.task_ids.append(temp_model.from_map(k))
        return self


class StartJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StartJobResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StartJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitBatchJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class SubmitBatchJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitBatchJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SubmitBatchJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        merged_recording: str = None,
        resource_recording: str = None,
        task_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.merged_recording = merged_recording
        self.resource_recording = resource_recording
        # This parameter is required.
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.merged_recording is not None:
            result['MergedRecording'] = self.merged_recording
        if self.resource_recording is not None:
            result['ResourceRecording'] = self.resource_recording
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MergedRecording') is not None:
            self.merged_recording = m.get('MergedRecording')
        if m.get('ResourceRecording') is not None:
            self.resource_recording = m.get('ResourceRecording')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class SubmitRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SubmitRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitScriptReviewRequest(TeaModel):
    def __init__(
        self,
        description: str = None,
        from_: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.description = description
        self.from_ = from_
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.from_ is not None:
            result['From'] = self.from_
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class SubmitScriptReviewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitScriptReviewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SubmitScriptReviewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SubmitScriptReviewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendCallRequest(TeaModel):
    def __init__(
        self,
        called_numbers: List[str] = None,
        group_id: str = None,
        instance_id: str = None,
    ):
        self.called_numbers = called_numbers
        self.group_id = group_id
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.called_numbers is not None:
            result['CalledNumbers'] = self.called_numbers
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CalledNumbers') is not None:
            self.called_numbers = m.get('CalledNumbers')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SuspendCallResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendCallResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendCallResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendCallWithFileRequest(TeaModel):
    def __init__(
        self,
        file_path: str = None,
        group_id: str = None,
        instance_id: str = None,
    ):
        self.file_path = file_path
        self.group_id = group_id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class SuspendCallWithFileResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendCallWithFileResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendCallWithFileResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendCallWithFileResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendJobsRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        instance_id: str = None,
        job_group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
        scenario_id: str = None,
    ):
        # This parameter is required.
        self.all = all
        # This parameter is required.
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class SuspendJobsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SuspendJobsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SuspendJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesRequest(TeaModel):
    def __init__(
        self,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag: List[TagResourcesRequestTag] = None,
    ):
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        # This parameter is required.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TaskPreparingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_owner_id: int = None,
        job_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        self.instance_owner_id = instance_owner_id
        # This parameter is required.
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class TaskPreparingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        task_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class TaskPreparingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TaskPreparingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TaskPreparingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TerminateCallRequest(TeaModel):
    def __init__(
        self,
        call_id: str = None,
        instance_id: str = None,
    ):
        # This parameter is required.
        self.call_id = call_id
        # This parameter is required.
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class TerminateCallResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TerminateCallResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TerminateCallResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TerminateCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_type: str = None,
        tag_key: List[str] = None,
    ):
        self.all = all
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag_key = tag_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadScriptRecordingRequest(TeaModel):
    def __init__(
        self,
        content: str = None,
        file_id: str = None,
        file_name: str = None,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.content = content
        # This parameter is required.
        self.file_id = file_id
        # This parameter is required.
        self.file_name = file_name
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.file_id is not None:
            result['FileId'] = self.file_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class UploadScriptRecordingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        uuid: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.uuid = uuid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.uuid is not None:
            result['Uuid'] = self.uuid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Uuid') is not None:
            self.uuid = m.get('Uuid')
        return self


class UploadScriptRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UploadScriptRecordingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadScriptRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WithdrawScriptReviewRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        script_id: str = None,
    ):
        # This parameter is required.
        self.instance_id = instance_id
        # This parameter is required.
        self.script_id = script_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class WithdrawScriptReviewResponseBodyScript(TeaModel):
    def __init__(
        self,
        debug_status: str = None,
        industry: str = None,
        is_debug_drafted: bool = None,
        is_drafted: bool = None,
        scene: str = None,
        script_description: str = None,
        script_id: str = None,
        script_name: str = None,
        status: str = None,
        update_time: int = None,
    ):
        self.debug_status = debug_status
        self.industry = industry
        self.is_debug_drafted = is_debug_drafted
        self.is_drafted = is_drafted
        self.scene = scene
        self.script_description = script_description
        self.script_id = script_id
        self.script_name = script_name
        self.status = status
        self.update_time = update_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.debug_status is not None:
            result['DebugStatus'] = self.debug_status
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.is_debug_drafted is not None:
            result['IsDebugDrafted'] = self.is_debug_drafted
        if self.is_drafted is not None:
            result['IsDrafted'] = self.is_drafted
        if self.scene is not None:
            result['Scene'] = self.scene
        if self.script_description is not None:
            result['ScriptDescription'] = self.script_description
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_name is not None:
            result['ScriptName'] = self.script_name
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DebugStatus') is not None:
            self.debug_status = m.get('DebugStatus')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('IsDebugDrafted') is not None:
            self.is_debug_drafted = m.get('IsDebugDrafted')
        if m.get('IsDrafted') is not None:
            self.is_drafted = m.get('IsDrafted')
        if m.get('Scene') is not None:
            self.scene = m.get('Scene')
        if m.get('ScriptDescription') is not None:
            self.script_description = m.get('ScriptDescription')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptName') is not None:
            self.script_name = m.get('ScriptName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class WithdrawScriptReviewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        script: WithdrawScriptReviewResponseBodyScript = None,
        success: bool = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.script = script
        self.success = success

    def validate(self):
        if self.script:
            self.script.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.script is not None:
            result['Script'] = self.script.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Script') is not None:
            temp_model = WithdrawScriptReviewResponseBodyScript()
            self.script = temp_model.from_map(m['Script'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class WithdrawScriptReviewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: WithdrawScriptReviewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WithdrawScriptReviewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


