# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from typing import Dict
from Tea.core import TeaCore

from alibabacloud_tea_openapi.client import Client as OpenApiClient
from alibabacloud_tea_openapi import models as open_api_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_endpoint_util.client import Client as EndpointUtilClient
from alibabacloud_xtee20210910 import models as xtee_20210910_models
from alibabacloud_tea_util import models as util_models
from alibabacloud_openapi_util.client import Client as OpenApiUtilClient


class Client(OpenApiClient):
    """
    *\
    """
    def __init__(
        self, 
        config: open_api_models.Config,
    ):
        super().__init__(config)
        self._endpoint_rule = ''
        self.check_config(config)
        self._endpoint = self.get_endpoint('xtee', self._region_id, self._endpoint_rule, self._network, self._suffix, self._endpoint_map, self._endpoint)

    def get_endpoint(
        self,
        product_id: str,
        region_id: str,
        endpoint_rule: str,
        network: str,
        suffix: str,
        endpoint_map: Dict[str, str],
        endpoint: str,
    ) -> str:
        if not UtilClient.empty(endpoint):
            return endpoint
        if not UtilClient.is_unset(endpoint_map) and not UtilClient.empty(endpoint_map.get(region_id)):
            return endpoint_map.get(region_id)
        return EndpointUtilClient.get_endpoint_rules(product_id, region_id, endpoint_rule, network, suffix)

    def add_sample_data_by_csv_with_options(
        self,
        request: xtee_20210910_models.AddSampleDataByCsvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.AddSampleDataByCsvResponse:
        """
        @summary Add Sample Data via CSV
        
        @param request: AddSampleDataByCsvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSampleDataByCsvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_uuid):
            query['sampleBatchUuid'] = request.sample_batch_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSampleDataByCsv',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.AddSampleDataByCsvResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_sample_data_by_csv_with_options_async(
        self,
        request: xtee_20210910_models.AddSampleDataByCsvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.AddSampleDataByCsvResponse:
        """
        @summary Add Sample Data via CSV
        
        @param request: AddSampleDataByCsvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSampleDataByCsvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_uuid):
            query['sampleBatchUuid'] = request.sample_batch_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSampleDataByCsv',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.AddSampleDataByCsvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_sample_data_by_csv(
        self,
        request: xtee_20210910_models.AddSampleDataByCsvRequest,
    ) -> xtee_20210910_models.AddSampleDataByCsvResponse:
        """
        @summary Add Sample Data via CSV
        
        @param request: AddSampleDataByCsvRequest
        @return: AddSampleDataByCsvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_sample_data_by_csv_with_options(request, runtime)

    async def add_sample_data_by_csv_async(
        self,
        request: xtee_20210910_models.AddSampleDataByCsvRequest,
    ) -> xtee_20210910_models.AddSampleDataByCsvResponse:
        """
        @summary Add Sample Data via CSV
        
        @param request: AddSampleDataByCsvRequest
        @return: AddSampleDataByCsvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_sample_data_by_csv_with_options_async(request, runtime)

    def add_sample_data_by_text_with_options(
        self,
        request: xtee_20210910_models.AddSampleDataByTextRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.AddSampleDataByTextResponse:
        """
        @summary Add list data through a text box for samples
        
        @param request: AddSampleDataByTextRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSampleDataByTextResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_uuid):
            query['sampleBatchUuid'] = request.sample_batch_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSampleDataByText',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.AddSampleDataByTextResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_sample_data_by_text_with_options_async(
        self,
        request: xtee_20210910_models.AddSampleDataByTextRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.AddSampleDataByTextResponse:
        """
        @summary Add list data through a text box for samples
        
        @param request: AddSampleDataByTextRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSampleDataByTextResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_uuid):
            query['sampleBatchUuid'] = request.sample_batch_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSampleDataByText',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.AddSampleDataByTextResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_sample_data_by_text(
        self,
        request: xtee_20210910_models.AddSampleDataByTextRequest,
    ) -> xtee_20210910_models.AddSampleDataByTextResponse:
        """
        @summary Add list data through a text box for samples
        
        @param request: AddSampleDataByTextRequest
        @return: AddSampleDataByTextResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_sample_data_by_text_with_options(request, runtime)

    async def add_sample_data_by_text_async(
        self,
        request: xtee_20210910_models.AddSampleDataByTextRequest,
    ) -> xtee_20210910_models.AddSampleDataByTextResponse:
        """
        @summary Add list data through a text box for samples
        
        @param request: AddSampleDataByTextRequest
        @return: AddSampleDataByTextResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_sample_data_by_text_with_options_async(request, runtime)

    def batch_delete_sample_data_with_options(
        self,
        request: xtee_20210910_models.BatchDeleteSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.BatchDeleteSampleDataResponse:
        """
        @summary Batch Delete Sample List Data
        
        @param request: BatchDeleteSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.uuids):
            query['uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.BatchDeleteSampleDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_delete_sample_data_with_options_async(
        self,
        request: xtee_20210910_models.BatchDeleteSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.BatchDeleteSampleDataResponse:
        """
        @summary Batch Delete Sample List Data
        
        @param request: BatchDeleteSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.uuids):
            query['uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.BatchDeleteSampleDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_delete_sample_data(
        self,
        request: xtee_20210910_models.BatchDeleteSampleDataRequest,
    ) -> xtee_20210910_models.BatchDeleteSampleDataResponse:
        """
        @summary Batch Delete Sample List Data
        
        @param request: BatchDeleteSampleDataRequest
        @return: BatchDeleteSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_delete_sample_data_with_options(request, runtime)

    async def batch_delete_sample_data_async(
        self,
        request: xtee_20210910_models.BatchDeleteSampleDataRequest,
    ) -> xtee_20210910_models.BatchDeleteSampleDataResponse:
        """
        @summary Batch Delete Sample List Data
        
        @param request: BatchDeleteSampleDataRequest
        @return: BatchDeleteSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_delete_sample_data_with_options_async(request, runtime)

    def bind_variable_with_options(
        self,
        request: xtee_20210910_models.BindVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.BindVariableResponse:
        """
        @summary Variable binding operation
        
        @param request: BindVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.define_id):
            query['defineId'] = request.define_id
        if not UtilClient.is_unset(request.define_ids):
            query['defineIds'] = request.define_ids
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.exception_value):
            query['exceptionValue'] = request.exception_value
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.output_field):
            query['outputField'] = request.output_field
        if not UtilClient.is_unset(request.output_type):
            query['outputType'] = request.output_type
        if not UtilClient.is_unset(request.params):
            query['params'] = request.params
        if not UtilClient.is_unset(request.params_list):
            query['paramsList'] = request.params_list
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source_type):
            query['sourceType'] = request.source_type
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.BindVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def bind_variable_with_options_async(
        self,
        request: xtee_20210910_models.BindVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.BindVariableResponse:
        """
        @summary Variable binding operation
        
        @param request: BindVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.define_id):
            query['defineId'] = request.define_id
        if not UtilClient.is_unset(request.define_ids):
            query['defineIds'] = request.define_ids
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.exception_value):
            query['exceptionValue'] = request.exception_value
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.output_field):
            query['outputField'] = request.output_field
        if not UtilClient.is_unset(request.output_type):
            query['outputType'] = request.output_type
        if not UtilClient.is_unset(request.params):
            query['params'] = request.params
        if not UtilClient.is_unset(request.params_list):
            query['paramsList'] = request.params_list
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source_type):
            query['sourceType'] = request.source_type
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.BindVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def bind_variable(
        self,
        request: xtee_20210910_models.BindVariableRequest,
    ) -> xtee_20210910_models.BindVariableResponse:
        """
        @summary Variable binding operation
        
        @param request: BindVariableRequest
        @return: BindVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.bind_variable_with_options(request, runtime)

    async def bind_variable_async(
        self,
        request: xtee_20210910_models.BindVariableRequest,
    ) -> xtee_20210910_models.BindVariableResponse:
        """
        @summary Variable binding operation
        
        @param request: BindVariableRequest
        @return: BindVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.bind_variable_with_options_async(request, runtime)

    def check_copy_rule_variable_with_options(
        self,
        request: xtee_20210910_models.CheckCopyRuleVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckCopyRuleVariableResponse:
        """
        @summary Policy Replication Lineage Check
        
        @param request: CheckCopyRuleVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckCopyRuleVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckCopyRuleVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckCopyRuleVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_copy_rule_variable_with_options_async(
        self,
        request: xtee_20210910_models.CheckCopyRuleVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckCopyRuleVariableResponse:
        """
        @summary Policy Replication Lineage Check
        
        @param request: CheckCopyRuleVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckCopyRuleVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckCopyRuleVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckCopyRuleVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_copy_rule_variable(
        self,
        request: xtee_20210910_models.CheckCopyRuleVariableRequest,
    ) -> xtee_20210910_models.CheckCopyRuleVariableResponse:
        """
        @summary Policy Replication Lineage Check
        
        @param request: CheckCopyRuleVariableRequest
        @return: CheckCopyRuleVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_copy_rule_variable_with_options(request, runtime)

    async def check_copy_rule_variable_async(
        self,
        request: xtee_20210910_models.CheckCopyRuleVariableRequest,
    ) -> xtee_20210910_models.CheckCopyRuleVariableResponse:
        """
        @summary Policy Replication Lineage Check
        
        @param request: CheckCopyRuleVariableRequest
        @return: CheckCopyRuleVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_copy_rule_variable_with_options_async(request, runtime)

    def check_cust_variable_limit_with_options(
        self,
        request: xtee_20210910_models.CheckCustVariableLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckCustVariableLimitResponse:
        """
        @summary Check if the cumulative number of variables exceeds the limit
        
        @param request: CheckCustVariableLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckCustVariableLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckCustVariableLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckCustVariableLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_cust_variable_limit_with_options_async(
        self,
        request: xtee_20210910_models.CheckCustVariableLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckCustVariableLimitResponse:
        """
        @summary Check if the cumulative number of variables exceeds the limit
        
        @param request: CheckCustVariableLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckCustVariableLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckCustVariableLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckCustVariableLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_cust_variable_limit(
        self,
        request: xtee_20210910_models.CheckCustVariableLimitRequest,
    ) -> xtee_20210910_models.CheckCustVariableLimitResponse:
        """
        @summary Check if the cumulative number of variables exceeds the limit
        
        @param request: CheckCustVariableLimitRequest
        @return: CheckCustVariableLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_cust_variable_limit_with_options(request, runtime)

    async def check_cust_variable_limit_async(
        self,
        request: xtee_20210910_models.CheckCustVariableLimitRequest,
    ) -> xtee_20210910_models.CheckCustVariableLimitResponse:
        """
        @summary Check if the cumulative number of variables exceeds the limit
        
        @param request: CheckCustVariableLimitRequest
        @return: CheckCustVariableLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_cust_variable_limit_with_options_async(request, runtime)

    def check_expression_variable_limit_with_options(
        self,
        request: xtee_20210910_models.CheckExpressionVariableLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckExpressionVariableLimitResponse:
        """
        @summary Check if Creating Variables Exceeds the Limit
        
        @param request: CheckExpressionVariableLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckExpressionVariableLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckExpressionVariableLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckExpressionVariableLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_expression_variable_limit_with_options_async(
        self,
        request: xtee_20210910_models.CheckExpressionVariableLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckExpressionVariableLimitResponse:
        """
        @summary Check if Creating Variables Exceeds the Limit
        
        @param request: CheckExpressionVariableLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckExpressionVariableLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckExpressionVariableLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckExpressionVariableLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_expression_variable_limit(
        self,
        request: xtee_20210910_models.CheckExpressionVariableLimitRequest,
    ) -> xtee_20210910_models.CheckExpressionVariableLimitResponse:
        """
        @summary Check if Creating Variables Exceeds the Limit
        
        @param request: CheckExpressionVariableLimitRequest
        @return: CheckExpressionVariableLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_expression_variable_limit_with_options(request, runtime)

    async def check_expression_variable_limit_async(
        self,
        request: xtee_20210910_models.CheckExpressionVariableLimitRequest,
    ) -> xtee_20210910_models.CheckExpressionVariableLimitResponse:
        """
        @summary Check if Creating Variables Exceeds the Limit
        
        @param request: CheckExpressionVariableLimitRequest
        @return: CheckExpressionVariableLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_expression_variable_limit_with_options_async(request, runtime)

    def check_field_limit_with_options(
        self,
        request: xtee_20210910_models.CheckFieldLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckFieldLimitResponse:
        """
        @summary Check if the number of fields exceeds the limit
        
        @param request: CheckFieldLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckFieldLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckFieldLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckFieldLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_field_limit_with_options_async(
        self,
        request: xtee_20210910_models.CheckFieldLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckFieldLimitResponse:
        """
        @summary Check if the number of fields exceeds the limit
        
        @param request: CheckFieldLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckFieldLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckFieldLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckFieldLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_field_limit(
        self,
        request: xtee_20210910_models.CheckFieldLimitRequest,
    ) -> xtee_20210910_models.CheckFieldLimitResponse:
        """
        @summary Check if the number of fields exceeds the limit
        
        @param request: CheckFieldLimitRequest
        @return: CheckFieldLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_field_limit_with_options(request, runtime)

    async def check_field_limit_async(
        self,
        request: xtee_20210910_models.CheckFieldLimitRequest,
    ) -> xtee_20210910_models.CheckFieldLimitResponse:
        """
        @summary Check if the number of fields exceeds the limit
        
        @param request: CheckFieldLimitRequest
        @return: CheckFieldLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_field_limit_with_options_async(request, runtime)

    def check_usage_variable_with_options(
        self,
        request: xtee_20210910_models.CheckUsageVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckUsageVariableResponse:
        """
        @summary Validate Variable Reference
        
        @param request: CheckUsageVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUsageVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUsageVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckUsageVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_usage_variable_with_options_async(
        self,
        request: xtee_20210910_models.CheckUsageVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CheckUsageVariableResponse:
        """
        @summary Validate Variable Reference
        
        @param request: CheckUsageVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUsageVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUsageVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CheckUsageVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_usage_variable(
        self,
        request: xtee_20210910_models.CheckUsageVariableRequest,
    ) -> xtee_20210910_models.CheckUsageVariableResponse:
        """
        @summary Validate Variable Reference
        
        @param request: CheckUsageVariableRequest
        @return: CheckUsageVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_usage_variable_with_options(request, runtime)

    async def check_usage_variable_async(
        self,
        request: xtee_20210910_models.CheckUsageVariableRequest,
    ) -> xtee_20210910_models.CheckUsageVariableResponse:
        """
        @summary Validate Variable Reference
        
        @param request: CheckUsageVariableRequest
        @return: CheckUsageVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_usage_variable_with_options_async(request, runtime)

    def compare_copy_rule_variable_with_options(
        self,
        request: xtee_20210910_models.CompareCopyRuleVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CompareCopyRuleVariableResponse:
        """
        @summary Policy Comparison
        
        @param request: CompareCopyRuleVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CompareCopyRuleVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CompareCopyRuleVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CompareCopyRuleVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def compare_copy_rule_variable_with_options_async(
        self,
        request: xtee_20210910_models.CompareCopyRuleVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CompareCopyRuleVariableResponse:
        """
        @summary Policy Comparison
        
        @param request: CompareCopyRuleVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CompareCopyRuleVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CompareCopyRuleVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CompareCopyRuleVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def compare_copy_rule_variable(
        self,
        request: xtee_20210910_models.CompareCopyRuleVariableRequest,
    ) -> xtee_20210910_models.CompareCopyRuleVariableResponse:
        """
        @summary Policy Comparison
        
        @param request: CompareCopyRuleVariableRequest
        @return: CompareCopyRuleVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.compare_copy_rule_variable_with_options(request, runtime)

    async def compare_copy_rule_variable_async(
        self,
        request: xtee_20210910_models.CompareCopyRuleVariableRequest,
    ) -> xtee_20210910_models.CompareCopyRuleVariableResponse:
        """
        @summary Policy Comparison
        
        @param request: CompareCopyRuleVariableRequest
        @return: CompareCopyRuleVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.compare_copy_rule_variable_with_options_async(request, runtime)

    def create_analysis_condition_favorite_with_options(
        self,
        request: xtee_20210910_models.CreateAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAnalysisConditionFavoriteResponse:
        """
        @summary Add Query Conditions
        
        @param request: CreateAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAnalysisConditionFavoriteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_analysis_condition_favorite_with_options_async(
        self,
        request: xtee_20210910_models.CreateAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAnalysisConditionFavoriteResponse:
        """
        @summary Add Query Conditions
        
        @param request: CreateAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAnalysisConditionFavoriteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_analysis_condition_favorite(
        self,
        request: xtee_20210910_models.CreateAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.CreateAnalysisConditionFavoriteResponse:
        """
        @summary Add Query Conditions
        
        @param request: CreateAnalysisConditionFavoriteRequest
        @return: CreateAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_analysis_condition_favorite_with_options(request, runtime)

    async def create_analysis_condition_favorite_async(
        self,
        request: xtee_20210910_models.CreateAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.CreateAnalysisConditionFavoriteResponse:
        """
        @summary Add Query Conditions
        
        @param request: CreateAnalysisConditionFavoriteRequest
        @return: CreateAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_analysis_condition_favorite_with_options_async(request, runtime)

    def create_analysis_export_task_with_options(
        self,
        request: xtee_20210910_models.CreateAnalysisExportTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAnalysisExportTaskResponse:
        """
        @summary Create Export Task
        
        @param request: CreateAnalysisExportTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAnalysisExportTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.columns):
            query['columns'] = request.columns
        if not UtilClient.is_unset(request.conditions):
            query['conditions'] = request.conditions
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.file_format):
            query['fileFormat'] = request.file_format
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scope):
            query['scope'] = request.scope
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAnalysisExportTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAnalysisExportTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_analysis_export_task_with_options_async(
        self,
        request: xtee_20210910_models.CreateAnalysisExportTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAnalysisExportTaskResponse:
        """
        @summary Create Export Task
        
        @param request: CreateAnalysisExportTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAnalysisExportTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.columns):
            query['columns'] = request.columns
        if not UtilClient.is_unset(request.conditions):
            query['conditions'] = request.conditions
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.file_format):
            query['fileFormat'] = request.file_format
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scope):
            query['scope'] = request.scope
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAnalysisExportTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAnalysisExportTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_analysis_export_task(
        self,
        request: xtee_20210910_models.CreateAnalysisExportTaskRequest,
    ) -> xtee_20210910_models.CreateAnalysisExportTaskResponse:
        """
        @summary Create Export Task
        
        @param request: CreateAnalysisExportTaskRequest
        @return: CreateAnalysisExportTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_analysis_export_task_with_options(request, runtime)

    async def create_analysis_export_task_async(
        self,
        request: xtee_20210910_models.CreateAnalysisExportTaskRequest,
    ) -> xtee_20210910_models.CreateAnalysisExportTaskResponse:
        """
        @summary Create Export Task
        
        @param request: CreateAnalysisExportTaskRequest
        @return: CreateAnalysisExportTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_analysis_export_task_with_options_async(request, runtime)

    def create_app_key_with_options(
        self,
        request: xtee_20210910_models.CreateAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAppKeyResponse:
        """
        @summary Create AppKey
        
        @param request: CreateAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAppKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_app_key_with_options_async(
        self,
        request: xtee_20210910_models.CreateAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateAppKeyResponse:
        """
        @summary Create AppKey
        
        @param request: CreateAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateAppKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_app_key(
        self,
        request: xtee_20210910_models.CreateAppKeyRequest,
    ) -> xtee_20210910_models.CreateAppKeyResponse:
        """
        @summary Create AppKey
        
        @param request: CreateAppKeyRequest
        @return: CreateAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_app_key_with_options(request, runtime)

    async def create_app_key_async(
        self,
        request: xtee_20210910_models.CreateAppKeyRequest,
    ) -> xtee_20210910_models.CreateAppKeyResponse:
        """
        @summary Create AppKey
        
        @param request: CreateAppKeyRequest
        @return: CreateAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_app_key_with_options_async(request, runtime)

    def create_cust_variable_with_options(
        self,
        request: xtee_20210910_models.CreateCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateCustVariableResponse:
        """
        @summary Create Accumulative Variable
        
        @param request: CreateCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.history_value_type):
            query['historyValueType'] = request.history_value_type
        if not UtilClient.is_unset(request.object):
            query['object'] = request.object
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.subject):
            query['subject'] = request.subject
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.tw_count):
            query['twCount'] = request.tw_count
        if not UtilClient.is_unset(request.velocity_fc):
            query['velocityFC'] = request.velocity_fc
        if not UtilClient.is_unset(request.velocity_tw):
            query['velocityTW'] = request.velocity_tw
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateCustVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_cust_variable_with_options_async(
        self,
        request: xtee_20210910_models.CreateCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateCustVariableResponse:
        """
        @summary Create Accumulative Variable
        
        @param request: CreateCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.history_value_type):
            query['historyValueType'] = request.history_value_type
        if not UtilClient.is_unset(request.object):
            query['object'] = request.object
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.subject):
            query['subject'] = request.subject
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.tw_count):
            query['twCount'] = request.tw_count
        if not UtilClient.is_unset(request.velocity_fc):
            query['velocityFC'] = request.velocity_fc
        if not UtilClient.is_unset(request.velocity_tw):
            query['velocityTW'] = request.velocity_tw
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateCustVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_cust_variable(
        self,
        request: xtee_20210910_models.CreateCustVariableRequest,
    ) -> xtee_20210910_models.CreateCustVariableResponse:
        """
        @summary Create Accumulative Variable
        
        @param request: CreateCustVariableRequest
        @return: CreateCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_cust_variable_with_options(request, runtime)

    async def create_cust_variable_async(
        self,
        request: xtee_20210910_models.CreateCustVariableRequest,
    ) -> xtee_20210910_models.CreateCustVariableResponse:
        """
        @summary Create Accumulative Variable
        
        @param request: CreateCustVariableRequest
        @return: CreateCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_cust_variable_with_options_async(request, runtime)

    def create_data_source_with_options(
        self,
        request: xtee_20210910_models.CreateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateDataSourceResponse:
        """
        @summary Add Data Source
        
        @param request: CreateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.oss_key):
            query['ossKey'] = request.oss_key
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_source_with_options_async(
        self,
        request: xtee_20210910_models.CreateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateDataSourceResponse:
        """
        @summary Add Data Source
        
        @param request: CreateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.oss_key):
            query['ossKey'] = request.oss_key
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_source(
        self,
        request: xtee_20210910_models.CreateDataSourceRequest,
    ) -> xtee_20210910_models.CreateDataSourceResponse:
        """
        @summary Add Data Source
        
        @param request: CreateDataSourceRequest
        @return: CreateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_source_with_options(request, runtime)

    async def create_data_source_async(
        self,
        request: xtee_20210910_models.CreateDataSourceRequest,
    ) -> xtee_20210910_models.CreateDataSourceResponse:
        """
        @summary Add Data Source
        
        @param request: CreateDataSourceRequest
        @return: CreateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_source_with_options_async(request, runtime)

    def create_event_with_options(
        self,
        request: xtee_20210910_models.CreateEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateEventResponse:
        """
        @summary Create Event
        
        @param request: CreateEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.input_fields_str):
            query['inputFieldsStr'] = request.input_fields_str
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.template_name):
            query['templateName'] = request.template_name
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_event_with_options_async(
        self,
        request: xtee_20210910_models.CreateEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateEventResponse:
        """
        @summary Create Event
        
        @param request: CreateEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.input_fields_str):
            query['inputFieldsStr'] = request.input_fields_str
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.template_name):
            query['templateName'] = request.template_name
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_event(
        self,
        request: xtee_20210910_models.CreateEventRequest,
    ) -> xtee_20210910_models.CreateEventResponse:
        """
        @summary Create Event
        
        @param request: CreateEventRequest
        @return: CreateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_event_with_options(request, runtime)

    async def create_event_async(
        self,
        request: xtee_20210910_models.CreateEventRequest,
    ) -> xtee_20210910_models.CreateEventResponse:
        """
        @summary Create Event
        
        @param request: CreateEventRequest
        @return: CreateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_event_with_options_async(request, runtime)

    def create_expression_variable_with_options(
        self,
        request: xtee_20210910_models.CreateExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateExpressionVariableResponse:
        """
        @summary Create Custom Variable
        
        @param request: CreateExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateExpressionVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_expression_variable_with_options_async(
        self,
        request: xtee_20210910_models.CreateExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateExpressionVariableResponse:
        """
        @summary Create Custom Variable
        
        @param request: CreateExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateExpressionVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_expression_variable(
        self,
        request: xtee_20210910_models.CreateExpressionVariableRequest,
    ) -> xtee_20210910_models.CreateExpressionVariableResponse:
        """
        @summary Create Custom Variable
        
        @param request: CreateExpressionVariableRequest
        @return: CreateExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_expression_variable_with_options(request, runtime)

    async def create_expression_variable_async(
        self,
        request: xtee_20210910_models.CreateExpressionVariableRequest,
    ) -> xtee_20210910_models.CreateExpressionVariableResponse:
        """
        @summary Create Custom Variable
        
        @param request: CreateExpressionVariableRequest
        @return: CreateExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_expression_variable_with_options_async(request, runtime)

    def create_field_with_options(
        self,
        request: xtee_20210910_models.CreateFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateFieldResponse:
        """
        @summary Add New Field
        
        @param request: CreateFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.enum_data):
            query['enumData'] = request.enum_data
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_field_with_options_async(
        self,
        request: xtee_20210910_models.CreateFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateFieldResponse:
        """
        @summary Add New Field
        
        @param request: CreateFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.enum_data):
            query['enumData'] = request.enum_data
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_field(
        self,
        request: xtee_20210910_models.CreateFieldRequest,
    ) -> xtee_20210910_models.CreateFieldResponse:
        """
        @summary Add New Field
        
        @param request: CreateFieldRequest
        @return: CreateFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_field_with_options(request, runtime)

    async def create_field_async(
        self,
        request: xtee_20210910_models.CreateFieldRequest,
    ) -> xtee_20210910_models.CreateFieldResponse:
        """
        @summary Add New Field
        
        @param request: CreateFieldRequest
        @return: CreateFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_field_with_options_async(request, runtime)

    def create_model_with_options(
        self,
        request: xtee_20210910_models.CreateModelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateModelResponse:
        """
        @summary Submit Task
        
        @param request: CreateModelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateModelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.buc_id):
            query['BucId'] = request.buc_id
        if not UtilClient.is_unset(request.counts):
            query['Counts'] = request.counts
        if not UtilClient.is_unset(request.file_md5):
            query['FileMD5'] = request.file_md5
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.model_scene):
            query['ModelScene'] = request.model_scene
        if not UtilClient.is_unset(request.parameter_num):
            query['ParameterNum'] = request.parameter_num
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.user_local_file_name):
            query['UserLocalFileName'] = request.user_local_file_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateModel',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateModelResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_model_with_options_async(
        self,
        request: xtee_20210910_models.CreateModelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateModelResponse:
        """
        @summary Submit Task
        
        @param request: CreateModelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateModelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.buc_id):
            query['BucId'] = request.buc_id
        if not UtilClient.is_unset(request.counts):
            query['Counts'] = request.counts
        if not UtilClient.is_unset(request.file_md5):
            query['FileMD5'] = request.file_md5
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.model_scene):
            query['ModelScene'] = request.model_scene
        if not UtilClient.is_unset(request.parameter_num):
            query['ParameterNum'] = request.parameter_num
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.user_local_file_name):
            query['UserLocalFileName'] = request.user_local_file_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateModel',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateModelResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_model(
        self,
        request: xtee_20210910_models.CreateModelRequest,
    ) -> xtee_20210910_models.CreateModelResponse:
        """
        @summary Submit Task
        
        @param request: CreateModelRequest
        @return: CreateModelResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_model_with_options(request, runtime)

    async def create_model_async(
        self,
        request: xtee_20210910_models.CreateModelRequest,
    ) -> xtee_20210910_models.CreateModelResponse:
        """
        @summary Submit Task
        
        @param request: CreateModelRequest
        @return: CreateModelResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_model_with_options_async(request, runtime)

    def create_poc_ev_with_options(
        self,
        request: xtee_20210910_models.CreatePocEvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreatePocEvResponse:
        """
        @summary Create POC
        
        @param request: CreatePocEvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePocEvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.date_format):
            query['DateFormat'] = request.date_format
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.service_code):
            query['ServiceCode'] = request.service_code
        if not UtilClient.is_unset(request.service_name):
            query['ServiceName'] = request.service_name
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreatePocEv',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreatePocEvResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_poc_ev_with_options_async(
        self,
        request: xtee_20210910_models.CreatePocEvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreatePocEvResponse:
        """
        @summary Create POC
        
        @param request: CreatePocEvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePocEvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.date_format):
            query['DateFormat'] = request.date_format
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.service_code):
            query['ServiceCode'] = request.service_code
        if not UtilClient.is_unset(request.service_name):
            query['ServiceName'] = request.service_name
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreatePocEv',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreatePocEvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_poc_ev(
        self,
        request: xtee_20210910_models.CreatePocEvRequest,
    ) -> xtee_20210910_models.CreatePocEvResponse:
        """
        @summary Create POC
        
        @param request: CreatePocEvRequest
        @return: CreatePocEvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_poc_ev_with_options(request, runtime)

    async def create_poc_ev_async(
        self,
        request: xtee_20210910_models.CreatePocEvRequest,
    ) -> xtee_20210910_models.CreatePocEvResponse:
        """
        @summary Create POC
        
        @param request: CreatePocEvRequest
        @return: CreatePocEvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_poc_ev_with_options_async(request, runtime)

    def create_query_variable_with_options(
        self,
        request: xtee_20210910_models.CreateQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateQueryVariableResponse:
        """
        @summary Add New Custom Query Variable
        
        @param request: CreateQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateQueryVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_query_variable_with_options_async(
        self,
        request: xtee_20210910_models.CreateQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateQueryVariableResponse:
        """
        @summary Add New Custom Query Variable
        
        @param request: CreateQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateQueryVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_query_variable(
        self,
        request: xtee_20210910_models.CreateQueryVariableRequest,
    ) -> xtee_20210910_models.CreateQueryVariableResponse:
        """
        @summary Add New Custom Query Variable
        
        @param request: CreateQueryVariableRequest
        @return: CreateQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_query_variable_with_options(request, runtime)

    async def create_query_variable_async(
        self,
        request: xtee_20210910_models.CreateQueryVariableRequest,
    ) -> xtee_20210910_models.CreateQueryVariableResponse:
        """
        @summary Add New Custom Query Variable
        
        @param request: CreateQueryVariableRequest
        @return: CreateQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_query_variable_with_options_async(request, runtime)

    def create_recommend_event_rule_with_options(
        self,
        request: xtee_20210910_models.CreateRecommendEventRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRecommendEventRuleResponse:
        """
        @summary Create Recommended Event Strategy
        
        @param request: CreateRecommendEventRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecommendEventRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.recommend_rule_ids_str):
            query['recommendRuleIdsStr'] = request.recommend_rule_ids_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecommendEventRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRecommendEventRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_recommend_event_rule_with_options_async(
        self,
        request: xtee_20210910_models.CreateRecommendEventRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRecommendEventRuleResponse:
        """
        @summary Create Recommended Event Strategy
        
        @param request: CreateRecommendEventRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecommendEventRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.recommend_rule_ids_str):
            query['recommendRuleIdsStr'] = request.recommend_rule_ids_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecommendEventRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRecommendEventRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_recommend_event_rule(
        self,
        request: xtee_20210910_models.CreateRecommendEventRuleRequest,
    ) -> xtee_20210910_models.CreateRecommendEventRuleResponse:
        """
        @summary Create Recommended Event Strategy
        
        @param request: CreateRecommendEventRuleRequest
        @return: CreateRecommendEventRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_recommend_event_rule_with_options(request, runtime)

    async def create_recommend_event_rule_async(
        self,
        request: xtee_20210910_models.CreateRecommendEventRuleRequest,
    ) -> xtee_20210910_models.CreateRecommendEventRuleResponse:
        """
        @summary Create Recommended Event Strategy
        
        @param request: CreateRecommendEventRuleRequest
        @return: CreateRecommendEventRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_recommend_event_rule_with_options_async(request, runtime)

    def create_recommend_task_with_options(
        self,
        request: xtee_20210910_models.CreateRecommendTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRecommendTaskResponse:
        """
        @summary Create Recommendation Task
        
        @param request: CreateRecommendTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecommendTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        if not UtilClient.is_unset(request.variables_str):
            query['variablesStr'] = request.variables_str
        if not UtilClient.is_unset(request.velocities_str):
            query['velocitiesStr'] = request.velocities_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecommendTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRecommendTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_recommend_task_with_options_async(
        self,
        request: xtee_20210910_models.CreateRecommendTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRecommendTaskResponse:
        """
        @summary Create Recommendation Task
        
        @param request: CreateRecommendTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecommendTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        if not UtilClient.is_unset(request.variables_str):
            query['variablesStr'] = request.variables_str
        if not UtilClient.is_unset(request.velocities_str):
            query['velocitiesStr'] = request.velocities_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecommendTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRecommendTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_recommend_task(
        self,
        request: xtee_20210910_models.CreateRecommendTaskRequest,
    ) -> xtee_20210910_models.CreateRecommendTaskResponse:
        """
        @summary Create Recommendation Task
        
        @param request: CreateRecommendTaskRequest
        @return: CreateRecommendTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_recommend_task_with_options(request, runtime)

    async def create_recommend_task_async(
        self,
        request: xtee_20210910_models.CreateRecommendTaskRequest,
    ) -> xtee_20210910_models.CreateRecommendTaskResponse:
        """
        @summary Create Recommendation Task
        
        @param request: CreateRecommendTaskRequest
        @return: CreateRecommendTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_recommend_task_with_options_async(request, runtime)

    def create_rule_with_options(
        self,
        request: xtee_20210910_models.CreateRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRuleResponse:
        """
        @summary Create Policy & Version
        
        @param request: CreateRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.logic_expression):
            query['logicExpression'] = request.logic_expression
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_body):
            query['ruleBody'] = request.rule_body
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.rule_type):
            query['ruleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_rule_with_options_async(
        self,
        request: xtee_20210910_models.CreateRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateRuleResponse:
        """
        @summary Create Policy & Version
        
        @param request: CreateRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.logic_expression):
            query['logicExpression'] = request.logic_expression
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_body):
            query['ruleBody'] = request.rule_body
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.rule_type):
            query['ruleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_rule(
        self,
        request: xtee_20210910_models.CreateRuleRequest,
    ) -> xtee_20210910_models.CreateRuleResponse:
        """
        @summary Create Policy & Version
        
        @param request: CreateRuleRequest
        @return: CreateRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_rule_with_options(request, runtime)

    async def create_rule_async(
        self,
        request: xtee_20210910_models.CreateRuleRequest,
    ) -> xtee_20210910_models.CreateRuleResponse:
        """
        @summary Create Policy & Version
        
        @param request: CreateRuleRequest
        @return: CreateRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_rule_with_options_async(request, runtime)

    def create_sample_with_options(
        self,
        request: xtee_20210910_models.CreateSampleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleResponse:
        """
        @summary Add Sample
        
        @param request: CreateSampleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.client_file_name):
            query['clientFileName'] = request.client_file_name
        if not UtilClient.is_unset(request.client_path):
            query['clientPath'] = request.client_path
        if not UtilClient.is_unset(request.file_type):
            query['fileType'] = request.file_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_tag):
            query['sampleTag'] = request.sample_tag
        if not UtilClient.is_unset(request.sample_type):
            query['sampleType'] = request.sample_type
        if not UtilClient.is_unset(request.sample_values):
            query['sampleValues'] = request.sample_values
        if not UtilClient.is_unset(request.upload_type):
            query['uploadType'] = request.upload_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSample',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sample_with_options_async(
        self,
        request: xtee_20210910_models.CreateSampleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleResponse:
        """
        @summary Add Sample
        
        @param request: CreateSampleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.client_file_name):
            query['clientFileName'] = request.client_file_name
        if not UtilClient.is_unset(request.client_path):
            query['clientPath'] = request.client_path
        if not UtilClient.is_unset(request.file_type):
            query['fileType'] = request.file_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_tag):
            query['sampleTag'] = request.sample_tag
        if not UtilClient.is_unset(request.sample_type):
            query['sampleType'] = request.sample_type
        if not UtilClient.is_unset(request.sample_values):
            query['sampleValues'] = request.sample_values
        if not UtilClient.is_unset(request.upload_type):
            query['uploadType'] = request.upload_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSample',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sample(
        self,
        request: xtee_20210910_models.CreateSampleRequest,
    ) -> xtee_20210910_models.CreateSampleResponse:
        """
        @summary Add Sample
        
        @param request: CreateSampleRequest
        @return: CreateSampleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_sample_with_options(request, runtime)

    async def create_sample_async(
        self,
        request: xtee_20210910_models.CreateSampleRequest,
    ) -> xtee_20210910_models.CreateSampleResponse:
        """
        @summary Add Sample
        
        @param request: CreateSampleRequest
        @return: CreateSampleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_sample_with_options_async(request, runtime)

    def create_sample_api_with_options(
        self,
        request: xtee_20210910_models.CreateSampleApiRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleApiResponse:
        """
        @summary User-level Single API to Create Sample Batches
        
        @param request: CreateSampleApiRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleApiResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_type):
            query['DataType'] = request.data_type
        if not UtilClient.is_unset(request.data_value):
            query['DataValue'] = request.data_value
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_type):
            query['SampleBatchType'] = request.sample_batch_type
        if not UtilClient.is_unset(request.service_list):
            query['ServiceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleApi',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleApiResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sample_api_with_options_async(
        self,
        request: xtee_20210910_models.CreateSampleApiRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleApiResponse:
        """
        @summary User-level Single API to Create Sample Batches
        
        @param request: CreateSampleApiRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleApiResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_type):
            query['DataType'] = request.data_type
        if not UtilClient.is_unset(request.data_value):
            query['DataValue'] = request.data_value
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_type):
            query['SampleBatchType'] = request.sample_batch_type
        if not UtilClient.is_unset(request.service_list):
            query['ServiceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleApi',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleApiResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sample_api(
        self,
        request: xtee_20210910_models.CreateSampleApiRequest,
    ) -> xtee_20210910_models.CreateSampleApiResponse:
        """
        @summary User-level Single API to Create Sample Batches
        
        @param request: CreateSampleApiRequest
        @return: CreateSampleApiResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_sample_api_with_options(request, runtime)

    async def create_sample_api_async(
        self,
        request: xtee_20210910_models.CreateSampleApiRequest,
    ) -> xtee_20210910_models.CreateSampleApiResponse:
        """
        @summary User-level Single API to Create Sample Batches
        
        @param request: CreateSampleApiRequest
        @return: CreateSampleApiResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_sample_api_with_options_async(request, runtime)

    def create_sample_batch_with_options(
        self,
        request: xtee_20210910_models.CreateSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleBatchResponse:
        """
        @summary Create Sample Batch
        
        @param request: CreateSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.data_type):
            query['dataType'] = request.data_type
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_type):
            query['sampleBatchType'] = request.sample_batch_type
        if not UtilClient.is_unset(request.service_list):
            query['serviceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sample_batch_with_options_async(
        self,
        request: xtee_20210910_models.CreateSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleBatchResponse:
        """
        @summary Create Sample Batch
        
        @param request: CreateSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.data_type):
            query['dataType'] = request.data_type
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_batch_type):
            query['sampleBatchType'] = request.sample_batch_type
        if not UtilClient.is_unset(request.service_list):
            query['serviceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sample_batch(
        self,
        request: xtee_20210910_models.CreateSampleBatchRequest,
    ) -> xtee_20210910_models.CreateSampleBatchResponse:
        """
        @summary Create Sample Batch
        
        @param request: CreateSampleBatchRequest
        @return: CreateSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_sample_batch_with_options(request, runtime)

    async def create_sample_batch_async(
        self,
        request: xtee_20210910_models.CreateSampleBatchRequest,
    ) -> xtee_20210910_models.CreateSampleBatchResponse:
        """
        @summary Create Sample Batch
        
        @param request: CreateSampleBatchRequest
        @return: CreateSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_sample_batch_with_options_async(request, runtime)

    def create_sample_data_with_options(
        self,
        request: xtee_20210910_models.CreateSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleDataResponse:
        """
        @summary Create Sample Data
        
        @param request: CreateSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.encrypt_type):
            query['encryptType'] = request.encrypt_type
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.risk_value):
            query['riskValue'] = request.risk_value
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        if not UtilClient.is_unset(request.store_path):
            query['storePath'] = request.store_path
        if not UtilClient.is_unset(request.store_type):
            query['storeType'] = request.store_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sample_data_with_options_async(
        self,
        request: xtee_20210910_models.CreateSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSampleDataResponse:
        """
        @summary Create Sample Data
        
        @param request: CreateSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.encrypt_type):
            query['encryptType'] = request.encrypt_type
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.risk_value):
            query['riskValue'] = request.risk_value
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        if not UtilClient.is_unset(request.store_path):
            query['storePath'] = request.store_path
        if not UtilClient.is_unset(request.store_type):
            query['storeType'] = request.store_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSampleDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sample_data(
        self,
        request: xtee_20210910_models.CreateSampleDataRequest,
    ) -> xtee_20210910_models.CreateSampleDataResponse:
        """
        @summary Create Sample Data
        
        @param request: CreateSampleDataRequest
        @return: CreateSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_sample_data_with_options(request, runtime)

    async def create_sample_data_async(
        self,
        request: xtee_20210910_models.CreateSampleDataRequest,
    ) -> xtee_20210910_models.CreateSampleDataResponse:
        """
        @summary Create Sample Data
        
        @param request: CreateSampleDataRequest
        @return: CreateSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_sample_data_with_options_async(request, runtime)

    def create_simulation_task_with_options(
        self,
        request: xtee_20210910_models.CreateSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSimulationTaskResponse:
        """
        @summary Create Task
        
        @param request: CreateSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_config):
            query['dataSourceConfig'] = request.data_source_config
        if not UtilClient.is_unset(request.data_source_type):
            query['dataSourceType'] = request.data_source_type
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.filters_str):
            query['filtersStr'] = request.filters_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rules_str):
            query['rulesStr'] = request.rules_str
        if not UtilClient.is_unset(request.run_task):
            query['runTask'] = request.run_task
        if not UtilClient.is_unset(request.start_time):
            query['startTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['taskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSimulationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_simulation_task_with_options_async(
        self,
        request: xtee_20210910_models.CreateSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.CreateSimulationTaskResponse:
        """
        @summary Create Task
        
        @param request: CreateSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_config):
            query['dataSourceConfig'] = request.data_source_config
        if not UtilClient.is_unset(request.data_source_type):
            query['dataSourceType'] = request.data_source_type
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.filters_str):
            query['filtersStr'] = request.filters_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rules_str):
            query['rulesStr'] = request.rules_str
        if not UtilClient.is_unset(request.run_task):
            query['runTask'] = request.run_task
        if not UtilClient.is_unset(request.start_time):
            query['startTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['taskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.CreateSimulationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_simulation_task(
        self,
        request: xtee_20210910_models.CreateSimulationTaskRequest,
    ) -> xtee_20210910_models.CreateSimulationTaskResponse:
        """
        @summary Create Task
        
        @param request: CreateSimulationTaskRequest
        @return: CreateSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_simulation_task_with_options(request, runtime)

    async def create_simulation_task_async(
        self,
        request: xtee_20210910_models.CreateSimulationTaskRequest,
    ) -> xtee_20210910_models.CreateSimulationTaskResponse:
        """
        @summary Create Task
        
        @param request: CreateSimulationTaskRequest
        @return: CreateSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_simulation_task_with_options_async(request, runtime)

    def deep_copy_rule_with_options(
        self,
        request: xtee_20210910_models.DeepCopyRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeepCopyRuleResponse:
        """
        @summary Policy Replication
        
        @param request: DeepCopyRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeepCopyRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.cust_insert_info):
            query['CustInsertInfo'] = request.cust_insert_info
        if not UtilClient.is_unset(request.cust_write_info):
            query['CustWriteInfo'] = request.cust_write_info
        if not UtilClient.is_unset(request.expression_variable_info):
            query['ExpressionVariableInfo'] = request.expression_variable_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.query_expression_variable_info):
            query['QueryExpressionVariableInfo'] = request.query_expression_variable_info
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        if not UtilClient.is_unset(request.target_event_name):
            query['TargetEventName'] = request.target_event_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeepCopyRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeepCopyRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def deep_copy_rule_with_options_async(
        self,
        request: xtee_20210910_models.DeepCopyRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeepCopyRuleResponse:
        """
        @summary Policy Replication
        
        @param request: DeepCopyRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeepCopyRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_type):
            query['CreateType'] = request.create_type
        if not UtilClient.is_unset(request.cust_insert_info):
            query['CustInsertInfo'] = request.cust_insert_info
        if not UtilClient.is_unset(request.cust_write_info):
            query['CustWriteInfo'] = request.cust_write_info
        if not UtilClient.is_unset(request.expression_variable_info):
            query['ExpressionVariableInfo'] = request.expression_variable_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.query_expression_variable_info):
            query['QueryExpressionVariableInfo'] = request.query_expression_variable_info
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.source_rule_id):
            query['SourceRuleId'] = request.source_rule_id
        if not UtilClient.is_unset(request.source_rule_ids):
            query['SourceRuleIds'] = request.source_rule_ids
        if not UtilClient.is_unset(request.target_event_code):
            query['TargetEventCode'] = request.target_event_code
        if not UtilClient.is_unset(request.target_event_name):
            query['TargetEventName'] = request.target_event_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeepCopyRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeepCopyRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def deep_copy_rule(
        self,
        request: xtee_20210910_models.DeepCopyRuleRequest,
    ) -> xtee_20210910_models.DeepCopyRuleResponse:
        """
        @summary Policy Replication
        
        @param request: DeepCopyRuleRequest
        @return: DeepCopyRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.deep_copy_rule_with_options(request, runtime)

    async def deep_copy_rule_async(
        self,
        request: xtee_20210910_models.DeepCopyRuleRequest,
    ) -> xtee_20210910_models.DeepCopyRuleResponse:
        """
        @summary Policy Replication
        
        @param request: DeepCopyRuleRequest
        @return: DeepCopyRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.deep_copy_rule_with_options_async(request, runtime)

    def delete_analysis_condition_favorite_with_options(
        self,
        request: xtee_20210910_models.DeleteAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse:
        """
        @summary Delete Query Condition
        
        @param request: DeleteAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_analysis_condition_favorite_with_options_async(
        self,
        request: xtee_20210910_models.DeleteAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse:
        """
        @summary Delete Query Condition
        
        @param request: DeleteAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_analysis_condition_favorite(
        self,
        request: xtee_20210910_models.DeleteAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse:
        """
        @summary Delete Query Condition
        
        @param request: DeleteAnalysisConditionFavoriteRequest
        @return: DeleteAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_analysis_condition_favorite_with_options(request, runtime)

    async def delete_analysis_condition_favorite_async(
        self,
        request: xtee_20210910_models.DeleteAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.DeleteAnalysisConditionFavoriteResponse:
        """
        @summary Delete Query Condition
        
        @param request: DeleteAnalysisConditionFavoriteRequest
        @return: DeleteAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_analysis_condition_favorite_with_options_async(request, runtime)

    def delete_by_pass_shunt_event_with_options(
        self,
        request: xtee_20210910_models.DeleteByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteByPassShuntEventResponse:
        """
        @summary Delete Bypass Event
        
        @param request: DeleteByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteByPassShuntEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_by_pass_shunt_event_with_options_async(
        self,
        request: xtee_20210910_models.DeleteByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteByPassShuntEventResponse:
        """
        @summary Delete Bypass Event
        
        @param request: DeleteByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteByPassShuntEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_by_pass_shunt_event(
        self,
        request: xtee_20210910_models.DeleteByPassShuntEventRequest,
    ) -> xtee_20210910_models.DeleteByPassShuntEventResponse:
        """
        @summary Delete Bypass Event
        
        @param request: DeleteByPassShuntEventRequest
        @return: DeleteByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_by_pass_shunt_event_with_options(request, runtime)

    async def delete_by_pass_shunt_event_async(
        self,
        request: xtee_20210910_models.DeleteByPassShuntEventRequest,
    ) -> xtee_20210910_models.DeleteByPassShuntEventResponse:
        """
        @summary Delete Bypass Event
        
        @param request: DeleteByPassShuntEventRequest
        @return: DeleteByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_by_pass_shunt_event_with_options_async(request, runtime)

    def delete_cust_variable_with_options(
        self,
        request: xtee_20210910_models.DeleteCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteCustVariableResponse:
        """
        @summary Delete Accumulated Variable
        
        @param request: DeleteCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteCustVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_cust_variable_with_options_async(
        self,
        request: xtee_20210910_models.DeleteCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteCustVariableResponse:
        """
        @summary Delete Accumulated Variable
        
        @param request: DeleteCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteCustVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_cust_variable(
        self,
        request: xtee_20210910_models.DeleteCustVariableRequest,
    ) -> xtee_20210910_models.DeleteCustVariableResponse:
        """
        @summary Delete Accumulated Variable
        
        @param request: DeleteCustVariableRequest
        @return: DeleteCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_cust_variable_with_options(request, runtime)

    async def delete_cust_variable_async(
        self,
        request: xtee_20210910_models.DeleteCustVariableRequest,
    ) -> xtee_20210910_models.DeleteCustVariableResponse:
        """
        @summary Delete Accumulated Variable
        
        @param request: DeleteCustVariableRequest
        @return: DeleteCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_cust_variable_with_options_async(request, runtime)

    def delete_data_source_with_options(
        self,
        request: xtee_20210910_models.DeleteDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteDataSourceResponse:
        """
        @summary Delete Data Source
        
        @param request: DeleteDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_source_with_options_async(
        self,
        request: xtee_20210910_models.DeleteDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteDataSourceResponse:
        """
        @summary Delete Data Source
        
        @param request: DeleteDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_source(
        self,
        request: xtee_20210910_models.DeleteDataSourceRequest,
    ) -> xtee_20210910_models.DeleteDataSourceResponse:
        """
        @summary Delete Data Source
        
        @param request: DeleteDataSourceRequest
        @return: DeleteDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_source_with_options(request, runtime)

    async def delete_data_source_async(
        self,
        request: xtee_20210910_models.DeleteDataSourceRequest,
    ) -> xtee_20210910_models.DeleteDataSourceResponse:
        """
        @summary Delete Data Source
        
        @param request: DeleteDataSourceRequest
        @return: DeleteDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_source_with_options_async(request, runtime)

    def delete_event_field_with_options(
        self,
        request: xtee_20210910_models.DeleteEventFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteEventFieldResponse:
        """
        @summary Delete Event Field
        
        @param request: DeleteEventFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEventFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEventField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteEventFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_event_field_with_options_async(
        self,
        request: xtee_20210910_models.DeleteEventFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteEventFieldResponse:
        """
        @summary Delete Event Field
        
        @param request: DeleteEventFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEventFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEventField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteEventFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_event_field(
        self,
        request: xtee_20210910_models.DeleteEventFieldRequest,
    ) -> xtee_20210910_models.DeleteEventFieldResponse:
        """
        @summary Delete Event Field
        
        @param request: DeleteEventFieldRequest
        @return: DeleteEventFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_event_field_with_options(request, runtime)

    async def delete_event_field_async(
        self,
        request: xtee_20210910_models.DeleteEventFieldRequest,
    ) -> xtee_20210910_models.DeleteEventFieldResponse:
        """
        @summary Delete Event Field
        
        @param request: DeleteEventFieldRequest
        @return: DeleteEventFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_event_field_with_options_async(request, runtime)

    def delete_expression_variable_with_options(
        self,
        request: xtee_20210910_models.DeleteExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteExpressionVariableResponse:
        """
        @summary Delete Custom Variable
        
        @param request: DeleteExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteExpressionVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_expression_variable_with_options_async(
        self,
        request: xtee_20210910_models.DeleteExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteExpressionVariableResponse:
        """
        @summary Delete Custom Variable
        
        @param request: DeleteExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteExpressionVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_expression_variable(
        self,
        request: xtee_20210910_models.DeleteExpressionVariableRequest,
    ) -> xtee_20210910_models.DeleteExpressionVariableResponse:
        """
        @summary Delete Custom Variable
        
        @param request: DeleteExpressionVariableRequest
        @return: DeleteExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_expression_variable_with_options(request, runtime)

    async def delete_expression_variable_async(
        self,
        request: xtee_20210910_models.DeleteExpressionVariableRequest,
    ) -> xtee_20210910_models.DeleteExpressionVariableResponse:
        """
        @summary Delete Custom Variable
        
        @param request: DeleteExpressionVariableRequest
        @return: DeleteExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_expression_variable_with_options_async(request, runtime)

    def delete_field_with_options(
        self,
        request: xtee_20210910_models.DeleteFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_field_with_options_async(
        self,
        request: xtee_20210910_models.DeleteFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_field(
        self,
        request: xtee_20210910_models.DeleteFieldRequest,
    ) -> xtee_20210910_models.DeleteFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteFieldRequest
        @return: DeleteFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_field_with_options(request, runtime)

    async def delete_field_async(
        self,
        request: xtee_20210910_models.DeleteFieldRequest,
    ) -> xtee_20210910_models.DeleteFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteFieldRequest
        @return: DeleteFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_field_with_options_async(request, runtime)

    def delete_name_list_with_options(
        self,
        request: xtee_20210910_models.DeleteNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteNameListResponse:
        """
        @summary Delete Name List
        
        @param request: DeleteNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteNameListResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_name_list_with_options_async(
        self,
        request: xtee_20210910_models.DeleteNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteNameListResponse:
        """
        @summary Delete Name List
        
        @param request: DeleteNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteNameListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_name_list(
        self,
        request: xtee_20210910_models.DeleteNameListRequest,
    ) -> xtee_20210910_models.DeleteNameListResponse:
        """
        @summary Delete Name List
        
        @param request: DeleteNameListRequest
        @return: DeleteNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_name_list_with_options(request, runtime)

    async def delete_name_list_async(
        self,
        request: xtee_20210910_models.DeleteNameListRequest,
    ) -> xtee_20210910_models.DeleteNameListResponse:
        """
        @summary Delete Name List
        
        @param request: DeleteNameListRequest
        @return: DeleteNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_name_list_with_options_async(request, runtime)

    def delete_name_list_data_with_options(
        self,
        request: xtee_20210910_models.DeleteNameListDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteNameListDataResponse:
        """
        @summary Delete (pseudo) name list variable data
        
        @param request: DeleteNameListDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNameListDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNameListData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteNameListDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_name_list_data_with_options_async(
        self,
        request: xtee_20210910_models.DeleteNameListDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteNameListDataResponse:
        """
        @summary Delete (pseudo) name list variable data
        
        @param request: DeleteNameListDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNameListDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNameListData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteNameListDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_name_list_data(
        self,
        request: xtee_20210910_models.DeleteNameListDataRequest,
    ) -> xtee_20210910_models.DeleteNameListDataResponse:
        """
        @summary Delete (pseudo) name list variable data
        
        @param request: DeleteNameListDataRequest
        @return: DeleteNameListDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_name_list_data_with_options(request, runtime)

    async def delete_name_list_data_async(
        self,
        request: xtee_20210910_models.DeleteNameListDataRequest,
    ) -> xtee_20210910_models.DeleteNameListDataResponse:
        """
        @summary Delete (pseudo) name list variable data
        
        @param request: DeleteNameListDataRequest
        @return: DeleteNameListDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_name_list_data_with_options_async(request, runtime)

    def delete_query_variable_with_options(
        self,
        request: xtee_20210910_models.DeleteQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteQueryVariableResponse:
        """
        @summary Delete Query Variable
        
        @param request: DeleteQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteQueryVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_query_variable_with_options_async(
        self,
        request: xtee_20210910_models.DeleteQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteQueryVariableResponse:
        """
        @summary Delete Query Variable
        
        @param request: DeleteQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteQueryVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_query_variable(
        self,
        request: xtee_20210910_models.DeleteQueryVariableRequest,
    ) -> xtee_20210910_models.DeleteQueryVariableResponse:
        """
        @summary Delete Query Variable
        
        @param request: DeleteQueryVariableRequest
        @return: DeleteQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_query_variable_with_options(request, runtime)

    async def delete_query_variable_async(
        self,
        request: xtee_20210910_models.DeleteQueryVariableRequest,
    ) -> xtee_20210910_models.DeleteQueryVariableResponse:
        """
        @summary Delete Query Variable
        
        @param request: DeleteQueryVariableRequest
        @return: DeleteQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_query_variable_with_options_async(request, runtime)

    def delete_rule_with_options(
        self,
        request: xtee_20210910_models.DeleteRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteRuleResponse:
        """
        @summary Delete Policy Version
        
        @param request: DeleteRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_rule_with_options_async(
        self,
        request: xtee_20210910_models.DeleteRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteRuleResponse:
        """
        @summary Delete Policy Version
        
        @param request: DeleteRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_rule(
        self,
        request: xtee_20210910_models.DeleteRuleRequest,
    ) -> xtee_20210910_models.DeleteRuleResponse:
        """
        @summary Delete Policy Version
        
        @param request: DeleteRuleRequest
        @return: DeleteRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_rule_with_options(request, runtime)

    async def delete_rule_async(
        self,
        request: xtee_20210910_models.DeleteRuleRequest,
    ) -> xtee_20210910_models.DeleteRuleResponse:
        """
        @summary Delete Policy Version
        
        @param request: DeleteRuleRequest
        @return: DeleteRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_rule_with_options_async(request, runtime)

    def delete_sample_batch_with_options(
        self,
        request: xtee_20210910_models.DeleteSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleBatchResponse:
        """
        @summary Batch Delete Samples
        
        @param request: DeleteSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_sample_batch_with_options_async(
        self,
        request: xtee_20210910_models.DeleteSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleBatchResponse:
        """
        @summary Batch Delete Samples
        
        @param request: DeleteSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_sample_batch(
        self,
        request: xtee_20210910_models.DeleteSampleBatchRequest,
    ) -> xtee_20210910_models.DeleteSampleBatchResponse:
        """
        @summary Batch Delete Samples
        
        @param request: DeleteSampleBatchRequest
        @return: DeleteSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_sample_batch_with_options(request, runtime)

    async def delete_sample_batch_async(
        self,
        request: xtee_20210910_models.DeleteSampleBatchRequest,
    ) -> xtee_20210910_models.DeleteSampleBatchResponse:
        """
        @summary Batch Delete Samples
        
        @param request: DeleteSampleBatchRequest
        @return: DeleteSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_sample_batch_with_options_async(request, runtime)

    def delete_sample_batch_meta_with_options(
        self,
        request: xtee_20210910_models.DeleteSampleBatchMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleBatchMetaResponse:
        """
        @summary Sample Deletion
        
        @param request: DeleteSampleBatchMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleBatchMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleBatchMeta',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleBatchMetaResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_sample_batch_meta_with_options_async(
        self,
        request: xtee_20210910_models.DeleteSampleBatchMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleBatchMetaResponse:
        """
        @summary Sample Deletion
        
        @param request: DeleteSampleBatchMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleBatchMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleBatchMeta',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleBatchMetaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_sample_batch_meta(
        self,
        request: xtee_20210910_models.DeleteSampleBatchMetaRequest,
    ) -> xtee_20210910_models.DeleteSampleBatchMetaResponse:
        """
        @summary Sample Deletion
        
        @param request: DeleteSampleBatchMetaRequest
        @return: DeleteSampleBatchMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_sample_batch_meta_with_options(request, runtime)

    async def delete_sample_batch_meta_async(
        self,
        request: xtee_20210910_models.DeleteSampleBatchMetaRequest,
    ) -> xtee_20210910_models.DeleteSampleBatchMetaResponse:
        """
        @summary Sample Deletion
        
        @param request: DeleteSampleBatchMetaRequest
        @return: DeleteSampleBatchMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_sample_batch_meta_with_options_async(request, runtime)

    def delete_sample_data_with_options(
        self,
        request: xtee_20210910_models.DeleteSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleDataResponse:
        """
        @summary Delete Sample Data
        
        @param request: DeleteSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_sample_data_with_options_async(
        self,
        request: xtee_20210910_models.DeleteSampleDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSampleDataResponse:
        """
        @summary Delete Sample Data
        
        @param request: DeleteSampleDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSampleDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSampleData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSampleDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_sample_data(
        self,
        request: xtee_20210910_models.DeleteSampleDataRequest,
    ) -> xtee_20210910_models.DeleteSampleDataResponse:
        """
        @summary Delete Sample Data
        
        @param request: DeleteSampleDataRequest
        @return: DeleteSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_sample_data_with_options(request, runtime)

    async def delete_sample_data_async(
        self,
        request: xtee_20210910_models.DeleteSampleDataRequest,
    ) -> xtee_20210910_models.DeleteSampleDataResponse:
        """
        @summary Delete Sample Data
        
        @param request: DeleteSampleDataRequest
        @return: DeleteSampleDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_sample_data_with_options_async(request, runtime)

    def delete_self_bind_variable_with_options(
        self,
        request: xtee_20210910_models.DeleteSelfBindVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSelfBindVariableResponse:
        """
        @summary Delete Custom System Variable
        
        @param request: DeleteSelfBindVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSelfBindVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSelfBindVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSelfBindVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_self_bind_variable_with_options_async(
        self,
        request: xtee_20210910_models.DeleteSelfBindVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DeleteSelfBindVariableResponse:
        """
        @summary Delete Custom System Variable
        
        @param request: DeleteSelfBindVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSelfBindVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSelfBindVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DeleteSelfBindVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_self_bind_variable(
        self,
        request: xtee_20210910_models.DeleteSelfBindVariableRequest,
    ) -> xtee_20210910_models.DeleteSelfBindVariableResponse:
        """
        @summary Delete Custom System Variable
        
        @param request: DeleteSelfBindVariableRequest
        @return: DeleteSelfBindVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_self_bind_variable_with_options(request, runtime)

    async def delete_self_bind_variable_async(
        self,
        request: xtee_20210910_models.DeleteSelfBindVariableRequest,
    ) -> xtee_20210910_models.DeleteSelfBindVariableResponse:
        """
        @summary Delete Custom System Variable
        
        @param request: DeleteSelfBindVariableRequest
        @return: DeleteSelfBindVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_self_bind_variable_with_options_async(request, runtime)

    def describe_advance_search_left_variable_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchLeftVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse:
        """
        @summary 高级查询获取左变量接口
        
        @param request: DescribeAdvanceSearchLeftVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAdvanceSearchLeftVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAdvanceSearchLeftVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_advance_search_left_variable_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchLeftVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse:
        """
        @summary 高级查询获取左变量接口
        
        @param request: DescribeAdvanceSearchLeftVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAdvanceSearchLeftVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAdvanceSearchLeftVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_advance_search_left_variable_list(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchLeftVariableListRequest,
    ) -> xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse:
        """
        @summary 高级查询获取左变量接口
        
        @param request: DescribeAdvanceSearchLeftVariableListRequest
        @return: DescribeAdvanceSearchLeftVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_advance_search_left_variable_list_with_options(request, runtime)

    async def describe_advance_search_left_variable_list_async(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchLeftVariableListRequest,
    ) -> xtee_20210910_models.DescribeAdvanceSearchLeftVariableListResponse:
        """
        @summary 高级查询获取左变量接口
        
        @param request: DescribeAdvanceSearchLeftVariableListRequest
        @return: DescribeAdvanceSearchLeftVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_advance_search_left_variable_list_with_options_async(request, runtime)

    def describe_advance_search_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAdvanceSearchPageListResponse:
        """
        @summary Advanced Query
        
        @param request: DescribeAdvanceSearchPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAdvanceSearchPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAdvanceSearchPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAdvanceSearchPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_advance_search_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAdvanceSearchPageListResponse:
        """
        @summary Advanced Query
        
        @param request: DescribeAdvanceSearchPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAdvanceSearchPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAdvanceSearchPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAdvanceSearchPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_advance_search_page_list(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchPageListRequest,
    ) -> xtee_20210910_models.DescribeAdvanceSearchPageListResponse:
        """
        @summary Advanced Query
        
        @param request: DescribeAdvanceSearchPageListRequest
        @return: DescribeAdvanceSearchPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_advance_search_page_list_with_options(request, runtime)

    async def describe_advance_search_page_list_async(
        self,
        request: xtee_20210910_models.DescribeAdvanceSearchPageListRequest,
    ) -> xtee_20210910_models.DescribeAdvanceSearchPageListResponse:
        """
        @summary Advanced Query
        
        @param request: DescribeAdvanceSearchPageListRequest
        @return: DescribeAdvanceSearchPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_advance_search_page_list_with_options_async(request, runtime)

    def describe_all_data_source_with_options(
        self,
        request: xtee_20210910_models.DescribeAllDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllDataSourceResponse:
        """
        @summary 数据源列表
        
        @param request: DescribeAllDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_data_source_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAllDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllDataSourceResponse:
        """
        @summary 数据源列表
        
        @param request: DescribeAllDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_data_source(
        self,
        request: xtee_20210910_models.DescribeAllDataSourceRequest,
    ) -> xtee_20210910_models.DescribeAllDataSourceResponse:
        """
        @summary 数据源列表
        
        @param request: DescribeAllDataSourceRequest
        @return: DescribeAllDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_data_source_with_options(request, runtime)

    async def describe_all_data_source_async(
        self,
        request: xtee_20210910_models.DescribeAllDataSourceRequest,
    ) -> xtee_20210910_models.DescribeAllDataSourceResponse:
        """
        @summary 数据源列表
        
        @param request: DescribeAllDataSourceRequest
        @return: DescribeAllDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_data_source_with_options_async(request, runtime)

    def describe_all_event_name_and_code_with_options(
        self,
        request: xtee_20210910_models.DescribeAllEventNameAndCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllEventNameAndCodeResponse:
        """
        @summary Event List Query
        
        @param request: DescribeAllEventNameAndCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllEventNameAndCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllEventNameAndCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllEventNameAndCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_event_name_and_code_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAllEventNameAndCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllEventNameAndCodeResponse:
        """
        @summary Event List Query
        
        @param request: DescribeAllEventNameAndCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllEventNameAndCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllEventNameAndCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllEventNameAndCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_event_name_and_code(
        self,
        request: xtee_20210910_models.DescribeAllEventNameAndCodeRequest,
    ) -> xtee_20210910_models.DescribeAllEventNameAndCodeResponse:
        """
        @summary Event List Query
        
        @param request: DescribeAllEventNameAndCodeRequest
        @return: DescribeAllEventNameAndCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_event_name_and_code_with_options(request, runtime)

    async def describe_all_event_name_and_code_async(
        self,
        request: xtee_20210910_models.DescribeAllEventNameAndCodeRequest,
    ) -> xtee_20210910_models.DescribeAllEventNameAndCodeResponse:
        """
        @summary Event List Query
        
        @param request: DescribeAllEventNameAndCodeRequest
        @return: DescribeAllEventNameAndCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_event_name_and_code_with_options_async(request, runtime)

    def describe_all_root_variable_with_options(
        self,
        request: xtee_20210910_models.DescribeAllRootVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllRootVariableResponse:
        """
        @summary Display all root variables when testing custom expressions
        
        @param request: DescribeAllRootVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllRootVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.device_variable_ids):
            query['deviceVariableIds'] = request.device_variable_ids
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression_variable_ids):
            query['expressionVariableIds'] = request.expression_variable_ids
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.native_variable_ids):
            query['nativeVariableIds'] = request.native_variable_ids
        if not UtilClient.is_unset(request.query_variable_ids):
            query['queryVariableIds'] = request.query_variable_ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.velocity_variable_ids):
            query['velocityVariableIds'] = request.velocity_variable_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllRootVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllRootVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_root_variable_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAllRootVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAllRootVariableResponse:
        """
        @summary Display all root variables when testing custom expressions
        
        @param request: DescribeAllRootVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllRootVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.device_variable_ids):
            query['deviceVariableIds'] = request.device_variable_ids
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression_variable_ids):
            query['expressionVariableIds'] = request.expression_variable_ids
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.native_variable_ids):
            query['nativeVariableIds'] = request.native_variable_ids
        if not UtilClient.is_unset(request.query_variable_ids):
            query['queryVariableIds'] = request.query_variable_ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.velocity_variable_ids):
            query['velocityVariableIds'] = request.velocity_variable_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllRootVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAllRootVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_root_variable(
        self,
        request: xtee_20210910_models.DescribeAllRootVariableRequest,
    ) -> xtee_20210910_models.DescribeAllRootVariableResponse:
        """
        @summary Display all root variables when testing custom expressions
        
        @param request: DescribeAllRootVariableRequest
        @return: DescribeAllRootVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_root_variable_with_options(request, runtime)

    async def describe_all_root_variable_async(
        self,
        request: xtee_20210910_models.DescribeAllRootVariableRequest,
    ) -> xtee_20210910_models.DescribeAllRootVariableResponse:
        """
        @summary Display all root variables when testing custom expressions
        
        @param request: DescribeAllRootVariableRequest
        @return: DescribeAllRootVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_root_variable_with_options_async(request, runtime)

    def describe_analysis_column_field_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnFieldListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisColumnFieldListResponse:
        """
        @summary Display All Fields
        
        @param request: DescribeAnalysisColumnFieldListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisColumnFieldListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisColumnFieldList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisColumnFieldListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_analysis_column_field_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnFieldListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisColumnFieldListResponse:
        """
        @summary Display All Fields
        
        @param request: DescribeAnalysisColumnFieldListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisColumnFieldListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisColumnFieldList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisColumnFieldListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_analysis_column_field_list(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnFieldListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisColumnFieldListResponse:
        """
        @summary Display All Fields
        
        @param request: DescribeAnalysisColumnFieldListRequest
        @return: DescribeAnalysisColumnFieldListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_analysis_column_field_list_with_options(request, runtime)

    async def describe_analysis_column_field_list_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnFieldListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisColumnFieldListResponse:
        """
        @summary Display All Fields
        
        @param request: DescribeAnalysisColumnFieldListRequest
        @return: DescribeAnalysisColumnFieldListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_analysis_column_field_list_with_options_async(request, runtime)

    def describe_analysis_column_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisColumnListResponse:
        """
        @summary Query Custom Columns
        
        @param request: DescribeAnalysisColumnListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisColumnListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisColumnList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisColumnListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_analysis_column_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisColumnListResponse:
        """
        @summary Query Custom Columns
        
        @param request: DescribeAnalysisColumnListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisColumnListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisColumnList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisColumnListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_analysis_column_list(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisColumnListResponse:
        """
        @summary Query Custom Columns
        
        @param request: DescribeAnalysisColumnListRequest
        @return: DescribeAnalysisColumnListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_analysis_column_list_with_options(request, runtime)

    async def describe_analysis_column_list_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisColumnListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisColumnListResponse:
        """
        @summary Query Custom Columns
        
        @param request: DescribeAnalysisColumnListRequest
        @return: DescribeAnalysisColumnListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_analysis_column_list_with_options_async(request, runtime)

    def describe_analysis_condition_favorite_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAnalysisConditionFavoriteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse:
        """
        @summary Query Condition List
        
        @param request: DescribeAnalysisConditionFavoriteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisConditionFavoriteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisConditionFavoriteList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_analysis_condition_favorite_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisConditionFavoriteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse:
        """
        @summary Query Condition List
        
        @param request: DescribeAnalysisConditionFavoriteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisConditionFavoriteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisConditionFavoriteList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_analysis_condition_favorite_list(
        self,
        request: xtee_20210910_models.DescribeAnalysisConditionFavoriteListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse:
        """
        @summary Query Condition List
        
        @param request: DescribeAnalysisConditionFavoriteListRequest
        @return: DescribeAnalysisConditionFavoriteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_analysis_condition_favorite_list_with_options(request, runtime)

    async def describe_analysis_condition_favorite_list_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisConditionFavoriteListRequest,
    ) -> xtee_20210910_models.DescribeAnalysisConditionFavoriteListResponse:
        """
        @summary Query Condition List
        
        @param request: DescribeAnalysisConditionFavoriteListRequest
        @return: DescribeAnalysisConditionFavoriteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_analysis_condition_favorite_list_with_options_async(request, runtime)

    def describe_analysis_export_task_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse:
        """
        @summary Download Query Results
        
        @param request: DescribeAnalysisExportTaskDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisExportTaskDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisExportTaskDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_analysis_export_task_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse:
        """
        @summary Download Query Results
        
        @param request: DescribeAnalysisExportTaskDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAnalysisExportTaskDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAnalysisExportTaskDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_analysis_export_task_download_url(
        self,
        request: xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse:
        """
        @summary Download Query Results
        
        @param request: DescribeAnalysisExportTaskDownloadUrlRequest
        @return: DescribeAnalysisExportTaskDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_analysis_export_task_download_url_with_options(request, runtime)

    async def describe_analysis_export_task_download_url_async(
        self,
        request: xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeAnalysisExportTaskDownloadUrlResponse:
        """
        @summary Download Query Results
        
        @param request: DescribeAnalysisExportTaskDownloadUrlRequest
        @return: DescribeAnalysisExportTaskDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_analysis_export_task_download_url_with_options_async(request, runtime)

    def describe_api_with_options(
        self,
        request: xtee_20210910_models.DescribeApiRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiResponse:
        """
        @summary Get API Details
        
        @param request: DescribeApiRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_id):
            query['apiId'] = request.api_id
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApi',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_api_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApiRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiResponse:
        """
        @summary Get API Details
        
        @param request: DescribeApiRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_id):
            query['apiId'] = request.api_id
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApi',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_api(
        self,
        request: xtee_20210910_models.DescribeApiRequest,
    ) -> xtee_20210910_models.DescribeApiResponse:
        """
        @summary Get API Details
        
        @param request: DescribeApiRequest
        @return: DescribeApiResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_api_with_options(request, runtime)

    async def describe_api_async(
        self,
        request: xtee_20210910_models.DescribeApiRequest,
    ) -> xtee_20210910_models.DescribeApiResponse:
        """
        @summary Get API Details
        
        @param request: DescribeApiRequest
        @return: DescribeApiResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_api_with_options_async(request, runtime)

    def describe_api_groups_with_options(
        self,
        request: xtee_20210910_models.DescribeApiGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiGroupsResponse:
        """
        @summary Get API groups including those purchased by the user and custom ones
        
        @param request: DescribeApiGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiGroups',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_api_groups_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApiGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiGroupsResponse:
        """
        @summary Get API groups including those purchased by the user and custom ones
        
        @param request: DescribeApiGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiGroups',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_api_groups(
        self,
        request: xtee_20210910_models.DescribeApiGroupsRequest,
    ) -> xtee_20210910_models.DescribeApiGroupsResponse:
        """
        @summary Get API groups including those purchased by the user and custom ones
        
        @param request: DescribeApiGroupsRequest
        @return: DescribeApiGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_api_groups_with_options(request, runtime)

    async def describe_api_groups_async(
        self,
        request: xtee_20210910_models.DescribeApiGroupsRequest,
    ) -> xtee_20210910_models.DescribeApiGroupsResponse:
        """
        @summary Get API groups including those purchased by the user and custom ones
        
        @param request: DescribeApiGroupsRequest
        @return: DescribeApiGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_api_groups_with_options_async(request, runtime)

    def describe_api_limit_with_options(
        self,
        request: xtee_20210910_models.DescribeApiLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiLimitResponse:
        """
        @summary Query the limit information for creating API tasks
        
        @param request: DescribeApiLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_api_limit_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApiLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiLimitResponse:
        """
        @summary Query the limit information for creating API tasks
        
        @param request: DescribeApiLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_api_limit(
        self,
        request: xtee_20210910_models.DescribeApiLimitRequest,
    ) -> xtee_20210910_models.DescribeApiLimitResponse:
        """
        @summary Query the limit information for creating API tasks
        
        @param request: DescribeApiLimitRequest
        @return: DescribeApiLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_api_limit_with_options(request, runtime)

    async def describe_api_limit_async(
        self,
        request: xtee_20210910_models.DescribeApiLimitRequest,
    ) -> xtee_20210910_models.DescribeApiLimitResponse:
        """
        @summary Query the limit information for creating API tasks
        
        @param request: DescribeApiLimitRequest
        @return: DescribeApiLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_api_limit_with_options_async(request, runtime)

    def describe_api_name_list_with_options(
        self,
        request: xtee_20210910_models.DescribeApiNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiNameListResponse:
        """
        @summary Get API Service Name
        
        @param request: DescribeApiNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiNameListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_api_name_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApiNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiNameListResponse:
        """
        @summary Get API Service Name
        
        @param request: DescribeApiNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiNameListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_api_name_list(
        self,
        request: xtee_20210910_models.DescribeApiNameListRequest,
    ) -> xtee_20210910_models.DescribeApiNameListResponse:
        """
        @summary Get API Service Name
        
        @param request: DescribeApiNameListRequest
        @return: DescribeApiNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_api_name_list_with_options(request, runtime)

    async def describe_api_name_list_async(
        self,
        request: xtee_20210910_models.DescribeApiNameListRequest,
    ) -> xtee_20210910_models.DescribeApiNameListResponse:
        """
        @summary Get API Service Name
        
        @param request: DescribeApiNameListRequest
        @return: DescribeApiNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_api_name_list_with_options_async(request, runtime)

    def describe_api_variable_with_options(
        self,
        request: xtee_20210910_models.DescribeApiVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiVariableResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeApiVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_api_variable_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApiVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApiVariableResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeApiVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApiVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApiVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApiVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_api_variable(
        self,
        request: xtee_20210910_models.DescribeApiVariableRequest,
    ) -> xtee_20210910_models.DescribeApiVariableResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeApiVariableRequest
        @return: DescribeApiVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_api_variable_with_options(request, runtime)

    async def describe_api_variable_async(
        self,
        request: xtee_20210910_models.DescribeApiVariableRequest,
    ) -> xtee_20210910_models.DescribeApiVariableResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeApiVariableRequest
        @return: DescribeApiVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_api_variable_with_options_async(request, runtime)

    def describe_apis_with_options(
        self,
        request: xtee_20210910_models.DescribeApisRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApisResponse:
        """
        @summary Get API list including purchased and customized APIs
        
        @param request: DescribeApisRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApisResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_group_id):
            query['apiGroupId'] = request.api_group_id
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApis',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApisResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_apis_with_options_async(
        self,
        request: xtee_20210910_models.DescribeApisRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeApisResponse:
        """
        @summary Get API list including purchased and customized APIs
        
        @param request: DescribeApisRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeApisResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.api_group_id):
            query['apiGroupId'] = request.api_group_id
        if not UtilClient.is_unset(request.api_region_id):
            query['apiRegionId'] = request.api_region_id
        if not UtilClient.is_unset(request.api_type):
            query['apiType'] = request.api_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeApis',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeApisResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_apis(
        self,
        request: xtee_20210910_models.DescribeApisRequest,
    ) -> xtee_20210910_models.DescribeApisResponse:
        """
        @summary Get API list including purchased and customized APIs
        
        @param request: DescribeApisRequest
        @return: DescribeApisResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_apis_with_options(request, runtime)

    async def describe_apis_async(
        self,
        request: xtee_20210910_models.DescribeApisRequest,
    ) -> xtee_20210910_models.DescribeApisResponse:
        """
        @summary Get API list including purchased and customized APIs
        
        @param request: DescribeApisRequest
        @return: DescribeApisResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_apis_with_options_async(request, runtime)

    def describe_app_key_page_with_options(
        self,
        request: xtee_20210910_models.DescribeAppKeyPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAppKeyPageResponse:
        """
        @summary Query appKey List
        
        @param request: DescribeAppKeyPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAppKeyPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAppKeyPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAppKeyPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_app_key_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAppKeyPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAppKeyPageResponse:
        """
        @summary Query appKey List
        
        @param request: DescribeAppKeyPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAppKeyPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAppKeyPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAppKeyPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_app_key_page(
        self,
        request: xtee_20210910_models.DescribeAppKeyPageRequest,
    ) -> xtee_20210910_models.DescribeAppKeyPageResponse:
        """
        @summary Query appKey List
        
        @param request: DescribeAppKeyPageRequest
        @return: DescribeAppKeyPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_app_key_page_with_options(request, runtime)

    async def describe_app_key_page_async(
        self,
        request: xtee_20210910_models.DescribeAppKeyPageRequest,
    ) -> xtee_20210910_models.DescribeAppKeyPageResponse:
        """
        @summary Query appKey List
        
        @param request: DescribeAppKeyPageRequest
        @return: DescribeAppKeyPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_app_key_page_with_options_async(request, runtime)

    def describe_audit_config_with_options(
        self,
        request: xtee_20210910_models.DescribeAuditConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditConfigResponse:
        """
        @summary Approval Switch
        
        @param request: DescribeAuditConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_relation_type):
            query['auditRelationType'] = request.audit_relation_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_audit_config_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuditConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditConfigResponse:
        """
        @summary Approval Switch
        
        @param request: DescribeAuditConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_relation_type):
            query['auditRelationType'] = request.audit_relation_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_audit_config(
        self,
        request: xtee_20210910_models.DescribeAuditConfigRequest,
    ) -> xtee_20210910_models.DescribeAuditConfigResponse:
        """
        @summary Approval Switch
        
        @param request: DescribeAuditConfigRequest
        @return: DescribeAuditConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_audit_config_with_options(request, runtime)

    async def describe_audit_config_async(
        self,
        request: xtee_20210910_models.DescribeAuditConfigRequest,
    ) -> xtee_20210910_models.DescribeAuditConfigResponse:
        """
        @summary Approval Switch
        
        @param request: DescribeAuditConfigRequest
        @return: DescribeAuditConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_audit_config_with_options_async(request, runtime)

    def describe_audit_details_with_options(
        self,
        request: xtee_20210910_models.DescribeAuditDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditDetailsResponse:
        """
        @summary Approval Details
        
        @param request: DescribeAuditDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditDetails',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditDetailsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_audit_details_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuditDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditDetailsResponse:
        """
        @summary Approval Details
        
        @param request: DescribeAuditDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditDetails',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditDetailsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_audit_details(
        self,
        request: xtee_20210910_models.DescribeAuditDetailsRequest,
    ) -> xtee_20210910_models.DescribeAuditDetailsResponse:
        """
        @summary Approval Details
        
        @param request: DescribeAuditDetailsRequest
        @return: DescribeAuditDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_audit_details_with_options(request, runtime)

    async def describe_audit_details_async(
        self,
        request: xtee_20210910_models.DescribeAuditDetailsRequest,
    ) -> xtee_20210910_models.DescribeAuditDetailsResponse:
        """
        @summary Approval Details
        
        @param request: DescribeAuditDetailsRequest
        @return: DescribeAuditDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_audit_details_with_options_async(request, runtime)

    def describe_audit_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAuditPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditPageListResponse:
        """
        @summary Display and Query of Audit List
        
        @param request: DescribeAuditPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_status):
            query['auditStatus'] = request.audit_status
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_audit_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuditPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuditPageListResponse:
        """
        @summary Display and Query of Audit List
        
        @param request: DescribeAuditPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuditPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_status):
            query['auditStatus'] = request.audit_status
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuditPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuditPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_audit_page_list(
        self,
        request: xtee_20210910_models.DescribeAuditPageListRequest,
    ) -> xtee_20210910_models.DescribeAuditPageListResponse:
        """
        @summary Display and Query of Audit List
        
        @param request: DescribeAuditPageListRequest
        @return: DescribeAuditPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_audit_page_list_with_options(request, runtime)

    async def describe_audit_page_list_async(
        self,
        request: xtee_20210910_models.DescribeAuditPageListRequest,
    ) -> xtee_20210910_models.DescribeAuditPageListResponse:
        """
        @summary Display and Query of Audit List
        
        @param request: DescribeAuditPageListRequest
        @return: DescribeAuditPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_audit_page_list_with_options_async(request, runtime)

    def describe_auth_event_name_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAuthEventNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthEventNameListResponse:
        """
        @summary Query the list of event names for the current user
        
        @param request: DescribeAuthEventNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthEventNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthEventNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthEventNameListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auth_event_name_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuthEventNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthEventNameListResponse:
        """
        @summary Query the list of event names for the current user
        
        @param request: DescribeAuthEventNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthEventNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthEventNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthEventNameListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auth_event_name_list(
        self,
        request: xtee_20210910_models.DescribeAuthEventNameListRequest,
    ) -> xtee_20210910_models.DescribeAuthEventNameListResponse:
        """
        @summary Query the list of event names for the current user
        
        @param request: DescribeAuthEventNameListRequest
        @return: DescribeAuthEventNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auth_event_name_list_with_options(request, runtime)

    async def describe_auth_event_name_list_async(
        self,
        request: xtee_20210910_models.DescribeAuthEventNameListRequest,
    ) -> xtee_20210910_models.DescribeAuthEventNameListResponse:
        """
        @summary Query the list of event names for the current user
        
        @param request: DescribeAuthEventNameListRequest
        @return: DescribeAuthEventNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auth_event_name_list_with_options_async(request, runtime)

    def describe_auth_rule_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAuthRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthRulePageListResponse:
        """
        @summary 策略列表
        
        @param request: DescribeAuthRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthRulePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auth_rule_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuthRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthRulePageListResponse:
        """
        @summary 策略列表
        
        @param request: DescribeAuthRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthRulePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auth_rule_page_list(
        self,
        request: xtee_20210910_models.DescribeAuthRulePageListRequest,
    ) -> xtee_20210910_models.DescribeAuthRulePageListResponse:
        """
        @summary 策略列表
        
        @param request: DescribeAuthRulePageListRequest
        @return: DescribeAuthRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auth_rule_page_list_with_options(request, runtime)

    async def describe_auth_rule_page_list_async(
        self,
        request: xtee_20210910_models.DescribeAuthRulePageListRequest,
    ) -> xtee_20210910_models.DescribeAuthRulePageListResponse:
        """
        @summary 策略列表
        
        @param request: DescribeAuthRulePageListRequest
        @return: DescribeAuthRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auth_rule_page_list_with_options_async(request, runtime)

    def describe_auth_scene_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAuthSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthSceneListResponse:
        """
        @summary 场景列表
        
        @param request: DescribeAuthSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthSceneListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auth_scene_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuthSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthSceneListResponse:
        """
        @summary 场景列表
        
        @param request: DescribeAuthSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthSceneListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auth_scene_list(
        self,
        request: xtee_20210910_models.DescribeAuthSceneListRequest,
    ) -> xtee_20210910_models.DescribeAuthSceneListResponse:
        """
        @summary 场景列表
        
        @param request: DescribeAuthSceneListRequest
        @return: DescribeAuthSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auth_scene_list_with_options(request, runtime)

    async def describe_auth_scene_list_async(
        self,
        request: xtee_20210910_models.DescribeAuthSceneListRequest,
    ) -> xtee_20210910_models.DescribeAuthSceneListResponse:
        """
        @summary 场景列表
        
        @param request: DescribeAuthSceneListRequest
        @return: DescribeAuthSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auth_scene_list_with_options_async(request, runtime)

    def describe_auth_scene_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeAuthScenePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthScenePageListResponse:
        """
        @summary Scene List
        
        @param request: DescribeAuthScenePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthScenePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene_name):
            query['sceneName'] = request.scene_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthScenePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthScenePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auth_scene_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuthScenePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthScenePageListResponse:
        """
        @summary Scene List
        
        @param request: DescribeAuthScenePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthScenePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene_name):
            query['sceneName'] = request.scene_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthScenePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthScenePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auth_scene_page_list(
        self,
        request: xtee_20210910_models.DescribeAuthScenePageListRequest,
    ) -> xtee_20210910_models.DescribeAuthScenePageListResponse:
        """
        @summary Scene List
        
        @param request: DescribeAuthScenePageListRequest
        @return: DescribeAuthScenePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auth_scene_page_list_with_options(request, runtime)

    async def describe_auth_scene_page_list_async(
        self,
        request: xtee_20210910_models.DescribeAuthScenePageListRequest,
    ) -> xtee_20210910_models.DescribeAuthScenePageListResponse:
        """
        @summary Scene List
        
        @param request: DescribeAuthScenePageListRequest
        @return: DescribeAuthScenePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auth_scene_page_list_with_options_async(request, runtime)

    def describe_auth_status_with_options(
        self,
        request: xtee_20210910_models.DescribeAuthStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthStatusResponse:
        """
        @summary Check Authorization
        
        @param request: DescribeAuthStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auth_status_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAuthStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAuthStatusResponse:
        """
        @summary Check Authorization
        
        @param request: DescribeAuthStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAuthStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAuthStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAuthStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auth_status(
        self,
        request: xtee_20210910_models.DescribeAuthStatusRequest,
    ) -> xtee_20210910_models.DescribeAuthStatusResponse:
        """
        @summary Check Authorization
        
        @param request: DescribeAuthStatusRequest
        @return: DescribeAuthStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auth_status_with_options(request, runtime)

    async def describe_auth_status_async(
        self,
        request: xtee_20210910_models.DescribeAuthStatusRequest,
    ) -> xtee_20210910_models.DescribeAuthStatusResponse:
        """
        @summary Check Authorization
        
        @param request: DescribeAuthStatusRequest
        @return: DescribeAuthStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auth_status_with_options_async(request, runtime)

    def describe_avg_execute_cost_report_with_options(
        self,
        request: xtee_20210910_models.DescribeAvgExecuteCostReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAvgExecuteCostReportResponse:
        """
        @summary Average Execution Time
        
        @param request: DescribeAvgExecuteCostReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAvgExecuteCostReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAvgExecuteCostReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAvgExecuteCostReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_avg_execute_cost_report_with_options_async(
        self,
        request: xtee_20210910_models.DescribeAvgExecuteCostReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeAvgExecuteCostReportResponse:
        """
        @summary Average Execution Time
        
        @param request: DescribeAvgExecuteCostReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAvgExecuteCostReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAvgExecuteCostReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeAvgExecuteCostReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_avg_execute_cost_report(
        self,
        request: xtee_20210910_models.DescribeAvgExecuteCostReportRequest,
    ) -> xtee_20210910_models.DescribeAvgExecuteCostReportResponse:
        """
        @summary Average Execution Time
        
        @param request: DescribeAvgExecuteCostReportRequest
        @return: DescribeAvgExecuteCostReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_avg_execute_cost_report_with_options(request, runtime)

    async def describe_avg_execute_cost_report_async(
        self,
        request: xtee_20210910_models.DescribeAvgExecuteCostReportRequest,
    ) -> xtee_20210910_models.DescribeAvgExecuteCostReportResponse:
        """
        @summary Average Execution Time
        
        @param request: DescribeAvgExecuteCostReportRequest
        @return: DescribeAvgExecuteCostReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_avg_execute_cost_report_with_options_async(request, runtime)

    def describe_basic_search_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeBasicSearchPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeBasicSearchPageListResponse:
        """
        @summary Basic Query
        
        @param request: DescribeBasicSearchPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBasicSearchPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBasicSearchPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeBasicSearchPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_basic_search_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeBasicSearchPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeBasicSearchPageListResponse:
        """
        @summary Basic Query
        
        @param request: DescribeBasicSearchPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBasicSearchPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBasicSearchPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeBasicSearchPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_basic_search_page_list(
        self,
        request: xtee_20210910_models.DescribeBasicSearchPageListRequest,
    ) -> xtee_20210910_models.DescribeBasicSearchPageListResponse:
        """
        @summary Basic Query
        
        @param request: DescribeBasicSearchPageListRequest
        @return: DescribeBasicSearchPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_basic_search_page_list_with_options(request, runtime)

    async def describe_basic_search_page_list_async(
        self,
        request: xtee_20210910_models.DescribeBasicSearchPageListRequest,
    ) -> xtee_20210910_models.DescribeBasicSearchPageListResponse:
        """
        @summary Basic Query
        
        @param request: DescribeBasicSearchPageListRequest
        @return: DescribeBasicSearchPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_basic_search_page_list_with_options_async(request, runtime)

    def describe_basic_start_with_options(
        self,
        request: xtee_20210910_models.DescribeBasicStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeBasicStartResponse:
        """
        @summary 基础统计
        
        @param request: DescribeBasicStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBasicStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.end_ds):
            query['endDs'] = request.end_ds
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        if not UtilClient.is_unset(request.start_ds):
            query['startDs'] = request.start_ds
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBasicStart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeBasicStartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_basic_start_with_options_async(
        self,
        request: xtee_20210910_models.DescribeBasicStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeBasicStartResponse:
        """
        @summary 基础统计
        
        @param request: DescribeBasicStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBasicStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.end_ds):
            query['endDs'] = request.end_ds
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        if not UtilClient.is_unset(request.start_ds):
            query['startDs'] = request.start_ds
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBasicStart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeBasicStartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_basic_start(
        self,
        request: xtee_20210910_models.DescribeBasicStartRequest,
    ) -> xtee_20210910_models.DescribeBasicStartResponse:
        """
        @summary 基础统计
        
        @param request: DescribeBasicStartRequest
        @return: DescribeBasicStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_basic_start_with_options(request, runtime)

    async def describe_basic_start_async(
        self,
        request: xtee_20210910_models.DescribeBasicStartRequest,
    ) -> xtee_20210910_models.DescribeBasicStartResponse:
        """
        @summary 基础统计
        
        @param request: DescribeBasicStartRequest
        @return: DescribeBasicStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_basic_start_with_options_async(request, runtime)

    def describe_by_pass_shunt_event_with_options(
        self,
        request: xtee_20210910_models.DescribeByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeByPassShuntEventResponse:
        """
        @summary View Bypass Event
        
        @param request: DescribeByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeByPassShuntEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_by_pass_shunt_event_with_options_async(
        self,
        request: xtee_20210910_models.DescribeByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeByPassShuntEventResponse:
        """
        @summary View Bypass Event
        
        @param request: DescribeByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeByPassShuntEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_by_pass_shunt_event(
        self,
        request: xtee_20210910_models.DescribeByPassShuntEventRequest,
    ) -> xtee_20210910_models.DescribeByPassShuntEventResponse:
        """
        @summary View Bypass Event
        
        @param request: DescribeByPassShuntEventRequest
        @return: DescribeByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_by_pass_shunt_event_with_options(request, runtime)

    async def describe_by_pass_shunt_event_async(
        self,
        request: xtee_20210910_models.DescribeByPassShuntEventRequest,
    ) -> xtee_20210910_models.DescribeByPassShuntEventResponse:
        """
        @summary View Bypass Event
        
        @param request: DescribeByPassShuntEventRequest
        @return: DescribeByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_by_pass_shunt_event_with_options_async(request, runtime)

    def describe_cust_variable_config_list_with_options(
        self,
        request: xtee_20210910_models.DescribeCustVariableConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariableConfigListResponse:
        """
        @summary Query the type configuration of custom accumulated variables
        
        @param request: DescribeCustVariableConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariableConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_type):
            query['bizType'] = request.biz_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariableConfigList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariableConfigListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cust_variable_config_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeCustVariableConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariableConfigListResponse:
        """
        @summary Query the type configuration of custom accumulated variables
        
        @param request: DescribeCustVariableConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariableConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_type):
            query['bizType'] = request.biz_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariableConfigList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariableConfigListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cust_variable_config_list(
        self,
        request: xtee_20210910_models.DescribeCustVariableConfigListRequest,
    ) -> xtee_20210910_models.DescribeCustVariableConfigListResponse:
        """
        @summary Query the type configuration of custom accumulated variables
        
        @param request: DescribeCustVariableConfigListRequest
        @return: DescribeCustVariableConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cust_variable_config_list_with_options(request, runtime)

    async def describe_cust_variable_config_list_async(
        self,
        request: xtee_20210910_models.DescribeCustVariableConfigListRequest,
    ) -> xtee_20210910_models.DescribeCustVariableConfigListResponse:
        """
        @summary Query the type configuration of custom accumulated variables
        
        @param request: DescribeCustVariableConfigListRequest
        @return: DescribeCustVariableConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cust_variable_config_list_with_options_async(request, runtime)

    def describe_cust_variable_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeCustVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariableDetailResponse:
        """
        @summary Cumulative Variable Details
        
        @param request: DescribeCustVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariableDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cust_variable_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeCustVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariableDetailResponse:
        """
        @summary Cumulative Variable Details
        
        @param request: DescribeCustVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariableDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cust_variable_detail(
        self,
        request: xtee_20210910_models.DescribeCustVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeCustVariableDetailResponse:
        """
        @summary Cumulative Variable Details
        
        @param request: DescribeCustVariableDetailRequest
        @return: DescribeCustVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cust_variable_detail_with_options(request, runtime)

    async def describe_cust_variable_detail_async(
        self,
        request: xtee_20210910_models.DescribeCustVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeCustVariableDetailResponse:
        """
        @summary Cumulative Variable Details
        
        @param request: DescribeCustVariableDetailRequest
        @return: DescribeCustVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cust_variable_detail_with_options_async(request, runtime)

    def describe_cust_variable_page_with_options(
        self,
        request: xtee_20210910_models.DescribeCustVariablePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariablePageResponse:
        """
        @summary Query Custom Accumulated Variable List
        
        @description List Query of Accumulated Variables
        
        @param request: DescribeCustVariablePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariablePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariablePage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariablePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cust_variable_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeCustVariablePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeCustVariablePageResponse:
        """
        @summary Query Custom Accumulated Variable List
        
        @description List Query of Accumulated Variables
        
        @param request: DescribeCustVariablePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustVariablePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustVariablePage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeCustVariablePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cust_variable_page(
        self,
        request: xtee_20210910_models.DescribeCustVariablePageRequest,
    ) -> xtee_20210910_models.DescribeCustVariablePageResponse:
        """
        @summary Query Custom Accumulated Variable List
        
        @description List Query of Accumulated Variables
        
        @param request: DescribeCustVariablePageRequest
        @return: DescribeCustVariablePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cust_variable_page_with_options(request, runtime)

    async def describe_cust_variable_page_async(
        self,
        request: xtee_20210910_models.DescribeCustVariablePageRequest,
    ) -> xtee_20210910_models.DescribeCustVariablePageResponse:
        """
        @summary Query Custom Accumulated Variable List
        
        @description List Query of Accumulated Variables
        
        @param request: DescribeCustVariablePageRequest
        @return: DescribeCustVariablePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cust_variable_page_with_options_async(request, runtime)

    def describe_data_source_data_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeDataSourceDataDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse:
        """
        @summary Get Data Source Data Download Link
        
        @param request: DescribeDataSourceDataDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceDataDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_id):
            query['dataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourceDataDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_data_source_data_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDataSourceDataDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse:
        """
        @summary Get Data Source Data Download Link
        
        @param request: DescribeDataSourceDataDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceDataDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_id):
            query['dataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourceDataDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_data_source_data_download_url(
        self,
        request: xtee_20210910_models.DescribeDataSourceDataDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse:
        """
        @summary Get Data Source Data Download Link
        
        @param request: DescribeDataSourceDataDownloadUrlRequest
        @return: DescribeDataSourceDataDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_data_source_data_download_url_with_options(request, runtime)

    async def describe_data_source_data_download_url_async(
        self,
        request: xtee_20210910_models.DescribeDataSourceDataDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeDataSourceDataDownloadUrlResponse:
        """
        @summary Get Data Source Data Download Link
        
        @param request: DescribeDataSourceDataDownloadUrlRequest
        @return: DescribeDataSourceDataDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_data_source_data_download_url_with_options_async(request, runtime)

    def describe_data_source_fields_with_options(
        self,
        request: xtee_20210910_models.DescribeDataSourceFieldsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourceFieldsResponse:
        """
        @summary Retrieve all fields of a data source
        
        @param request: DescribeDataSourceFieldsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceFieldsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourceFields',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourceFieldsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_data_source_fields_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDataSourceFieldsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourceFieldsResponse:
        """
        @summary Retrieve all fields of a data source
        
        @param request: DescribeDataSourceFieldsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceFieldsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourceFields',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourceFieldsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_data_source_fields(
        self,
        request: xtee_20210910_models.DescribeDataSourceFieldsRequest,
    ) -> xtee_20210910_models.DescribeDataSourceFieldsResponse:
        """
        @summary Retrieve all fields of a data source
        
        @param request: DescribeDataSourceFieldsRequest
        @return: DescribeDataSourceFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_data_source_fields_with_options(request, runtime)

    async def describe_data_source_fields_async(
        self,
        request: xtee_20210910_models.DescribeDataSourceFieldsRequest,
    ) -> xtee_20210910_models.DescribeDataSourceFieldsResponse:
        """
        @summary Retrieve all fields of a data source
        
        @param request: DescribeDataSourceFieldsRequest
        @return: DescribeDataSourceFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_data_source_fields_with_options_async(request, runtime)

    def describe_data_source_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeDataSourcePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourcePageListResponse:
        """
        @summary Data Source List Interface
        
        @param request: DescribeDataSourcePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourcePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourcePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourcePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_data_source_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDataSourcePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDataSourcePageListResponse:
        """
        @summary Data Source List Interface
        
        @param request: DescribeDataSourcePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourcePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSourcePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDataSourcePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_data_source_page_list(
        self,
        request: xtee_20210910_models.DescribeDataSourcePageListRequest,
    ) -> xtee_20210910_models.DescribeDataSourcePageListResponse:
        """
        @summary Data Source List Interface
        
        @param request: DescribeDataSourcePageListRequest
        @return: DescribeDataSourcePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_data_source_page_list_with_options(request, runtime)

    async def describe_data_source_page_list_async(
        self,
        request: xtee_20210910_models.DescribeDataSourcePageListRequest,
    ) -> xtee_20210910_models.DescribeDataSourcePageListResponse:
        """
        @summary Data Source List Interface
        
        @param request: DescribeDataSourcePageListRequest
        @return: DescribeDataSourcePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_data_source_page_list_with_options_async(request, runtime)

    def describe_decision_result_fluctuation_with_options(
        self,
        request: xtee_20210910_models.DescribeDecisionResultFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDecisionResultFluctuationResponse:
        """
        @summary Decision Result Fluctuation Detection
        
        @param request: DescribeDecisionResultFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDecisionResultFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDecisionResultFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDecisionResultFluctuationResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_decision_result_fluctuation_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDecisionResultFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDecisionResultFluctuationResponse:
        """
        @summary Decision Result Fluctuation Detection
        
        @param request: DescribeDecisionResultFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDecisionResultFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDecisionResultFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDecisionResultFluctuationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_decision_result_fluctuation(
        self,
        request: xtee_20210910_models.DescribeDecisionResultFluctuationRequest,
    ) -> xtee_20210910_models.DescribeDecisionResultFluctuationResponse:
        """
        @summary Decision Result Fluctuation Detection
        
        @param request: DescribeDecisionResultFluctuationRequest
        @return: DescribeDecisionResultFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_decision_result_fluctuation_with_options(request, runtime)

    async def describe_decision_result_fluctuation_async(
        self,
        request: xtee_20210910_models.DescribeDecisionResultFluctuationRequest,
    ) -> xtee_20210910_models.DescribeDecisionResultFluctuationResponse:
        """
        @summary Decision Result Fluctuation Detection
        
        @param request: DescribeDecisionResultFluctuationRequest
        @return: DescribeDecisionResultFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_decision_result_fluctuation_with_options_async(request, runtime)

    def describe_decision_result_trend_with_options(
        self,
        request: xtee_20210910_models.DescribeDecisionResultTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDecisionResultTrendResponse:
        """
        @summary Decision Result Fluctuation Trend
        
        @param request: DescribeDecisionResultTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDecisionResultTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDecisionResultTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDecisionResultTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_decision_result_trend_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDecisionResultTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDecisionResultTrendResponse:
        """
        @summary Decision Result Fluctuation Trend
        
        @param request: DescribeDecisionResultTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDecisionResultTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDecisionResultTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDecisionResultTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_decision_result_trend(
        self,
        request: xtee_20210910_models.DescribeDecisionResultTrendRequest,
    ) -> xtee_20210910_models.DescribeDecisionResultTrendResponse:
        """
        @summary Decision Result Fluctuation Trend
        
        @param request: DescribeDecisionResultTrendRequest
        @return: DescribeDecisionResultTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_decision_result_trend_with_options(request, runtime)

    async def describe_decision_result_trend_async(
        self,
        request: xtee_20210910_models.DescribeDecisionResultTrendRequest,
    ) -> xtee_20210910_models.DescribeDecisionResultTrendResponse:
        """
        @summary Decision Result Fluctuation Trend
        
        @param request: DescribeDecisionResultTrendRequest
        @return: DescribeDecisionResultTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_decision_result_trend_with_options_async(request, runtime)

    def describe_detail_start_with_options(
        self,
        request: xtee_20210910_models.DescribeDetailStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDetailStartResponse:
        """
        @summary Detailed Statistics
        
        @param request: DescribeDetailStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDetailStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.end_ds):
            query['endDs'] = request.end_ds
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        if not UtilClient.is_unset(request.start_ds):
            query['startDs'] = request.start_ds
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDetailStart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDetailStartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_detail_start_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDetailStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDetailStartResponse:
        """
        @summary Detailed Statistics
        
        @param request: DescribeDetailStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDetailStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.end_ds):
            query['endDs'] = request.end_ds
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        if not UtilClient.is_unset(request.start_ds):
            query['startDs'] = request.start_ds
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDetailStart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDetailStartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_detail_start(
        self,
        request: xtee_20210910_models.DescribeDetailStartRequest,
    ) -> xtee_20210910_models.DescribeDetailStartResponse:
        """
        @summary Detailed Statistics
        
        @param request: DescribeDetailStartRequest
        @return: DescribeDetailStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_detail_start_with_options(request, runtime)

    async def describe_detail_start_async(
        self,
        request: xtee_20210910_models.DescribeDetailStartRequest,
    ) -> xtee_20210910_models.DescribeDetailStartResponse:
        """
        @summary Detailed Statistics
        
        @param request: DescribeDetailStartRequest
        @return: DescribeDetailStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_detail_start_with_options_async(request, runtime)

    def describe_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDownloadUrlResponse:
        """
        @summary Download
        
        @param request: DescribeDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeDownloadUrlResponse:
        """
        @summary Download
        
        @param request: DescribeDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_download_url(
        self,
        request: xtee_20210910_models.DescribeDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeDownloadUrlResponse:
        """
        @summary Download
        
        @param request: DescribeDownloadUrlRequest
        @return: DescribeDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_download_url_with_options(request, runtime)

    async def describe_download_url_async(
        self,
        request: xtee_20210910_models.DescribeDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeDownloadUrlResponse:
        """
        @summary Download
        
        @param request: DescribeDownloadUrlRequest
        @return: DescribeDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_download_url_with_options_async(request, runtime)

    def describe_event_base_info_by_event_code_with_options(
        self,
        request: xtee_20210910_models.DescribeEventBaseInfoByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse:
        """
        @summary Query Event Details
        
        @param request: DescribeEventBaseInfoByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventBaseInfoByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventBaseInfoByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_base_info_by_event_code_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventBaseInfoByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse:
        """
        @summary Query Event Details
        
        @param request: DescribeEventBaseInfoByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventBaseInfoByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventBaseInfoByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_base_info_by_event_code(
        self,
        request: xtee_20210910_models.DescribeEventBaseInfoByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse:
        """
        @summary Query Event Details
        
        @param request: DescribeEventBaseInfoByEventCodeRequest
        @return: DescribeEventBaseInfoByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_base_info_by_event_code_with_options(request, runtime)

    async def describe_event_base_info_by_event_code_async(
        self,
        request: xtee_20210910_models.DescribeEventBaseInfoByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeEventBaseInfoByEventCodeResponse:
        """
        @summary Query Event Details
        
        @param request: DescribeEventBaseInfoByEventCodeRequest
        @return: DescribeEventBaseInfoByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_base_info_by_event_code_with_options_async(request, runtime)

    def describe_event_count_with_options(
        self,
        request: xtee_20210910_models.DescribeEventCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeEventCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_count_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeEventCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_count(
        self,
        request: xtee_20210910_models.DescribeEventCountRequest,
    ) -> xtee_20210910_models.DescribeEventCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeEventCountRequest
        @return: DescribeEventCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_count_with_options(request, runtime)

    async def describe_event_count_async(
        self,
        request: xtee_20210910_models.DescribeEventCountRequest,
    ) -> xtee_20210910_models.DescribeEventCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeEventCountRequest
        @return: DescribeEventCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_count_with_options_async(request, runtime)

    def describe_event_detail_by_request_id_with_options(
        self,
        request: xtee_20210910_models.DescribeEventDetailByRequestIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventDetailByRequestIdResponse:
        """
        @summary Query event details based on the request ID
        
        @param request: DescribeEventDetailByRequestIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventDetailByRequestIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_time):
            query['eventTime'] = request.event_time
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventDetailByRequestId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventDetailByRequestIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_detail_by_request_id_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventDetailByRequestIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventDetailByRequestIdResponse:
        """
        @summary Query event details based on the request ID
        
        @param request: DescribeEventDetailByRequestIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventDetailByRequestIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_time):
            query['eventTime'] = request.event_time
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventDetailByRequestId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventDetailByRequestIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_detail_by_request_id(
        self,
        request: xtee_20210910_models.DescribeEventDetailByRequestIdRequest,
    ) -> xtee_20210910_models.DescribeEventDetailByRequestIdResponse:
        """
        @summary Query event details based on the request ID
        
        @param request: DescribeEventDetailByRequestIdRequest
        @return: DescribeEventDetailByRequestIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_detail_by_request_id_with_options(request, runtime)

    async def describe_event_detail_by_request_id_async(
        self,
        request: xtee_20210910_models.DescribeEventDetailByRequestIdRequest,
    ) -> xtee_20210910_models.DescribeEventDetailByRequestIdResponse:
        """
        @summary Query event details based on the request ID
        
        @param request: DescribeEventDetailByRequestIdRequest
        @return: DescribeEventDetailByRequestIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_detail_by_request_id_with_options_async(request, runtime)

    def describe_event_log_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeEventLogDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventLogDetailResponse:
        """
        @summary Query Event History Details
        
        @param request: DescribeEventLogDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLogDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.req_id_by_log):
            query['reqIdByLog'] = request.req_id_by_log
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLogDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventLogDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_log_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventLogDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventLogDetailResponse:
        """
        @summary Query Event History Details
        
        @param request: DescribeEventLogDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLogDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.req_id_by_log):
            query['reqIdByLog'] = request.req_id_by_log
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLogDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventLogDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_log_detail(
        self,
        request: xtee_20210910_models.DescribeEventLogDetailRequest,
    ) -> xtee_20210910_models.DescribeEventLogDetailResponse:
        """
        @summary Query Event History Details
        
        @param request: DescribeEventLogDetailRequest
        @return: DescribeEventLogDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_log_detail_with_options(request, runtime)

    async def describe_event_log_detail_async(
        self,
        request: xtee_20210910_models.DescribeEventLogDetailRequest,
    ) -> xtee_20210910_models.DescribeEventLogDetailResponse:
        """
        @summary Query Event History Details
        
        @param request: DescribeEventLogDetailRequest
        @return: DescribeEventLogDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_log_detail_with_options_async(request, runtime)

    def describe_event_log_page_with_options(
        self,
        request: xtee_20210910_models.DescribeEventLogPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventLogPageResponse:
        """
        @summary 查询事件历史列表
        
        @param request: DescribeEventLogPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLogPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.account_id_prp):
            query['accountIdPRP'] = request.account_id_prp
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.condition_1al):
            query['condition1AL'] = request.condition_1al
        if not UtilClient.is_unset(request.condition_2al):
            query['condition2AL'] = request.condition_2al
        if not UtilClient.is_unset(request.condition_3al):
            query['condition3AL'] = request.condition_3al
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.device_type_lrp):
            query['deviceTypeLRP'] = request.device_type_lrp
        if not UtilClient.is_unset(request.email_prp):
            query['emailPRP'] = request.email_prp
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.fail_reason_lrp):
            query['failReasonLRP'] = request.fail_reason_lrp
        if not UtilClient.is_unset(request.ip_prp):
            query['ipPRP'] = request.ip_prp
        if not UtilClient.is_unset(request.login_result_arp):
            query['loginResultARP'] = request.login_result_arp
        if not UtilClient.is_unset(request.login_type_lrp):
            query['loginTypeLRP'] = request.login_type_lrp
        if not UtilClient.is_unset(request.mac_prp):
            query['macPRP'] = request.mac_prp
        if not UtilClient.is_unset(request.mobile_prp):
            query['mobilePRP'] = request.mobile_prp
        if not UtilClient.is_unset(request.nick_name_prp):
            query['nickNamePRP'] = request.nick_name_prp
        if not UtilClient.is_unset(request.operate_source_lrp):
            query['operateSourceLRP'] = request.operate_source_lrp
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.refer_prp):
            query['referPRP'] = request.refer_prp
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.register_ip_prp):
            query['registerIpPRP'] = request.register_ip_prp
        if not UtilClient.is_unset(request.req_id_pbs):
            query['reqIdPBS'] = request.req_id_pbs
        if not UtilClient.is_unset(request.score_ebs):
            query['scoreEBS'] = request.score_ebs
        if not UtilClient.is_unset(request.score_sbs):
            query['scoreSBS'] = request.score_sbs
        if not UtilClient.is_unset(request.service_abs):
            query['serviceABS'] = request.service_abs
        if not UtilClient.is_unset(request.tags_lbs):
            query['tagsLBS'] = request.tags_lbs
        if not UtilClient.is_unset(request.umid_pdi):
            query['umidPDI'] = request.umid_pdi
        if not UtilClient.is_unset(request.user_agent_prp):
            query['userAgentPRP'] = request.user_agent_prp
        if not UtilClient.is_unset(request.user_name_type_lrp):
            query['userNameTypeLRP'] = request.user_name_type_lrp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLogPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventLogPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_log_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventLogPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventLogPageResponse:
        """
        @summary 查询事件历史列表
        
        @param request: DescribeEventLogPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLogPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.account_id_prp):
            query['accountIdPRP'] = request.account_id_prp
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.condition_1al):
            query['condition1AL'] = request.condition_1al
        if not UtilClient.is_unset(request.condition_2al):
            query['condition2AL'] = request.condition_2al
        if not UtilClient.is_unset(request.condition_3al):
            query['condition3AL'] = request.condition_3al
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.device_type_lrp):
            query['deviceTypeLRP'] = request.device_type_lrp
        if not UtilClient.is_unset(request.email_prp):
            query['emailPRP'] = request.email_prp
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.fail_reason_lrp):
            query['failReasonLRP'] = request.fail_reason_lrp
        if not UtilClient.is_unset(request.ip_prp):
            query['ipPRP'] = request.ip_prp
        if not UtilClient.is_unset(request.login_result_arp):
            query['loginResultARP'] = request.login_result_arp
        if not UtilClient.is_unset(request.login_type_lrp):
            query['loginTypeLRP'] = request.login_type_lrp
        if not UtilClient.is_unset(request.mac_prp):
            query['macPRP'] = request.mac_prp
        if not UtilClient.is_unset(request.mobile_prp):
            query['mobilePRP'] = request.mobile_prp
        if not UtilClient.is_unset(request.nick_name_prp):
            query['nickNamePRP'] = request.nick_name_prp
        if not UtilClient.is_unset(request.operate_source_lrp):
            query['operateSourceLRP'] = request.operate_source_lrp
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.refer_prp):
            query['referPRP'] = request.refer_prp
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.register_ip_prp):
            query['registerIpPRP'] = request.register_ip_prp
        if not UtilClient.is_unset(request.req_id_pbs):
            query['reqIdPBS'] = request.req_id_pbs
        if not UtilClient.is_unset(request.score_ebs):
            query['scoreEBS'] = request.score_ebs
        if not UtilClient.is_unset(request.score_sbs):
            query['scoreSBS'] = request.score_sbs
        if not UtilClient.is_unset(request.service_abs):
            query['serviceABS'] = request.service_abs
        if not UtilClient.is_unset(request.tags_lbs):
            query['tagsLBS'] = request.tags_lbs
        if not UtilClient.is_unset(request.umid_pdi):
            query['umidPDI'] = request.umid_pdi
        if not UtilClient.is_unset(request.user_agent_prp):
            query['userAgentPRP'] = request.user_agent_prp
        if not UtilClient.is_unset(request.user_name_type_lrp):
            query['userNameTypeLRP'] = request.user_name_type_lrp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLogPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventLogPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_log_page(
        self,
        request: xtee_20210910_models.DescribeEventLogPageRequest,
    ) -> xtee_20210910_models.DescribeEventLogPageResponse:
        """
        @summary 查询事件历史列表
        
        @param request: DescribeEventLogPageRequest
        @return: DescribeEventLogPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_log_page_with_options(request, runtime)

    async def describe_event_log_page_async(
        self,
        request: xtee_20210910_models.DescribeEventLogPageRequest,
    ) -> xtee_20210910_models.DescribeEventLogPageResponse:
        """
        @summary 查询事件历史列表
        
        @param request: DescribeEventLogPageRequest
        @return: DescribeEventLogPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_log_page_with_options_async(request, runtime)

    def describe_event_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeEventPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventPageListResponse:
        """
        @summary Paged Query for Events
        
        @param request: DescribeEventPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.event_status):
            query['eventStatus'] = request.event_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventPageListResponse:
        """
        @summary Paged Query for Events
        
        @param request: DescribeEventPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.event_status):
            query['eventStatus'] = request.event_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_page_list(
        self,
        request: xtee_20210910_models.DescribeEventPageListRequest,
    ) -> xtee_20210910_models.DescribeEventPageListResponse:
        """
        @summary Paged Query for Events
        
        @param request: DescribeEventPageListRequest
        @return: DescribeEventPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_page_list_with_options(request, runtime)

    async def describe_event_page_list_async(
        self,
        request: xtee_20210910_models.DescribeEventPageListRequest,
    ) -> xtee_20210910_models.DescribeEventPageListResponse:
        """
        @summary Paged Query for Events
        
        @param request: DescribeEventPageListRequest
        @return: DescribeEventPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_page_list_with_options_async(request, runtime)

    def describe_event_result_bar_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeEventResultBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventResultBarChartResponse:
        """
        @summary Risk Dashboard
        
        @param request: DescribeEventResultBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventResultBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventResultBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventResultBarChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_result_bar_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventResultBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventResultBarChartResponse:
        """
        @summary Risk Dashboard
        
        @param request: DescribeEventResultBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventResultBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventResultBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventResultBarChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_result_bar_chart(
        self,
        request: xtee_20210910_models.DescribeEventResultBarChartRequest,
    ) -> xtee_20210910_models.DescribeEventResultBarChartResponse:
        """
        @summary Risk Dashboard
        
        @param request: DescribeEventResultBarChartRequest
        @return: DescribeEventResultBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_result_bar_chart_with_options(request, runtime)

    async def describe_event_result_bar_chart_async(
        self,
        request: xtee_20210910_models.DescribeEventResultBarChartRequest,
    ) -> xtee_20210910_models.DescribeEventResultBarChartResponse:
        """
        @summary Risk Dashboard
        
        @param request: DescribeEventResultBarChartRequest
        @return: DescribeEventResultBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_result_bar_chart_with_options_async(request, runtime)

    def describe_event_result_list_with_options(
        self,
        request: xtee_20210910_models.DescribeEventResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventResultListResponse:
        """
        @summary Event Overview List
        
        @param request: DescribeEventResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventResultList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventResultListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_result_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventResultListResponse:
        """
        @summary Event Overview List
        
        @param request: DescribeEventResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventResultList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventResultListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_result_list(
        self,
        request: xtee_20210910_models.DescribeEventResultListRequest,
    ) -> xtee_20210910_models.DescribeEventResultListResponse:
        """
        @summary Event Overview List
        
        @param request: DescribeEventResultListRequest
        @return: DescribeEventResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_result_list_with_options(request, runtime)

    async def describe_event_result_list_async(
        self,
        request: xtee_20210910_models.DescribeEventResultListRequest,
    ) -> xtee_20210910_models.DescribeEventResultListResponse:
        """
        @summary Event Overview List
        
        @param request: DescribeEventResultListRequest
        @return: DescribeEventResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_result_list_with_options_async(request, runtime)

    def describe_event_task_history_with_options(
        self,
        request: xtee_20210910_models.DescribeEventTaskHistoryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventTaskHistoryResponse:
        """
        @summary Query Policy Download List
        
        @param request: DescribeEventTaskHistoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventTaskHistoryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventTaskHistory',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventTaskHistoryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_task_history_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventTaskHistoryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventTaskHistoryResponse:
        """
        @summary Query Policy Download List
        
        @param request: DescribeEventTaskHistoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventTaskHistoryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventTaskHistory',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventTaskHistoryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_task_history(
        self,
        request: xtee_20210910_models.DescribeEventTaskHistoryRequest,
    ) -> xtee_20210910_models.DescribeEventTaskHistoryResponse:
        """
        @summary Query Policy Download List
        
        @param request: DescribeEventTaskHistoryRequest
        @return: DescribeEventTaskHistoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_task_history_with_options(request, runtime)

    async def describe_event_task_history_async(
        self,
        request: xtee_20210910_models.DescribeEventTaskHistoryRequest,
    ) -> xtee_20210910_models.DescribeEventTaskHistoryResponse:
        """
        @summary Query Policy Download List
        
        @param request: DescribeEventTaskHistoryRequest
        @return: DescribeEventTaskHistoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_task_history_with_options_async(request, runtime)

    def describe_event_total_count_report_with_options(
        self,
        request: xtee_20210910_models.DescribeEventTotalCountReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventTotalCountReportResponse:
        """
        @summary Event Invocation Count
        
        @param request: DescribeEventTotalCountReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventTotalCountReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventTotalCountReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventTotalCountReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_total_count_report_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventTotalCountReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventTotalCountReportResponse:
        """
        @summary Event Invocation Count
        
        @param request: DescribeEventTotalCountReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventTotalCountReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventTotalCountReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventTotalCountReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_total_count_report(
        self,
        request: xtee_20210910_models.DescribeEventTotalCountReportRequest,
    ) -> xtee_20210910_models.DescribeEventTotalCountReportResponse:
        """
        @summary Event Invocation Count
        
        @param request: DescribeEventTotalCountReportRequest
        @return: DescribeEventTotalCountReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_total_count_report_with_options(request, runtime)

    async def describe_event_total_count_report_async(
        self,
        request: xtee_20210910_models.DescribeEventTotalCountReportRequest,
    ) -> xtee_20210910_models.DescribeEventTotalCountReportResponse:
        """
        @summary Event Invocation Count
        
        @param request: DescribeEventTotalCountReportRequest
        @return: DescribeEventTotalCountReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_total_count_report_with_options_async(request, runtime)

    def describe_event_upload_policy_with_options(
        self,
        request: xtee_20210910_models.DescribeEventUploadPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventUploadPolicyResponse:
        """
        @summary Batch Import Policy
        
        @param request: DescribeEventUploadPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventUploadPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventUploadPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventUploadPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_upload_policy_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventUploadPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventUploadPolicyResponse:
        """
        @summary Batch Import Policy
        
        @param request: DescribeEventUploadPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventUploadPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventUploadPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventUploadPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_upload_policy(
        self,
        request: xtee_20210910_models.DescribeEventUploadPolicyRequest,
    ) -> xtee_20210910_models.DescribeEventUploadPolicyResponse:
        """
        @summary Batch Import Policy
        
        @param request: DescribeEventUploadPolicyRequest
        @return: DescribeEventUploadPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_upload_policy_with_options(request, runtime)

    async def describe_event_upload_policy_async(
        self,
        request: xtee_20210910_models.DescribeEventUploadPolicyRequest,
    ) -> xtee_20210910_models.DescribeEventUploadPolicyResponse:
        """
        @summary Batch Import Policy
        
        @param request: DescribeEventUploadPolicyRequest
        @return: DescribeEventUploadPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_upload_policy_with_options_async(request, runtime)

    def describe_event_variable_list_with_options(
        self,
        request: xtee_20210910_models.DescribeEventVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableListResponse:
        """
        @summary 查询事件变量
        
        @param request: DescribeEventVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.filter_dto):
            query['filterDTO'] = request.filter_dto
        if not UtilClient.is_unset(request.ref_obj_id):
            query['refObjId'] = request.ref_obj_id
        if not UtilClient.is_unset(request.ref_obj_type):
            query['refObjType'] = request.ref_obj_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_variable_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableListResponse:
        """
        @summary 查询事件变量
        
        @param request: DescribeEventVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.filter_dto):
            query['filterDTO'] = request.filter_dto
        if not UtilClient.is_unset(request.ref_obj_id):
            query['refObjId'] = request.ref_obj_id
        if not UtilClient.is_unset(request.ref_obj_type):
            query['refObjType'] = request.ref_obj_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_variable_list(
        self,
        request: xtee_20210910_models.DescribeEventVariableListRequest,
    ) -> xtee_20210910_models.DescribeEventVariableListResponse:
        """
        @summary 查询事件变量
        
        @param request: DescribeEventVariableListRequest
        @return: DescribeEventVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_variable_list_with_options(request, runtime)

    async def describe_event_variable_list_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableListRequest,
    ) -> xtee_20210910_models.DescribeEventVariableListResponse:
        """
        @summary 查询事件变量
        
        @param request: DescribeEventVariableListRequest
        @return: DescribeEventVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_variable_list_with_options_async(request, runtime)

    def describe_event_variable_template_bind_with_options(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateBindResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableTemplateBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableTemplateBind',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableTemplateBindResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_variable_template_bind_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateBindResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableTemplateBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableTemplateBind',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableTemplateBindResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_variable_template_bind(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateBindRequest,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateBindResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateBindRequest
        @return: DescribeEventVariableTemplateBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_variable_template_bind_with_options(request, runtime)

    async def describe_event_variable_template_bind_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateBindRequest,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateBindResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateBindRequest
        @return: DescribeEventVariableTemplateBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_variable_template_bind_with_options_async(request, runtime)

    def describe_event_variable_template_list_with_options(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateListResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableTemplateListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableTemplateList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableTemplateListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_variable_template_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateListResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventVariableTemplateListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventVariableTemplateList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventVariableTemplateListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_variable_template_list(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateListRequest,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateListResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateListRequest
        @return: DescribeEventVariableTemplateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_variable_template_list_with_options(request, runtime)

    async def describe_event_variable_template_list_async(
        self,
        request: xtee_20210910_models.DescribeEventVariableTemplateListRequest,
    ) -> xtee_20210910_models.DescribeEventVariableTemplateListResponse:
        """
        @summary Query Event Template
        
        @param request: DescribeEventVariableTemplateListRequest
        @return: DescribeEventVariableTemplateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_variable_template_list_with_options_async(request, runtime)

    def describe_events_variable_list_with_options(
        self,
        request: xtee_20210910_models.DescribeEventsVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventsVariableListResponse:
        """
        @summary Query Event Variables
        
        @param request: DescribeEventsVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventsVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.filter_dto):
            query['filterDTO'] = request.filter_dto
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventsVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventsVariableListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_events_variable_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeEventsVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeEventsVariableListResponse:
        """
        @summary Query Event Variables
        
        @param request: DescribeEventsVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventsVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.filter_dto):
            query['filterDTO'] = request.filter_dto
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventsVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeEventsVariableListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_events_variable_list(
        self,
        request: xtee_20210910_models.DescribeEventsVariableListRequest,
    ) -> xtee_20210910_models.DescribeEventsVariableListResponse:
        """
        @summary Query Event Variables
        
        @param request: DescribeEventsVariableListRequest
        @return: DescribeEventsVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_events_variable_list_with_options(request, runtime)

    async def describe_events_variable_list_async(
        self,
        request: xtee_20210910_models.DescribeEventsVariableListRequest,
    ) -> xtee_20210910_models.DescribeEventsVariableListResponse:
        """
        @summary Query Event Variables
        
        @param request: DescribeEventsVariableListRequest
        @return: DescribeEventsVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_events_variable_list_with_options_async(request, runtime)

    def describe_excute_num_with_options(
        self,
        request: xtee_20210910_models.DescribeExcuteNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExcuteNumResponse:
        """
        @param request: DescribeExcuteNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExcuteNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.degree):
            query['Degree'] = request.degree
        if not UtilClient.is_unset(request.end_date):
            query['EndDate'] = request.end_date
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_date):
            query['StartDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExcuteNum',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExcuteNumResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_excute_num_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExcuteNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExcuteNumResponse:
        """
        @param request: DescribeExcuteNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExcuteNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.degree):
            query['Degree'] = request.degree
        if not UtilClient.is_unset(request.end_date):
            query['EndDate'] = request.end_date
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_date):
            query['StartDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExcuteNum',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExcuteNumResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_excute_num(
        self,
        request: xtee_20210910_models.DescribeExcuteNumRequest,
    ) -> xtee_20210910_models.DescribeExcuteNumResponse:
        """
        @param request: DescribeExcuteNumRequest
        @return: DescribeExcuteNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_excute_num_with_options(request, runtime)

    async def describe_excute_num_async(
        self,
        request: xtee_20210910_models.DescribeExcuteNumRequest,
    ) -> xtee_20210910_models.DescribeExcuteNumResponse:
        """
        @param request: DescribeExcuteNumRequest
        @return: DescribeExcuteNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_excute_num_with_options_async(request, runtime)

    def describe_exist_name_with_options(
        self,
        request: xtee_20210910_models.DescribeExistNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExistNameResponse:
        """
        @summary Validate if the field name is duplicated (based on user\\"s organization)
        
        @param request: DescribeExistNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExistNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExistName',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExistNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exist_name_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExistNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExistNameResponse:
        """
        @summary Validate if the field name is duplicated (based on user\\"s organization)
        
        @param request: DescribeExistNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExistNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExistName',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExistNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exist_name(
        self,
        request: xtee_20210910_models.DescribeExistNameRequest,
    ) -> xtee_20210910_models.DescribeExistNameResponse:
        """
        @summary Validate if the field name is duplicated (based on user\\"s organization)
        
        @param request: DescribeExistNameRequest
        @return: DescribeExistNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exist_name_with_options(request, runtime)

    async def describe_exist_name_async(
        self,
        request: xtee_20210910_models.DescribeExistNameRequest,
    ) -> xtee_20210910_models.DescribeExistNameResponse:
        """
        @summary Validate if the field name is duplicated (based on user\\"s organization)
        
        @param request: DescribeExistNameRequest
        @return: DescribeExistNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exist_name_with_options_async(request, runtime)

    def describe_exist_scene_with_options(
        self,
        request: xtee_20210910_models.DescribeExistSceneRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExistSceneResponse:
        """
        @summary Check if Scene Exists
        
        @param request: DescribeExistSceneRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExistSceneResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.scene_name):
            query['SceneName'] = request.scene_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExistScene',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExistSceneResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exist_scene_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExistSceneRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExistSceneResponse:
        """
        @summary Check if Scene Exists
        
        @param request: DescribeExistSceneRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExistSceneResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.scene_name):
            query['SceneName'] = request.scene_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExistScene',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExistSceneResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exist_scene(
        self,
        request: xtee_20210910_models.DescribeExistSceneRequest,
    ) -> xtee_20210910_models.DescribeExistSceneResponse:
        """
        @summary Check if Scene Exists
        
        @param request: DescribeExistSceneRequest
        @return: DescribeExistSceneResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exist_scene_with_options(request, runtime)

    async def describe_exist_scene_async(
        self,
        request: xtee_20210910_models.DescribeExistSceneRequest,
    ) -> xtee_20210910_models.DescribeExistSceneResponse:
        """
        @summary Check if Scene Exists
        
        @param request: DescribeExistSceneRequest
        @return: DescribeExistSceneResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exist_scene_with_options_async(request, runtime)

    def describe_expression_variable_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariableDetailResponse:
        """
        @summary Custom Variable Details
        
        @param request: DescribeExpressionVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariableDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_expression_variable_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariableDetailResponse:
        """
        @summary Custom Variable Details
        
        @param request: DescribeExpressionVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariableDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_expression_variable_detail(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariableDetailResponse:
        """
        @summary Custom Variable Details
        
        @param request: DescribeExpressionVariableDetailRequest
        @return: DescribeExpressionVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_expression_variable_detail_with_options(request, runtime)

    async def describe_expression_variable_detail_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariableDetailResponse:
        """
        @summary Custom Variable Details
        
        @param request: DescribeExpressionVariableDetailRequest
        @return: DescribeExpressionVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_expression_variable_detail_with_options_async(request, runtime)

    def describe_expression_variable_function_list_with_options(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableFunctionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariableFunctionListResponse:
        """
        @summary Function List
        
        @param request: DescribeExpressionVariableFunctionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariableFunctionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariableFunctionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariableFunctionListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_expression_variable_function_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableFunctionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariableFunctionListResponse:
        """
        @summary Function List
        
        @param request: DescribeExpressionVariableFunctionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariableFunctionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariableFunctionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariableFunctionListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_expression_variable_function_list(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableFunctionListRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariableFunctionListResponse:
        """
        @summary Function List
        
        @param request: DescribeExpressionVariableFunctionListRequest
        @return: DescribeExpressionVariableFunctionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_expression_variable_function_list_with_options(request, runtime)

    async def describe_expression_variable_function_list_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariableFunctionListRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariableFunctionListResponse:
        """
        @summary Function List
        
        @param request: DescribeExpressionVariableFunctionListRequest
        @return: DescribeExpressionVariableFunctionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_expression_variable_function_list_with_options_async(request, runtime)

    def describe_expression_variable_page_with_options(
        self,
        request: xtee_20210910_models.DescribeExpressionVariablePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariablePageResponse:
        """
        @summary Paged Query for Custom Variables
        
        @param request: DescribeExpressionVariablePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariablePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariablePage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariablePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_expression_variable_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariablePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeExpressionVariablePageResponse:
        """
        @summary Paged Query for Custom Variables
        
        @param request: DescribeExpressionVariablePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExpressionVariablePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExpressionVariablePage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeExpressionVariablePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_expression_variable_page(
        self,
        request: xtee_20210910_models.DescribeExpressionVariablePageRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariablePageResponse:
        """
        @summary Paged Query for Custom Variables
        
        @param request: DescribeExpressionVariablePageRequest
        @return: DescribeExpressionVariablePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_expression_variable_page_with_options(request, runtime)

    async def describe_expression_variable_page_async(
        self,
        request: xtee_20210910_models.DescribeExpressionVariablePageRequest,
    ) -> xtee_20210910_models.DescribeExpressionVariablePageResponse:
        """
        @summary Paged Query for Custom Variables
        
        @param request: DescribeExpressionVariablePageRequest
        @return: DescribeExpressionVariablePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_expression_variable_page_with_options_async(request, runtime)

    def describe_field_by_id_with_options(
        self,
        request: xtee_20210910_models.DescribeFieldByIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldByIdResponse:
        """
        @summary Get Field Details
        
        @param request: DescribeFieldByIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldByIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldById',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldByIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_field_by_id_with_options_async(
        self,
        request: xtee_20210910_models.DescribeFieldByIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldByIdResponse:
        """
        @summary Get Field Details
        
        @param request: DescribeFieldByIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldByIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldById',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldByIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_field_by_id(
        self,
        request: xtee_20210910_models.DescribeFieldByIdRequest,
    ) -> xtee_20210910_models.DescribeFieldByIdResponse:
        """
        @summary Get Field Details
        
        @param request: DescribeFieldByIdRequest
        @return: DescribeFieldByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_field_by_id_with_options(request, runtime)

    async def describe_field_by_id_async(
        self,
        request: xtee_20210910_models.DescribeFieldByIdRequest,
    ) -> xtee_20210910_models.DescribeFieldByIdResponse:
        """
        @summary Get Field Details
        
        @param request: DescribeFieldByIdRequest
        @return: DescribeFieldByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_field_by_id_with_options_async(request, runtime)

    def describe_field_list_with_options(
        self,
        request: xtee_20210910_models.DescribeFieldListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldListResponse:
        """
        @summary Query Field List
        
        @param request: DescribeFieldListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_field_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeFieldListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldListResponse:
        """
        @summary Query Field List
        
        @param request: DescribeFieldListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.inputs):
            query['inputs'] = request.inputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_field_list(
        self,
        request: xtee_20210910_models.DescribeFieldListRequest,
    ) -> xtee_20210910_models.DescribeFieldListResponse:
        """
        @summary Query Field List
        
        @param request: DescribeFieldListRequest
        @return: DescribeFieldListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_field_list_with_options(request, runtime)

    async def describe_field_list_async(
        self,
        request: xtee_20210910_models.DescribeFieldListRequest,
    ) -> xtee_20210910_models.DescribeFieldListResponse:
        """
        @summary Query Field List
        
        @param request: DescribeFieldListRequest
        @return: DescribeFieldListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_field_list_with_options_async(request, runtime)

    def describe_field_page_with_options(
        self,
        request: xtee_20210910_models.DescribeFieldPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldPageResponse:
        """
        @summary Query paged list of fields
        
        @param request: DescribeFieldPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_field_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeFieldPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeFieldPageResponse:
        """
        @summary Query paged list of fields
        
        @param request: DescribeFieldPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeFieldPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_field_page(
        self,
        request: xtee_20210910_models.DescribeFieldPageRequest,
    ) -> xtee_20210910_models.DescribeFieldPageResponse:
        """
        @summary Query paged list of fields
        
        @param request: DescribeFieldPageRequest
        @return: DescribeFieldPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_field_page_with_options(request, runtime)

    async def describe_field_page_async(
        self,
        request: xtee_20210910_models.DescribeFieldPageRequest,
    ) -> xtee_20210910_models.DescribeFieldPageResponse:
        """
        @summary Query paged list of fields
        
        @param request: DescribeFieldPageRequest
        @return: DescribeFieldPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_field_page_with_options_async(request, runtime)

    def describe_group_account_page_with_options(
        self,
        request: xtee_20210910_models.DescribeGroupAccountPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupAccountPageResponse:
        """
        @summary Community Account List
        
        @param request: DescribeGroupAccountPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupAccountPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.community_no):
            query['communityNo'] = request.community_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.field_key):
            query['fieldKey'] = request.field_key
        if not UtilClient.is_unset(request.field_val):
            query['fieldVal'] = request.field_val
        if not UtilClient.is_unset(request.is_page):
            query['isPage'] = request.is_page
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupAccountPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupAccountPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_account_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeGroupAccountPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupAccountPageResponse:
        """
        @summary Community Account List
        
        @param request: DescribeGroupAccountPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupAccountPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.community_no):
            query['communityNo'] = request.community_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.field_key):
            query['fieldKey'] = request.field_key
        if not UtilClient.is_unset(request.field_val):
            query['fieldVal'] = request.field_val
        if not UtilClient.is_unset(request.is_page):
            query['isPage'] = request.is_page
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupAccountPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupAccountPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_account_page(
        self,
        request: xtee_20210910_models.DescribeGroupAccountPageRequest,
    ) -> xtee_20210910_models.DescribeGroupAccountPageResponse:
        """
        @summary Community Account List
        
        @param request: DescribeGroupAccountPageRequest
        @return: DescribeGroupAccountPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_account_page_with_options(request, runtime)

    async def describe_group_account_page_async(
        self,
        request: xtee_20210910_models.DescribeGroupAccountPageRequest,
    ) -> xtee_20210910_models.DescribeGroupAccountPageResponse:
        """
        @summary Community Account List
        
        @param request: DescribeGroupAccountPageRequest
        @return: DescribeGroupAccountPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_account_page_with_options_async(request, runtime)

    def describe_group_condition_list_with_options(
        self,
        request: xtee_20210910_models.DescribeGroupConditionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupConditionListResponse:
        """
        @summary Community List Query Conditions
        
        @param request: DescribeGroupConditionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupConditionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupConditionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupConditionListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_condition_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeGroupConditionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupConditionListResponse:
        """
        @summary Community List Query Conditions
        
        @param request: DescribeGroupConditionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupConditionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupConditionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupConditionListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_condition_list(
        self,
        request: xtee_20210910_models.DescribeGroupConditionListRequest,
    ) -> xtee_20210910_models.DescribeGroupConditionListResponse:
        """
        @summary Community List Query Conditions
        
        @param request: DescribeGroupConditionListRequest
        @return: DescribeGroupConditionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_condition_list_with_options(request, runtime)

    async def describe_group_condition_list_async(
        self,
        request: xtee_20210910_models.DescribeGroupConditionListRequest,
    ) -> xtee_20210910_models.DescribeGroupConditionListResponse:
        """
        @summary Community List Query Conditions
        
        @param request: DescribeGroupConditionListRequest
        @return: DescribeGroupConditionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_condition_list_with_options_async(request, runtime)

    def describe_group_page_with_options(
        self,
        request: xtee_20210910_models.DescribeGroupPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupPageResponse:
        """
        @summary Community List
        
        @param request: DescribeGroupPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeGroupPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupPageResponse:
        """
        @summary Community List
        
        @param request: DescribeGroupPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        if not UtilClient.is_unset(request.time_type):
            query['timeType'] = request.time_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_page(
        self,
        request: xtee_20210910_models.DescribeGroupPageRequest,
    ) -> xtee_20210910_models.DescribeGroupPageResponse:
        """
        @summary Community List
        
        @param request: DescribeGroupPageRequest
        @return: DescribeGroupPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_page_with_options(request, runtime)

    async def describe_group_page_async(
        self,
        request: xtee_20210910_models.DescribeGroupPageRequest,
    ) -> xtee_20210910_models.DescribeGroupPageResponse:
        """
        @summary Community List
        
        @param request: DescribeGroupPageRequest
        @return: DescribeGroupPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_page_with_options_async(request, runtime)

    def describe_group_statistics_by_today_with_options(
        self,
        request: xtee_20210910_models.DescribeGroupStatisticsByTodayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupStatisticsByTodayResponse:
        """
        @summary Risk Communities Discovered Today
        
        @param request: DescribeGroupStatisticsByTodayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupStatisticsByTodayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupStatisticsByToday',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupStatisticsByTodayResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_statistics_by_today_with_options_async(
        self,
        request: xtee_20210910_models.DescribeGroupStatisticsByTodayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupStatisticsByTodayResponse:
        """
        @summary Risk Communities Discovered Today
        
        @param request: DescribeGroupStatisticsByTodayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupStatisticsByTodayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupStatisticsByToday',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupStatisticsByTodayResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_statistics_by_today(
        self,
        request: xtee_20210910_models.DescribeGroupStatisticsByTodayRequest,
    ) -> xtee_20210910_models.DescribeGroupStatisticsByTodayResponse:
        """
        @summary Risk Communities Discovered Today
        
        @param request: DescribeGroupStatisticsByTodayRequest
        @return: DescribeGroupStatisticsByTodayResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_statistics_by_today_with_options(request, runtime)

    async def describe_group_statistics_by_today_async(
        self,
        request: xtee_20210910_models.DescribeGroupStatisticsByTodayRequest,
    ) -> xtee_20210910_models.DescribeGroupStatisticsByTodayResponse:
        """
        @summary Risk Communities Discovered Today
        
        @param request: DescribeGroupStatisticsByTodayRequest
        @return: DescribeGroupStatisticsByTodayResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_statistics_by_today_with_options_async(request, runtime)

    def describe_group_trend_with_options(
        self,
        request: xtee_20210910_models.DescribeGroupTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupTrendResponse:
        """
        @summary Recent Trends in Risk Communities
        
        @param request: DescribeGroupTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.day):
            query['day'] = request.day
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_trend_with_options_async(
        self,
        request: xtee_20210910_models.DescribeGroupTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeGroupTrendResponse:
        """
        @summary Recent Trends in Risk Communities
        
        @param request: DescribeGroupTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.day):
            query['day'] = request.day
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeGroupTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_trend(
        self,
        request: xtee_20210910_models.DescribeGroupTrendRequest,
    ) -> xtee_20210910_models.DescribeGroupTrendResponse:
        """
        @summary Recent Trends in Risk Communities
        
        @param request: DescribeGroupTrendRequest
        @return: DescribeGroupTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_trend_with_options(request, runtime)

    async def describe_group_trend_async(
        self,
        request: xtee_20210910_models.DescribeGroupTrendRequest,
    ) -> xtee_20210910_models.DescribeGroupTrendResponse:
        """
        @summary Recent Trends in Risk Communities
        
        @param request: DescribeGroupTrendRequest
        @return: DescribeGroupTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_trend_with_options_async(request, runtime)

    def describe_has_rule_name_by_event_code_with_options(
        self,
        request: xtee_20210910_models.DescribeHasRuleNameByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse:
        """
        @summary Check if the policy name under the event name exists
        
        @param request: DescribeHasRuleNameByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHasRuleNameByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.exclude_rule_id):
            query['excludeRuleId'] = request.exclude_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHasRuleNameByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_has_rule_name_by_event_code_with_options_async(
        self,
        request: xtee_20210910_models.DescribeHasRuleNameByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse:
        """
        @summary Check if the policy name under the event name exists
        
        @param request: DescribeHasRuleNameByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHasRuleNameByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.exclude_rule_id):
            query['excludeRuleId'] = request.exclude_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHasRuleNameByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_has_rule_name_by_event_code(
        self,
        request: xtee_20210910_models.DescribeHasRuleNameByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse:
        """
        @summary Check if the policy name under the event name exists
        
        @param request: DescribeHasRuleNameByEventCodeRequest
        @return: DescribeHasRuleNameByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_has_rule_name_by_event_code_with_options(request, runtime)

    async def describe_has_rule_name_by_event_code_async(
        self,
        request: xtee_20210910_models.DescribeHasRuleNameByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeHasRuleNameByEventCodeResponse:
        """
        @summary Check if the policy name under the event name exists
        
        @param request: DescribeHasRuleNameByEventCodeRequest
        @return: DescribeHasRuleNameByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_has_rule_name_by_event_code_with_options_async(request, runtime)

    def describe_high_risk_pie_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeHighRiskPieChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHighRiskPieChartResponse:
        """
        @summary Risk Map Overview Chart (Pie Chart)
        
        @param request: DescribeHighRiskPieChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHighRiskPieChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHighRiskPieChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHighRiskPieChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_high_risk_pie_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeHighRiskPieChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHighRiskPieChartResponse:
        """
        @summary Risk Map Overview Chart (Pie Chart)
        
        @param request: DescribeHighRiskPieChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHighRiskPieChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHighRiskPieChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHighRiskPieChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_high_risk_pie_chart(
        self,
        request: xtee_20210910_models.DescribeHighRiskPieChartRequest,
    ) -> xtee_20210910_models.DescribeHighRiskPieChartResponse:
        """
        @summary Risk Map Overview Chart (Pie Chart)
        
        @param request: DescribeHighRiskPieChartRequest
        @return: DescribeHighRiskPieChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_high_risk_pie_chart_with_options(request, runtime)

    async def describe_high_risk_pie_chart_async(
        self,
        request: xtee_20210910_models.DescribeHighRiskPieChartRequest,
    ) -> xtee_20210910_models.DescribeHighRiskPieChartResponse:
        """
        @summary Risk Map Overview Chart (Pie Chart)
        
        @param request: DescribeHighRiskPieChartRequest
        @return: DescribeHighRiskPieChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_high_risk_pie_chart_with_options_async(request, runtime)

    def describe_hit_rule_fluctuation_with_options(
        self,
        request: xtee_20210910_models.DescribeHitRuleFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleFluctuationResponse:
        """
        @summary Policy Hit Fluctuation Detection
        
        @param request: DescribeHitRuleFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleFluctuationResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hit_rule_fluctuation_with_options_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleFluctuationResponse:
        """
        @summary Policy Hit Fluctuation Detection
        
        @param request: DescribeHitRuleFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleFluctuationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hit_rule_fluctuation(
        self,
        request: xtee_20210910_models.DescribeHitRuleFluctuationRequest,
    ) -> xtee_20210910_models.DescribeHitRuleFluctuationResponse:
        """
        @summary Policy Hit Fluctuation Detection
        
        @param request: DescribeHitRuleFluctuationRequest
        @return: DescribeHitRuleFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hit_rule_fluctuation_with_options(request, runtime)

    async def describe_hit_rule_fluctuation_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleFluctuationRequest,
    ) -> xtee_20210910_models.DescribeHitRuleFluctuationResponse:
        """
        @summary Policy Hit Fluctuation Detection
        
        @param request: DescribeHitRuleFluctuationRequest
        @return: DescribeHitRuleFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hit_rule_fluctuation_with_options_async(request, runtime)

    def describe_hit_rule_list_with_options(
        self,
        request: xtee_20210910_models.DescribeHitRuleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleListResponse:
        """
        @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
        
        @param request: DescribeHitRuleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hit_rule_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleListResponse:
        """
        @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
        
        @param request: DescribeHitRuleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hit_rule_list(
        self,
        request: xtee_20210910_models.DescribeHitRuleListRequest,
    ) -> xtee_20210910_models.DescribeHitRuleListResponse:
        """
        @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
        
        @param request: DescribeHitRuleListRequest
        @return: DescribeHitRuleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hit_rule_list_with_options(request, runtime)

    async def describe_hit_rule_list_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleListRequest,
    ) -> xtee_20210910_models.DescribeHitRuleListResponse:
        """
        @summary Top 20 Hits for Main Events/Bypass/Diversion Strategies
        
        @param request: DescribeHitRuleListRequest
        @return: DescribeHitRuleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hit_rule_list_with_options_async(request, runtime)

    def describe_hit_rule_trend_with_options(
        self,
        request: xtee_20210910_models.DescribeHitRuleTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleTrendResponse:
        """
        @summary Hit Rule Trend
        
        @param request: DescribeHitRuleTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hit_rule_trend_with_options_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeHitRuleTrendResponse:
        """
        @summary Hit Rule Trend
        
        @param request: DescribeHitRuleTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHitRuleTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHitRuleTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeHitRuleTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hit_rule_trend(
        self,
        request: xtee_20210910_models.DescribeHitRuleTrendRequest,
    ) -> xtee_20210910_models.DescribeHitRuleTrendResponse:
        """
        @summary Hit Rule Trend
        
        @param request: DescribeHitRuleTrendRequest
        @return: DescribeHitRuleTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hit_rule_trend_with_options(request, runtime)

    async def describe_hit_rule_trend_async(
        self,
        request: xtee_20210910_models.DescribeHitRuleTrendRequest,
    ) -> xtee_20210910_models.DescribeHitRuleTrendResponse:
        """
        @summary Hit Rule Trend
        
        @param request: DescribeHitRuleTrendRequest
        @return: DescribeHitRuleTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hit_rule_trend_with_options_async(request, runtime)

    def describe_init_dig_with_options(
        self,
        request: xtee_20210910_models.DescribeInitDigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeInitDigResponse:
        """
        @summary Initialization Popup Information
        
        @description Add prompt information in BOPS, POC new page initialization popup prompts this information
        
        @param request: DescribeInitDigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInitDigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInitDig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeInitDigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_init_dig_with_options_async(
        self,
        request: xtee_20210910_models.DescribeInitDigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeInitDigResponse:
        """
        @summary Initialization Popup Information
        
        @description Add prompt information in BOPS, POC new page initialization popup prompts this information
        
        @param request: DescribeInitDigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInitDigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInitDig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeInitDigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_init_dig(
        self,
        request: xtee_20210910_models.DescribeInitDigRequest,
    ) -> xtee_20210910_models.DescribeInitDigResponse:
        """
        @summary Initialization Popup Information
        
        @description Add prompt information in BOPS, POC new page initialization popup prompts this information
        
        @param request: DescribeInitDigRequest
        @return: DescribeInitDigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_init_dig_with_options(request, runtime)

    async def describe_init_dig_async(
        self,
        request: xtee_20210910_models.DescribeInitDigRequest,
    ) -> xtee_20210910_models.DescribeInitDigResponse:
        """
        @summary Initialization Popup Information
        
        @description Add prompt information in BOPS, POC new page initialization popup prompts this information
        
        @param request: DescribeInitDigRequest
        @return: DescribeInitDigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_init_dig_with_options_async(request, runtime)

    def describe_input_feild_count_by_event_code_with_options(
        self,
        request: xtee_20210910_models.DescribeInputFeildCountByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse:
        """
        @summary Query Total Number of Events
        
        @param request: DescribeInputFeildCountByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInputFeildCountByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInputFeildCountByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_input_feild_count_by_event_code_with_options_async(
        self,
        request: xtee_20210910_models.DescribeInputFeildCountByEventCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse:
        """
        @summary Query Total Number of Events
        
        @param request: DescribeInputFeildCountByEventCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInputFeildCountByEventCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInputFeildCountByEventCode',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_input_feild_count_by_event_code(
        self,
        request: xtee_20210910_models.DescribeInputFeildCountByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse:
        """
        @summary Query Total Number of Events
        
        @param request: DescribeInputFeildCountByEventCodeRequest
        @return: DescribeInputFeildCountByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_input_feild_count_by_event_code_with_options(request, runtime)

    async def describe_input_feild_count_by_event_code_async(
        self,
        request: xtee_20210910_models.DescribeInputFeildCountByEventCodeRequest,
    ) -> xtee_20210910_models.DescribeInputFeildCountByEventCodeResponse:
        """
        @summary Query Total Number of Events
        
        @param request: DescribeInputFeildCountByEventCodeRequest
        @return: DescribeInputFeildCountByEventCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_input_feild_count_by_event_code_with_options_async(request, runtime)

    def describe_list_model_with_options(
        self,
        request: xtee_20210910_models.DescribeListModelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeListModelResponse:
        """
        @summary Display of Model List
        
        @param request: DescribeListModelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeListModelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeListModel',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeListModelResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_list_model_with_options_async(
        self,
        request: xtee_20210910_models.DescribeListModelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeListModelResponse:
        """
        @summary Display of Model List
        
        @param request: DescribeListModelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeListModelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeListModel',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeListModelResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_list_model(
        self,
        request: xtee_20210910_models.DescribeListModelRequest,
    ) -> xtee_20210910_models.DescribeListModelResponse:
        """
        @summary Display of Model List
        
        @param request: DescribeListModelRequest
        @return: DescribeListModelResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_list_model_with_options(request, runtime)

    async def describe_list_model_async(
        self,
        request: xtee_20210910_models.DescribeListModelRequest,
    ) -> xtee_20210910_models.DescribeListModelResponse:
        """
        @summary Display of Model List
        
        @param request: DescribeListModelRequest
        @return: DescribeListModelResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_list_model_with_options_async(request, runtime)

    def describe_list_poc_with_options(
        self,
        request: xtee_20210910_models.DescribeListPocRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeListPocResponse:
        """
        @summary Task List
        
        @param request: DescribeListPocRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeListPocResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeListPoc',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeListPocResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_list_poc_with_options_async(
        self,
        request: xtee_20210910_models.DescribeListPocRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeListPocResponse:
        """
        @summary Task List
        
        @param request: DescribeListPocRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeListPocResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeListPoc',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeListPocResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_list_poc(
        self,
        request: xtee_20210910_models.DescribeListPocRequest,
    ) -> xtee_20210910_models.DescribeListPocResponse:
        """
        @summary Task List
        
        @param request: DescribeListPocRequest
        @return: DescribeListPocResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_list_poc_with_options(request, runtime)

    async def describe_list_poc_async(
        self,
        request: xtee_20210910_models.DescribeListPocRequest,
    ) -> xtee_20210910_models.DescribeListPocResponse:
        """
        @summary Task List
        
        @param request: DescribeListPocRequest
        @return: DescribeListPocResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_list_poc_with_options_async(request, runtime)

    def describe_loan_exec_list_with_options(
        self,
        request: xtee_20210910_models.DescribeLoanExecListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeLoanExecListResponse:
        """
        @summary Get Monitoring Object List
        
        @param request: DescribeLoanExecListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoanExecListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_no):
            query['batchNo'] = request.batch_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.monitor_obj):
            query['monitorObj'] = request.monitor_obj
        if not UtilClient.is_unset(request.monitor_status):
            query['monitorStatus'] = request.monitor_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoanExecList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeLoanExecListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_loan_exec_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeLoanExecListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeLoanExecListResponse:
        """
        @summary Get Monitoring Object List
        
        @param request: DescribeLoanExecListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoanExecListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_no):
            query['batchNo'] = request.batch_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.monitor_obj):
            query['monitorObj'] = request.monitor_obj
        if not UtilClient.is_unset(request.monitor_status):
            query['monitorStatus'] = request.monitor_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoanExecList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeLoanExecListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_loan_exec_list(
        self,
        request: xtee_20210910_models.DescribeLoanExecListRequest,
    ) -> xtee_20210910_models.DescribeLoanExecListResponse:
        """
        @summary Get Monitoring Object List
        
        @param request: DescribeLoanExecListRequest
        @return: DescribeLoanExecListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_loan_exec_list_with_options(request, runtime)

    async def describe_loan_exec_list_async(
        self,
        request: xtee_20210910_models.DescribeLoanExecListRequest,
    ) -> xtee_20210910_models.DescribeLoanExecListResponse:
        """
        @summary Get Monitoring Object List
        
        @param request: DescribeLoanExecListRequest
        @return: DescribeLoanExecListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_loan_exec_list_with_options_async(request, runtime)

    def describe_loan_task_list_with_options(
        self,
        request: xtee_20210910_models.DescribeLoanTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeLoanTaskListResponse:
        """
        @summary Get Loan Monitoring Task List
        
        @param request: DescribeLoanTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoanTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_no):
            query['batchNo'] = request.batch_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.monitor_status):
            query['monitorStatus'] = request.monitor_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoanTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeLoanTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_loan_task_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeLoanTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeLoanTaskListResponse:
        """
        @summary Get Loan Monitoring Task List
        
        @param request: DescribeLoanTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoanTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_no):
            query['batchNo'] = request.batch_no
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.monitor_status):
            query['monitorStatus'] = request.monitor_status
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoanTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeLoanTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_loan_task_list(
        self,
        request: xtee_20210910_models.DescribeLoanTaskListRequest,
    ) -> xtee_20210910_models.DescribeLoanTaskListResponse:
        """
        @summary Get Loan Monitoring Task List
        
        @param request: DescribeLoanTaskListRequest
        @return: DescribeLoanTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_loan_task_list_with_options(request, runtime)

    async def describe_loan_task_list_async(
        self,
        request: xtee_20210910_models.DescribeLoanTaskListRequest,
    ) -> xtee_20210910_models.DescribeLoanTaskListResponse:
        """
        @summary Get Loan Monitoring Task List
        
        @param request: DescribeLoanTaskListRequest
        @return: DescribeLoanTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_loan_task_list_with_options_async(request, runtime)

    def describe_mark_page_with_options(
        self,
        request: xtee_20210910_models.DescribeMarkPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMarkPageResponse:
        """
        @summary Mark List
        
        @param request: DescribeMarkPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMarkPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.is_page):
            query['isPage'] = request.is_page
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_log_id):
            query['taskLogId'] = request.task_log_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMarkPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMarkPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_mark_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeMarkPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMarkPageResponse:
        """
        @summary Mark List
        
        @param request: DescribeMarkPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMarkPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.direction):
            query['direction'] = request.direction
        if not UtilClient.is_unset(request.is_page):
            query['isPage'] = request.is_page
        if not UtilClient.is_unset(request.order):
            query['order'] = request.order
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_log_id):
            query['taskLogId'] = request.task_log_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMarkPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMarkPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_mark_page(
        self,
        request: xtee_20210910_models.DescribeMarkPageRequest,
    ) -> xtee_20210910_models.DescribeMarkPageResponse:
        """
        @summary Mark List
        
        @param request: DescribeMarkPageRequest
        @return: DescribeMarkPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_mark_page_with_options(request, runtime)

    async def describe_mark_page_async(
        self,
        request: xtee_20210910_models.DescribeMarkPageRequest,
    ) -> xtee_20210910_models.DescribeMarkPageResponse:
        """
        @summary Mark List
        
        @param request: DescribeMarkPageRequest
        @return: DescribeMarkPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_mark_page_with_options_async(request, runtime)

    def describe_menu_permission_with_options(
        self,
        request: xtee_20210910_models.DescribeMenuPermissionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMenuPermissionResponse:
        """
        @summary Check Permission
        
        @param request: DescribeMenuPermissionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMenuPermissionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.permission_type):
            query['permissionType'] = request.permission_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMenuPermission',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMenuPermissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_menu_permission_with_options_async(
        self,
        request: xtee_20210910_models.DescribeMenuPermissionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMenuPermissionResponse:
        """
        @summary Check Permission
        
        @param request: DescribeMenuPermissionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMenuPermissionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.permission_type):
            query['permissionType'] = request.permission_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMenuPermission',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMenuPermissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_menu_permission(
        self,
        request: xtee_20210910_models.DescribeMenuPermissionRequest,
    ) -> xtee_20210910_models.DescribeMenuPermissionResponse:
        """
        @summary Check Permission
        
        @param request: DescribeMenuPermissionRequest
        @return: DescribeMenuPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_menu_permission_with_options(request, runtime)

    async def describe_menu_permission_async(
        self,
        request: xtee_20210910_models.DescribeMenuPermissionRequest,
    ) -> xtee_20210910_models.DescribeMenuPermissionResponse:
        """
        @summary Check Permission
        
        @param request: DescribeMenuPermissionRequest
        @return: DescribeMenuPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_menu_permission_with_options_async(request, runtime)

    def describe_model_details_by_id_with_options(
        self,
        request: xtee_20210910_models.DescribeModelDetailsByIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeModelDetailsByIdResponse:
        """
        @summary View Result
        
        @param request: DescribeModelDetailsByIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModelDetailsByIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_id):
            query['ModelId'] = request.model_id
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeModelDetailsById',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeModelDetailsByIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_model_details_by_id_with_options_async(
        self,
        request: xtee_20210910_models.DescribeModelDetailsByIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeModelDetailsByIdResponse:
        """
        @summary View Result
        
        @param request: DescribeModelDetailsByIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModelDetailsByIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_id):
            query['ModelId'] = request.model_id
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeModelDetailsById',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeModelDetailsByIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_model_details_by_id(
        self,
        request: xtee_20210910_models.DescribeModelDetailsByIdRequest,
    ) -> xtee_20210910_models.DescribeModelDetailsByIdResponse:
        """
        @summary View Result
        
        @param request: DescribeModelDetailsByIdRequest
        @return: DescribeModelDetailsByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_model_details_by_id_with_options(request, runtime)

    async def describe_model_details_by_id_async(
        self,
        request: xtee_20210910_models.DescribeModelDetailsByIdRequest,
    ) -> xtee_20210910_models.DescribeModelDetailsByIdResponse:
        """
        @summary View Result
        
        @param request: DescribeModelDetailsByIdRequest
        @return: DescribeModelDetailsByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_model_details_by_id_with_options_async(request, runtime)

    def describe_model_oss_policy_with_options(
        self,
        request: xtee_20210910_models.DescribeModelOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeModelOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeModelOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModelOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeModelOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeModelOssPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_model_oss_policy_with_options_async(
        self,
        request: xtee_20210910_models.DescribeModelOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeModelOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeModelOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModelOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeModelOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeModelOssPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_model_oss_policy(
        self,
        request: xtee_20210910_models.DescribeModelOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeModelOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeModelOssPolicyRequest
        @return: DescribeModelOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_model_oss_policy_with_options(request, runtime)

    async def describe_model_oss_policy_async(
        self,
        request: xtee_20210910_models.DescribeModelOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeModelOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeModelOssPolicyRequest
        @return: DescribeModelOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_model_oss_policy_with_options_async(request, runtime)

    def describe_monitor_task_limit_with_options(
        self,
        request: xtee_20210910_models.DescribeMonitorTaskLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMonitorTaskLimitResponse:
        """
        @summary Query Task Limit
        
        @param request: DescribeMonitorTaskLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMonitorTaskLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMonitorTaskLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMonitorTaskLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_monitor_task_limit_with_options_async(
        self,
        request: xtee_20210910_models.DescribeMonitorTaskLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeMonitorTaskLimitResponse:
        """
        @summary Query Task Limit
        
        @param request: DescribeMonitorTaskLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMonitorTaskLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMonitorTaskLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeMonitorTaskLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_monitor_task_limit(
        self,
        request: xtee_20210910_models.DescribeMonitorTaskLimitRequest,
    ) -> xtee_20210910_models.DescribeMonitorTaskLimitResponse:
        """
        @summary Query Task Limit
        
        @param request: DescribeMonitorTaskLimitRequest
        @return: DescribeMonitorTaskLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_monitor_task_limit_with_options(request, runtime)

    async def describe_monitor_task_limit_async(
        self,
        request: xtee_20210910_models.DescribeMonitorTaskLimitRequest,
    ) -> xtee_20210910_models.DescribeMonitorTaskLimitResponse:
        """
        @summary Query Task Limit
        
        @param request: DescribeMonitorTaskLimitRequest
        @return: DescribeMonitorTaskLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_monitor_task_limit_with_options_async(request, runtime)

    def describe_name_list_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListResponse:
        """
        @summary Query Name List Pagination
        
        @param request: DescribeNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListResponse:
        """
        @summary Query Name List Pagination
        
        @param request: DescribeNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list(
        self,
        request: xtee_20210910_models.DescribeNameListRequest,
    ) -> xtee_20210910_models.DescribeNameListResponse:
        """
        @summary Query Name List Pagination
        
        @param request: DescribeNameListRequest
        @return: DescribeNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_with_options(request, runtime)

    async def describe_name_list_async(
        self,
        request: xtee_20210910_models.DescribeNameListRequest,
    ) -> xtee_20210910_models.DescribeNameListResponse:
        """
        @summary Query Name List Pagination
        
        @param request: DescribeNameListRequest
        @return: DescribeNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_with_options_async(request, runtime)

    def describe_name_list_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListDownloadUrlResponse:
        """
        @summary Download Name List
        
        @param request: DescribeNameListDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListDownloadUrlResponse:
        """
        @summary Download Name List
        
        @param request: DescribeNameListDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list_download_url(
        self,
        request: xtee_20210910_models.DescribeNameListDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeNameListDownloadUrlResponse:
        """
        @summary Download Name List
        
        @param request: DescribeNameListDownloadUrlRequest
        @return: DescribeNameListDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_download_url_with_options(request, runtime)

    async def describe_name_list_download_url_async(
        self,
        request: xtee_20210910_models.DescribeNameListDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeNameListDownloadUrlResponse:
        """
        @summary Download Name List
        
        @param request: DescribeNameListDownloadUrlRequest
        @return: DescribeNameListDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_download_url_with_options_async(request, runtime)

    def describe_name_list_limit_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListLimitResponse:
        """
        @summary Query Name List Limit
        
        @param request: DescribeNameListLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_limit_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListLimitResponse:
        """
        @summary Query Name List Limit
        
        @param request: DescribeNameListLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListLimit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list_limit(
        self,
        request: xtee_20210910_models.DescribeNameListLimitRequest,
    ) -> xtee_20210910_models.DescribeNameListLimitResponse:
        """
        @summary Query Name List Limit
        
        @param request: DescribeNameListLimitRequest
        @return: DescribeNameListLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_limit_with_options(request, runtime)

    async def describe_name_list_limit_async(
        self,
        request: xtee_20210910_models.DescribeNameListLimitRequest,
    ) -> xtee_20210910_models.DescribeNameListLimitResponse:
        """
        @summary Query Name List Limit
        
        @param request: DescribeNameListLimitRequest
        @return: DescribeNameListLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_limit_with_options_async(request, runtime)

    def describe_name_list_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListPageListResponse:
        """
        @summary Query the content of the list
        
        @param request: DescribeNameListPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListPageListResponse:
        """
        @summary Query the content of the list
        
        @param request: DescribeNameListPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list_page_list(
        self,
        request: xtee_20210910_models.DescribeNameListPageListRequest,
    ) -> xtee_20210910_models.DescribeNameListPageListResponse:
        """
        @summary Query the content of the list
        
        @param request: DescribeNameListPageListRequest
        @return: DescribeNameListPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_page_list_with_options(request, runtime)

    async def describe_name_list_page_list_async(
        self,
        request: xtee_20210910_models.DescribeNameListPageListRequest,
    ) -> xtee_20210910_models.DescribeNameListPageListResponse:
        """
        @summary Query the content of the list
        
        @param request: DescribeNameListPageListRequest
        @return: DescribeNameListPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_page_list_with_options_async(request, runtime)

    def describe_name_list_type_list_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListTypeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListTypeListResponse:
        """
        @summary List of Name Types
        
        @param request: DescribeNameListTypeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListTypeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListTypeList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListTypeListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_type_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListTypeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListTypeListResponse:
        """
        @summary List of Name Types
        
        @param request: DescribeNameListTypeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListTypeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListTypeList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListTypeListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list_type_list(
        self,
        request: xtee_20210910_models.DescribeNameListTypeListRequest,
    ) -> xtee_20210910_models.DescribeNameListTypeListResponse:
        """
        @summary List of Name Types
        
        @param request: DescribeNameListTypeListRequest
        @return: DescribeNameListTypeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_type_list_with_options(request, runtime)

    async def describe_name_list_type_list_async(
        self,
        request: xtee_20210910_models.DescribeNameListTypeListRequest,
    ) -> xtee_20210910_models.DescribeNameListTypeListResponse:
        """
        @summary List of Name Types
        
        @param request: DescribeNameListTypeListRequest
        @return: DescribeNameListTypeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_type_list_with_options_async(request, runtime)

    def describe_name_list_variable_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeNameListVariablePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListVariablePageListResponse:
        """
        @summary Name List
        
        @param request: DescribeNameListVariablePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListVariablePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.name_list_type):
            query['nameListType'] = request.name_list_type
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListVariablePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListVariablePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_name_list_variable_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeNameListVariablePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeNameListVariablePageListResponse:
        """
        @summary Name List
        
        @param request: DescribeNameListVariablePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNameListVariablePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.name_list_type):
            query['nameListType'] = request.name_list_type
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNameListVariablePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeNameListVariablePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_name_list_variable_page_list(
        self,
        request: xtee_20210910_models.DescribeNameListVariablePageListRequest,
    ) -> xtee_20210910_models.DescribeNameListVariablePageListResponse:
        """
        @summary Name List
        
        @param request: DescribeNameListVariablePageListRequest
        @return: DescribeNameListVariablePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_name_list_variable_page_list_with_options(request, runtime)

    async def describe_name_list_variable_page_list_async(
        self,
        request: xtee_20210910_models.DescribeNameListVariablePageListRequest,
    ) -> xtee_20210910_models.DescribeNameListVariablePageListResponse:
        """
        @summary Name List
        
        @param request: DescribeNameListVariablePageListRequest
        @return: DescribeNameListVariablePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_name_list_variable_page_list_with_options_async(request, runtime)

    def describe_operation_log_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeOperationLogPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperationLogPageListResponse:
        """
        @summary Query event list by event name
        
        @param request: DescribeOperationLogPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperationLogPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperationLogPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperationLogPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_operation_log_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOperationLogPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperationLogPageListResponse:
        """
        @summary Query event list by event name
        
        @param request: DescribeOperationLogPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperationLogPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperationLogPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperationLogPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_operation_log_page_list(
        self,
        request: xtee_20210910_models.DescribeOperationLogPageListRequest,
    ) -> xtee_20210910_models.DescribeOperationLogPageListResponse:
        """
        @summary Query event list by event name
        
        @param request: DescribeOperationLogPageListRequest
        @return: DescribeOperationLogPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_operation_log_page_list_with_options(request, runtime)

    async def describe_operation_log_page_list_async(
        self,
        request: xtee_20210910_models.DescribeOperationLogPageListRequest,
    ) -> xtee_20210910_models.DescribeOperationLogPageListResponse:
        """
        @summary Query event list by event name
        
        @param request: DescribeOperationLogPageListRequest
        @return: DescribeOperationLogPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_operation_log_page_list_with_options_async(request, runtime)

    def describe_operator_list_with_options(
        self,
        request: xtee_20210910_models.DescribeOperatorListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListResponse:
        """
        @summary Query the operator mapping list based on customer ID
        
        @param request: DescribeOperatorListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_operator_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListResponse:
        """
        @summary Query the operator mapping list based on customer ID
        
        @param request: DescribeOperatorListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_operator_list(
        self,
        request: xtee_20210910_models.DescribeOperatorListRequest,
    ) -> xtee_20210910_models.DescribeOperatorListResponse:
        """
        @summary Query the operator mapping list based on customer ID
        
        @param request: DescribeOperatorListRequest
        @return: DescribeOperatorListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_operator_list_with_options(request, runtime)

    async def describe_operator_list_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListRequest,
    ) -> xtee_20210910_models.DescribeOperatorListResponse:
        """
        @summary Query the operator mapping list based on customer ID
        
        @param request: DescribeOperatorListRequest
        @return: DescribeOperatorListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_operator_list_with_options_async(request, runtime)

    def describe_operator_list_by_scene_with_options(
        self,
        request: xtee_20210910_models.DescribeOperatorListBySceneRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListBySceneResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListBySceneRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListBySceneResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorListByScene',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListBySceneResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_operator_list_by_scene_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListBySceneRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListBySceneResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListBySceneRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListBySceneResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorListByScene',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListBySceneResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_operator_list_by_scene(
        self,
        request: xtee_20210910_models.DescribeOperatorListBySceneRequest,
    ) -> xtee_20210910_models.DescribeOperatorListBySceneResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListBySceneRequest
        @return: DescribeOperatorListBySceneResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_operator_list_by_scene_with_options(request, runtime)

    async def describe_operator_list_by_scene_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListBySceneRequest,
    ) -> xtee_20210910_models.DescribeOperatorListBySceneResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListBySceneRequest
        @return: DescribeOperatorListBySceneResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_operator_list_by_scene_with_options_async(request, runtime)

    def describe_operator_list_by_type_with_options(
        self,
        request: xtee_20210910_models.DescribeOperatorListByTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListByTypeResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListByTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListByTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorListByType',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListByTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_operator_list_by_type_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListByTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOperatorListByTypeResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListByTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOperatorListByTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOperatorListByType',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOperatorListByTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_operator_list_by_type(
        self,
        request: xtee_20210910_models.DescribeOperatorListByTypeRequest,
    ) -> xtee_20210910_models.DescribeOperatorListByTypeResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListByTypeRequest
        @return: DescribeOperatorListByTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_operator_list_by_type_with_options(request, runtime)

    async def describe_operator_list_by_type_async(
        self,
        request: xtee_20210910_models.DescribeOperatorListByTypeRequest,
    ) -> xtee_20210910_models.DescribeOperatorListByTypeResponse:
        """
        @summary Query Operator Mapping List
        
        @param request: DescribeOperatorListByTypeRequest
        @return: DescribeOperatorListByTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_operator_list_by_type_with_options_async(request, runtime)

    def describe_oss_auth_status_with_options(
        self,
        request: xtee_20210910_models.DescribeOssAuthStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssAuthStatusResponse:
        """
        @summary Check Oss Authorization
        
        @param request: DescribeOssAuthStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssAuthStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssAuthStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssAuthStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_oss_auth_status_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOssAuthStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssAuthStatusResponse:
        """
        @summary Check Oss Authorization
        
        @param request: DescribeOssAuthStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssAuthStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssAuthStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssAuthStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_oss_auth_status(
        self,
        request: xtee_20210910_models.DescribeOssAuthStatusRequest,
    ) -> xtee_20210910_models.DescribeOssAuthStatusResponse:
        """
        @summary Check Oss Authorization
        
        @param request: DescribeOssAuthStatusRequest
        @return: DescribeOssAuthStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_oss_auth_status_with_options(request, runtime)

    async def describe_oss_auth_status_async(
        self,
        request: xtee_20210910_models.DescribeOssAuthStatusRequest,
    ) -> xtee_20210910_models.DescribeOssAuthStatusResponse:
        """
        @summary Check Oss Authorization
        
        @param request: DescribeOssAuthStatusRequest
        @return: DescribeOssAuthStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_oss_auth_status_with_options_async(request, runtime)

    def describe_oss_policy_with_options(
        self,
        request: xtee_20210910_models.DescribeOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssPolicyResponse:
        """
        @summary Get OSS Policy
        
        @param request: DescribeOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_oss_policy_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssPolicyResponse:
        """
        @summary Get OSS Policy
        
        @param request: DescribeOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_oss_policy(
        self,
        request: xtee_20210910_models.DescribeOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeOssPolicyResponse:
        """
        @summary Get OSS Policy
        
        @param request: DescribeOssPolicyRequest
        @return: DescribeOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_oss_policy_with_options(request, runtime)

    async def describe_oss_policy_async(
        self,
        request: xtee_20210910_models.DescribeOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeOssPolicyResponse:
        """
        @summary Get OSS Policy
        
        @param request: DescribeOssPolicyRequest
        @return: DescribeOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_oss_policy_with_options_async(request, runtime)

    def describe_oss_token_with_options(
        self,
        request: xtee_20210910_models.DescribeOssTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeOssTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.file_name):
            query['fileName'] = request.file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.upload_type):
            query['uploadType'] = request.upload_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssTokenResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_oss_token_with_options_async(
        self,
        request: xtee_20210910_models.DescribeOssTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeOssTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOssTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.file_name):
            query['fileName'] = request.file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.upload_type):
            query['uploadType'] = request.upload_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOssToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeOssTokenResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_oss_token(
        self,
        request: xtee_20210910_models.DescribeOssTokenRequest,
    ) -> xtee_20210910_models.DescribeOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeOssTokenRequest
        @return: DescribeOssTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_oss_token_with_options(request, runtime)

    async def describe_oss_token_async(
        self,
        request: xtee_20210910_models.DescribeOssTokenRequest,
    ) -> xtee_20210910_models.DescribeOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeOssTokenRequest
        @return: DescribeOssTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_oss_token_with_options_async(request, runtime)

    def describe_param_by_event_codes_with_options(
        self,
        request: xtee_20210910_models.DescribeParamByEventCodesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeParamByEventCodesResponse:
        """
        @summary Query Event Property List
        
        @param request: DescribeParamByEventCodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeParamByEventCodesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.parma):
            query['parma'] = request.parma
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeParamByEventCodes',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeParamByEventCodesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_param_by_event_codes_with_options_async(
        self,
        request: xtee_20210910_models.DescribeParamByEventCodesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeParamByEventCodesResponse:
        """
        @summary Query Event Property List
        
        @param request: DescribeParamByEventCodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeParamByEventCodesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.parma):
            query['parma'] = request.parma
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeParamByEventCodes',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeParamByEventCodesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_param_by_event_codes(
        self,
        request: xtee_20210910_models.DescribeParamByEventCodesRequest,
    ) -> xtee_20210910_models.DescribeParamByEventCodesResponse:
        """
        @summary Query Event Property List
        
        @param request: DescribeParamByEventCodesRequest
        @return: DescribeParamByEventCodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_param_by_event_codes_with_options(request, runtime)

    async def describe_param_by_event_codes_async(
        self,
        request: xtee_20210910_models.DescribeParamByEventCodesRequest,
    ) -> xtee_20210910_models.DescribeParamByEventCodesResponse:
        """
        @summary Query Event Property List
        
        @param request: DescribeParamByEventCodesRequest
        @return: DescribeParamByEventCodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_param_by_event_codes_with_options_async(request, runtime)

    def describe_poc_oss_token_with_options(
        self,
        request: xtee_20210910_models.DescribePocOssTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePocOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribePocOssTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePocOssTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePocOssToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePocOssTokenResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_poc_oss_token_with_options_async(
        self,
        request: xtee_20210910_models.DescribePocOssTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePocOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribePocOssTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePocOssTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePocOssToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePocOssTokenResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_poc_oss_token(
        self,
        request: xtee_20210910_models.DescribePocOssTokenRequest,
    ) -> xtee_20210910_models.DescribePocOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribePocOssTokenRequest
        @return: DescribePocOssTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_poc_oss_token_with_options(request, runtime)

    async def describe_poc_oss_token_async(
        self,
        request: xtee_20210910_models.DescribePocOssTokenRequest,
    ) -> xtee_20210910_models.DescribePocOssTokenResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribePocOssTokenRequest
        @return: DescribePocOssTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_poc_oss_token_with_options_async(request, runtime)

    def describe_poc_task_list_with_options(
        self,
        request: xtee_20210910_models.DescribePocTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePocTaskListResponse:
        """
        @summary Get POC Task List
        
        @param request: DescribePocTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePocTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePocTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePocTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_poc_task_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribePocTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePocTaskListResponse:
        """
        @summary Get POC Task List
        
        @param request: DescribePocTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePocTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePocTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePocTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_poc_task_list(
        self,
        request: xtee_20210910_models.DescribePocTaskListRequest,
    ) -> xtee_20210910_models.DescribePocTaskListResponse:
        """
        @summary Get POC Task List
        
        @param request: DescribePocTaskListRequest
        @return: DescribePocTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_poc_task_list_with_options(request, runtime)

    async def describe_poc_task_list_async(
        self,
        request: xtee_20210910_models.DescribePocTaskListRequest,
    ) -> xtee_20210910_models.DescribePocTaskListResponse:
        """
        @summary Get POC Task List
        
        @param request: DescribePocTaskListRequest
        @return: DescribePocTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_poc_task_list_with_options_async(request, runtime)

    def describe_private_stack_with_options(
        self,
        request: xtee_20210910_models.DescribePrivateStackRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePrivateStackResponse:
        """
        @summary Determine if Stack Private Domain Mode is Enabled
        
        @param request: DescribePrivateStackRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePrivateStackResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePrivateStack',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePrivateStackResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_private_stack_with_options_async(
        self,
        request: xtee_20210910_models.DescribePrivateStackRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribePrivateStackResponse:
        """
        @summary Determine if Stack Private Domain Mode is Enabled
        
        @param request: DescribePrivateStackRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePrivateStackResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePrivateStack',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribePrivateStackResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_private_stack(
        self,
        request: xtee_20210910_models.DescribePrivateStackRequest,
    ) -> xtee_20210910_models.DescribePrivateStackResponse:
        """
        @summary Determine if Stack Private Domain Mode is Enabled
        
        @param request: DescribePrivateStackRequest
        @return: DescribePrivateStackResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_private_stack_with_options(request, runtime)

    async def describe_private_stack_async(
        self,
        request: xtee_20210910_models.DescribePrivateStackRequest,
    ) -> xtee_20210910_models.DescribePrivateStackResponse:
        """
        @summary Determine if Stack Private Domain Mode is Enabled
        
        @param request: DescribePrivateStackRequest
        @return: DescribePrivateStackResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_private_stack_with_options_async(request, runtime)

    def describe_query_variable_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeQueryVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeQueryVariableDetailResponse:
        """
        @summary Query Variable Detail Query
        
        @param request: DescribeQueryVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQueryVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQueryVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeQueryVariableDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_query_variable_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeQueryVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeQueryVariableDetailResponse:
        """
        @summary Query Variable Detail Query
        
        @param request: DescribeQueryVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQueryVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQueryVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeQueryVariableDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_query_variable_detail(
        self,
        request: xtee_20210910_models.DescribeQueryVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeQueryVariableDetailResponse:
        """
        @summary Query Variable Detail Query
        
        @param request: DescribeQueryVariableDetailRequest
        @return: DescribeQueryVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_query_variable_detail_with_options(request, runtime)

    async def describe_query_variable_detail_async(
        self,
        request: xtee_20210910_models.DescribeQueryVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeQueryVariableDetailResponse:
        """
        @summary Query Variable Detail Query
        
        @param request: DescribeQueryVariableDetailRequest
        @return: DescribeQueryVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_query_variable_detail_with_options_async(request, runtime)

    def describe_query_variable_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeQueryVariablePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeQueryVariablePageListResponse:
        """
        @summary 查询变量列表查询
        
        @param request: DescribeQueryVariablePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQueryVariablePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQueryVariablePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeQueryVariablePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_query_variable_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeQueryVariablePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeQueryVariablePageListResponse:
        """
        @summary 查询变量列表查询
        
        @param request: DescribeQueryVariablePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQueryVariablePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQueryVariablePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeQueryVariablePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_query_variable_page_list(
        self,
        request: xtee_20210910_models.DescribeQueryVariablePageListRequest,
    ) -> xtee_20210910_models.DescribeQueryVariablePageListResponse:
        """
        @summary 查询变量列表查询
        
        @param request: DescribeQueryVariablePageListRequest
        @return: DescribeQueryVariablePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_query_variable_page_list_with_options(request, runtime)

    async def describe_query_variable_page_list_async(
        self,
        request: xtee_20210910_models.DescribeQueryVariablePageListRequest,
    ) -> xtee_20210910_models.DescribeQueryVariablePageListResponse:
        """
        @summary 查询变量列表查询
        
        @param request: DescribeQueryVariablePageListRequest
        @return: DescribeQueryVariablePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_query_variable_page_list_with_options_async(request, runtime)

    def describe_recommend_scene_variables_with_options(
        self,
        request: xtee_20210910_models.DescribeRecommendSceneVariablesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendSceneVariablesResponse:
        """
        @summary Query Variable List under Sample & Scenario
        
        @param request: DescribeRecommendSceneVariablesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendSceneVariablesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendSceneVariables',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendSceneVariablesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_recommend_scene_variables_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRecommendSceneVariablesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendSceneVariablesResponse:
        """
        @summary Query Variable List under Sample & Scenario
        
        @param request: DescribeRecommendSceneVariablesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendSceneVariablesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendSceneVariables',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendSceneVariablesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_recommend_scene_variables(
        self,
        request: xtee_20210910_models.DescribeRecommendSceneVariablesRequest,
    ) -> xtee_20210910_models.DescribeRecommendSceneVariablesResponse:
        """
        @summary Query Variable List under Sample & Scenario
        
        @param request: DescribeRecommendSceneVariablesRequest
        @return: DescribeRecommendSceneVariablesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_recommend_scene_variables_with_options(request, runtime)

    async def describe_recommend_scene_variables_async(
        self,
        request: xtee_20210910_models.DescribeRecommendSceneVariablesRequest,
    ) -> xtee_20210910_models.DescribeRecommendSceneVariablesResponse:
        """
        @summary Query Variable List under Sample & Scenario
        
        @param request: DescribeRecommendSceneVariablesRequest
        @return: DescribeRecommendSceneVariablesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_recommend_scene_variables_with_options_async(request, runtime)

    def describe_recommend_task_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendTaskDetailResponse:
        """
        @summary Variable Recommendation Details Query Interface
        
        @param request: DescribeRecommendTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendTaskDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendTaskDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_recommend_task_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendTaskDetailResponse:
        """
        @summary Variable Recommendation Details Query Interface
        
        @param request: DescribeRecommendTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendTaskDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendTaskDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_recommend_task_detail(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskDetailRequest,
    ) -> xtee_20210910_models.DescribeRecommendTaskDetailResponse:
        """
        @summary Variable Recommendation Details Query Interface
        
        @param request: DescribeRecommendTaskDetailRequest
        @return: DescribeRecommendTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_recommend_task_detail_with_options(request, runtime)

    async def describe_recommend_task_detail_async(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskDetailRequest,
    ) -> xtee_20210910_models.DescribeRecommendTaskDetailResponse:
        """
        @summary Variable Recommendation Details Query Interface
        
        @param request: DescribeRecommendTaskDetailRequest
        @return: DescribeRecommendTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_recommend_task_detail_with_options_async(request, runtime)

    def describe_recommend_task_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendTaskPageListResponse:
        """
        @summary Variable Recommendation List Query Interface
        
        @param request: DescribeRecommendTaskPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendTaskPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['taskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendTaskPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendTaskPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_recommend_task_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendTaskPageListResponse:
        """
        @summary Variable Recommendation List Query Interface
        
        @param request: DescribeRecommendTaskPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendTaskPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['taskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendTaskPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendTaskPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_recommend_task_page_list(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskPageListRequest,
    ) -> xtee_20210910_models.DescribeRecommendTaskPageListResponse:
        """
        @summary Variable Recommendation List Query Interface
        
        @param request: DescribeRecommendTaskPageListRequest
        @return: DescribeRecommendTaskPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_recommend_task_page_list_with_options(request, runtime)

    async def describe_recommend_task_page_list_async(
        self,
        request: xtee_20210910_models.DescribeRecommendTaskPageListRequest,
    ) -> xtee_20210910_models.DescribeRecommendTaskPageListResponse:
        """
        @summary Variable Recommendation List Query Interface
        
        @param request: DescribeRecommendTaskPageListRequest
        @return: DescribeRecommendTaskPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_recommend_task_page_list_with_options_async(request, runtime)

    def describe_recommend_variables_velocity_with_options(
        self,
        request: xtee_20210910_models.DescribeRecommendVariablesVelocityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendVariablesVelocityResponse:
        """
        @summary Query Indicators Information under Variables
        
        @param request: DescribeRecommendVariablesVelocityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendVariablesVelocityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        if not UtilClient.is_unset(request.variable_ids_str):
            query['variableIdsStr'] = request.variable_ids_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendVariablesVelocity',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendVariablesVelocityResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_recommend_variables_velocity_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRecommendVariablesVelocityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendVariablesVelocityResponse:
        """
        @summary Query Indicators Information under Variables
        
        @param request: DescribeRecommendVariablesVelocityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendVariablesVelocityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.task_id):
            query['taskId'] = request.task_id
        if not UtilClient.is_unset(request.variable_ids_str):
            query['variableIdsStr'] = request.variable_ids_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendVariablesVelocity',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendVariablesVelocityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_recommend_variables_velocity(
        self,
        request: xtee_20210910_models.DescribeRecommendVariablesVelocityRequest,
    ) -> xtee_20210910_models.DescribeRecommendVariablesVelocityResponse:
        """
        @summary Query Indicators Information under Variables
        
        @param request: DescribeRecommendVariablesVelocityRequest
        @return: DescribeRecommendVariablesVelocityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_recommend_variables_velocity_with_options(request, runtime)

    async def describe_recommend_variables_velocity_async(
        self,
        request: xtee_20210910_models.DescribeRecommendVariablesVelocityRequest,
    ) -> xtee_20210910_models.DescribeRecommendVariablesVelocityResponse:
        """
        @summary Query Indicators Information under Variables
        
        @param request: DescribeRecommendVariablesVelocityRequest
        @return: DescribeRecommendVariablesVelocityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_recommend_variables_velocity_with_options_async(request, runtime)

    def describe_recommend_velocities_with_options(
        self,
        request: xtee_20210910_models.DescribeRecommendVelocitiesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendVelocitiesResponse:
        """
        @summary Query Supported Metrics List
        
        @param request: DescribeRecommendVelocitiesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendVelocitiesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.code):
            query['code'] = request.code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendVelocities',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendVelocitiesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_recommend_velocities_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRecommendVelocitiesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRecommendVelocitiesResponse:
        """
        @summary Query Supported Metrics List
        
        @param request: DescribeRecommendVelocitiesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRecommendVelocitiesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.code):
            query['code'] = request.code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRecommendVelocities',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRecommendVelocitiesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_recommend_velocities(
        self,
        request: xtee_20210910_models.DescribeRecommendVelocitiesRequest,
    ) -> xtee_20210910_models.DescribeRecommendVelocitiesResponse:
        """
        @summary Query Supported Metrics List
        
        @param request: DescribeRecommendVelocitiesRequest
        @return: DescribeRecommendVelocitiesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_recommend_velocities_with_options(request, runtime)

    async def describe_recommend_velocities_async(
        self,
        request: xtee_20210910_models.DescribeRecommendVelocitiesRequest,
    ) -> xtee_20210910_models.DescribeRecommendVelocitiesResponse:
        """
        @summary Query Supported Metrics List
        
        @param request: DescribeRecommendVelocitiesRequest
        @return: DescribeRecommendVelocitiesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_recommend_velocities_with_options_async(request, runtime)

    def describe_regions_with_options(
        self,
        request: xtee_20210910_models.DescribeRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRegionsResponse:
        """
        @summary Query the list of regions supported by ApiGateway
        
        @param request: DescribeRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRegionsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRegions',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRegionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_regions_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRegionsResponse:
        """
        @summary Query the list of regions supported by ApiGateway
        
        @param request: DescribeRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRegionsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRegions',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRegionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_regions(
        self,
        request: xtee_20210910_models.DescribeRegionsRequest,
    ) -> xtee_20210910_models.DescribeRegionsResponse:
        """
        @summary Query the list of regions supported by ApiGateway
        
        @param request: DescribeRegionsRequest
        @return: DescribeRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_regions_with_options(request, runtime)

    async def describe_regions_async(
        self,
        request: xtee_20210910_models.DescribeRegionsRequest,
    ) -> xtee_20210910_models.DescribeRegionsResponse:
        """
        @summary Query the list of regions supported by ApiGateway
        
        @param request: DescribeRegionsRequest
        @return: DescribeRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_regions_with_options_async(request, runtime)

    def describe_request_hit_with_options(
        self,
        request: xtee_20210910_models.DescribeRequestHitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRequestHitResponse:
        """
        @summary Query Request Hit Details
        
        @param request: DescribeRequestHitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRequestHitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRequestHit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRequestHitResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_request_hit_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRequestHitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRequestHitResponse:
        """
        @summary Query Request Hit Details
        
        @param request: DescribeRequestHitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRequestHitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRequestHit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRequestHitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_request_hit(
        self,
        request: xtee_20210910_models.DescribeRequestHitRequest,
    ) -> xtee_20210910_models.DescribeRequestHitResponse:
        """
        @summary Query Request Hit Details
        
        @param request: DescribeRequestHitRequest
        @return: DescribeRequestHitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_request_hit_with_options(request, runtime)

    async def describe_request_hit_async(
        self,
        request: xtee_20210910_models.DescribeRequestHitRequest,
    ) -> xtee_20210910_models.DescribeRequestHitResponse:
        """
        @summary Query Request Hit Details
        
        @param request: DescribeRequestHitRequest
        @return: DescribeRequestHitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_request_hit_with_options_async(request, runtime)

    def describe_request_peak_report_with_options(
        self,
        request: xtee_20210910_models.DescribeRequestPeakReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRequestPeakReportResponse:
        """
        @summary Request Peak
        
        @param request: DescribeRequestPeakReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRequestPeakReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRequestPeakReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRequestPeakReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_request_peak_report_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRequestPeakReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRequestPeakReportResponse:
        """
        @summary Request Peak
        
        @param request: DescribeRequestPeakReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRequestPeakReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRequestPeakReport',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRequestPeakReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_request_peak_report(
        self,
        request: xtee_20210910_models.DescribeRequestPeakReportRequest,
    ) -> xtee_20210910_models.DescribeRequestPeakReportResponse:
        """
        @summary Request Peak
        
        @param request: DescribeRequestPeakReportRequest
        @return: DescribeRequestPeakReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_request_peak_report_with_options(request, runtime)

    async def describe_request_peak_report_async(
        self,
        request: xtee_20210910_models.DescribeRequestPeakReportRequest,
    ) -> xtee_20210910_models.DescribeRequestPeakReportResponse:
        """
        @summary Request Peak
        
        @param request: DescribeRequestPeakReportRequest
        @return: DescribeRequestPeakReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_request_peak_report_with_options_async(request, runtime)

    def describe_result_count_with_options(
        self,
        request: xtee_20210910_models.DescribeResultCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeResultCountResponse:
        """
        @summary Drill-down Analysis
        
        @param request: DescribeResultCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeResultCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeResultCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeResultCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_result_count_with_options_async(
        self,
        request: xtee_20210910_models.DescribeResultCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeResultCountResponse:
        """
        @summary Drill-down Analysis
        
        @param request: DescribeResultCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeResultCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeResultCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeResultCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_result_count(
        self,
        request: xtee_20210910_models.DescribeResultCountRequest,
    ) -> xtee_20210910_models.DescribeResultCountResponse:
        """
        @summary Drill-down Analysis
        
        @param request: DescribeResultCountRequest
        @return: DescribeResultCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_result_count_with_options(request, runtime)

    async def describe_result_count_async(
        self,
        request: xtee_20210910_models.DescribeResultCountRequest,
    ) -> xtee_20210910_models.DescribeResultCountResponse:
        """
        @summary Drill-down Analysis
        
        @param request: DescribeResultCountRequest
        @return: DescribeResultCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_result_count_with_options_async(request, runtime)

    def describe_risk_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeRiskLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRiskLineChartResponse:
        """
        @summary Risk map overview chart (line chart)
        
        @param request: DescribeRiskLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRiskLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRiskLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRiskLineChartResponse:
        """
        @summary Risk map overview chart (line chart)
        
        @param request: DescribeRiskLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRiskLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_line_chart(
        self,
        request: xtee_20210910_models.DescribeRiskLineChartRequest,
    ) -> xtee_20210910_models.DescribeRiskLineChartResponse:
        """
        @summary Risk map overview chart (line chart)
        
        @param request: DescribeRiskLineChartRequest
        @return: DescribeRiskLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_line_chart_with_options(request, runtime)

    async def describe_risk_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeRiskLineChartRequest,
    ) -> xtee_20210910_models.DescribeRiskLineChartResponse:
        """
        @summary Risk map overview chart (line chart)
        
        @param request: DescribeRiskLineChartRequest
        @return: DescribeRiskLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_line_chart_with_options_async(request, runtime)

    def describe_risk_tags_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeRiskTagsLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRiskTagsLineChartResponse:
        """
        @summary Tag Hit Rate Tag Hit Dimension
        
        @param request: DescribeRiskTagsLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskTagsLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.begin_time):
            query['BeginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['EventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskTagsLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRiskTagsLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_tags_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRiskTagsLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRiskTagsLineChartResponse:
        """
        @summary Tag Hit Rate Tag Hit Dimension
        
        @param request: DescribeRiskTagsLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskTagsLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.begin_time):
            query['BeginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['EventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskTagsLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRiskTagsLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_tags_line_chart(
        self,
        request: xtee_20210910_models.DescribeRiskTagsLineChartRequest,
    ) -> xtee_20210910_models.DescribeRiskTagsLineChartResponse:
        """
        @summary Tag Hit Rate Tag Hit Dimension
        
        @param request: DescribeRiskTagsLineChartRequest
        @return: DescribeRiskTagsLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_tags_line_chart_with_options(request, runtime)

    async def describe_risk_tags_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeRiskTagsLineChartRequest,
    ) -> xtee_20210910_models.DescribeRiskTagsLineChartResponse:
        """
        @summary Tag Hit Rate Tag Hit Dimension
        
        @param request: DescribeRiskTagsLineChartRequest
        @return: DescribeRiskTagsLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_tags_line_chart_with_options_async(request, runtime)

    def describe_rule_bar_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleBarChartResponse:
        """
        @summary Policy Overview List
        
        @param request: DescribeRuleBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleBarChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_bar_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleBarChartResponse:
        """
        @summary Policy Overview List
        
        @param request: DescribeRuleBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleBarChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_bar_chart(
        self,
        request: xtee_20210910_models.DescribeRuleBarChartRequest,
    ) -> xtee_20210910_models.DescribeRuleBarChartResponse:
        """
        @summary Policy Overview List
        
        @param request: DescribeRuleBarChartRequest
        @return: DescribeRuleBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_bar_chart_with_options(request, runtime)

    async def describe_rule_bar_chart_async(
        self,
        request: xtee_20210910_models.DescribeRuleBarChartRequest,
    ) -> xtee_20210910_models.DescribeRuleBarChartResponse:
        """
        @summary Policy Overview List
        
        @param request: DescribeRuleBarChartRequest
        @return: DescribeRuleBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_bar_chart_with_options_async(request, runtime)

    def describe_rule_count_by_user_id_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleCountByUserIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleCountByUserIdResponse:
        """
        @summary Query Policy Count by User ID
        
        @param request: DescribeRuleCountByUserIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleCountByUserIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleCountByUserId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleCountByUserIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_count_by_user_id_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleCountByUserIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleCountByUserIdResponse:
        """
        @summary Query Policy Count by User ID
        
        @param request: DescribeRuleCountByUserIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleCountByUserIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleCountByUserId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleCountByUserIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_count_by_user_id(
        self,
        request: xtee_20210910_models.DescribeRuleCountByUserIdRequest,
    ) -> xtee_20210910_models.DescribeRuleCountByUserIdResponse:
        """
        @summary Query Policy Count by User ID
        
        @param request: DescribeRuleCountByUserIdRequest
        @return: DescribeRuleCountByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_count_by_user_id_with_options(request, runtime)

    async def describe_rule_count_by_user_id_async(
        self,
        request: xtee_20210910_models.DescribeRuleCountByUserIdRequest,
    ) -> xtee_20210910_models.DescribeRuleCountByUserIdResponse:
        """
        @summary Query Policy Count by User ID
        
        @param request: DescribeRuleCountByUserIdRequest
        @return: DescribeRuleCountByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_count_by_user_id_with_options_async(request, runtime)

    def describe_rule_detail_by_rule_id_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleDetailByRuleIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleDetailByRuleIdResponse:
        """
        @summary Query policy/version details
        
        @param request: DescribeRuleDetailByRuleIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleDetailByRuleIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleDetailByRuleId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleDetailByRuleIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_detail_by_rule_id_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleDetailByRuleIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleDetailByRuleIdResponse:
        """
        @summary Query policy/version details
        
        @param request: DescribeRuleDetailByRuleIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleDetailByRuleIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleDetailByRuleId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleDetailByRuleIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_detail_by_rule_id(
        self,
        request: xtee_20210910_models.DescribeRuleDetailByRuleIdRequest,
    ) -> xtee_20210910_models.DescribeRuleDetailByRuleIdResponse:
        """
        @summary Query policy/version details
        
        @param request: DescribeRuleDetailByRuleIdRequest
        @return: DescribeRuleDetailByRuleIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_detail_by_rule_id_with_options(request, runtime)

    async def describe_rule_detail_by_rule_id_async(
        self,
        request: xtee_20210910_models.DescribeRuleDetailByRuleIdRequest,
    ) -> xtee_20210910_models.DescribeRuleDetailByRuleIdResponse:
        """
        @summary Query policy/version details
        
        @param request: DescribeRuleDetailByRuleIdRequest
        @return: DescribeRuleDetailByRuleIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_detail_by_rule_id_with_options_async(request, runtime)

    def describe_rule_hit_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleHitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleHitResponse:
        """
        @summary Query rule hit details
        
        @param request: DescribeRuleHitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleHitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.request_time):
            query['requestTime'] = request.request_time
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_snapshot_id):
            query['ruleSnapshotId'] = request.rule_snapshot_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleHit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleHitResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_hit_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleHitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleHitResponse:
        """
        @summary Query rule hit details
        
        @param request: DescribeRuleHitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleHitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.request_time):
            query['requestTime'] = request.request_time
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_snapshot_id):
            query['ruleSnapshotId'] = request.rule_snapshot_id
        if not UtilClient.is_unset(request.s_request_id):
            query['sRequestId'] = request.s_request_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleHit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleHitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_hit(
        self,
        request: xtee_20210910_models.DescribeRuleHitRequest,
    ) -> xtee_20210910_models.DescribeRuleHitResponse:
        """
        @summary Query rule hit details
        
        @param request: DescribeRuleHitRequest
        @return: DescribeRuleHitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_hit_with_options(request, runtime)

    async def describe_rule_hit_async(
        self,
        request: xtee_20210910_models.DescribeRuleHitRequest,
    ) -> xtee_20210910_models.DescribeRuleHitResponse:
        """
        @summary Query rule hit details
        
        @param request: DescribeRuleHitRequest
        @return: DescribeRuleHitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_hit_with_options_async(request, runtime)

    def describe_rule_list_by_event_codes_list_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleListByEventCodesListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleListByEventCodesListResponse:
        """
        @summary Query policy list
        
        @param request: DescribeRuleListByEventCodesListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleListByEventCodesListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleListByEventCodesList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleListByEventCodesListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_list_by_event_codes_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleListByEventCodesListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleListByEventCodesListResponse:
        """
        @summary Query policy list
        
        @param request: DescribeRuleListByEventCodesListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleListByEventCodesListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleListByEventCodesList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleListByEventCodesListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_list_by_event_codes_list(
        self,
        request: xtee_20210910_models.DescribeRuleListByEventCodesListRequest,
    ) -> xtee_20210910_models.DescribeRuleListByEventCodesListResponse:
        """
        @summary Query policy list
        
        @param request: DescribeRuleListByEventCodesListRequest
        @return: DescribeRuleListByEventCodesListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_list_by_event_codes_list_with_options(request, runtime)

    async def describe_rule_list_by_event_codes_list_async(
        self,
        request: xtee_20210910_models.DescribeRuleListByEventCodesListRequest,
    ) -> xtee_20210910_models.DescribeRuleListByEventCodesListResponse:
        """
        @summary Query policy list
        
        @param request: DescribeRuleListByEventCodesListRequest
        @return: DescribeRuleListByEventCodesListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_list_by_event_codes_list_with_options_async(request, runtime)

    def describe_rule_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRulePageListResponse:
        """
        @summary Query the list of policies
        
        @param request: DescribeRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_auth_type):
            query['ruleAuthType'] = request.rule_auth_type
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.sort):
            query['sort'] = request.sort
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRulePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRulePageListResponse:
        """
        @summary Query the list of policies
        
        @param request: DescribeRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_auth_type):
            query['ruleAuthType'] = request.rule_auth_type
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.sort):
            query['sort'] = request.sort
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRulePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_page_list(
        self,
        request: xtee_20210910_models.DescribeRulePageListRequest,
    ) -> xtee_20210910_models.DescribeRulePageListResponse:
        """
        @summary Query the list of policies
        
        @param request: DescribeRulePageListRequest
        @return: DescribeRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_page_list_with_options(request, runtime)

    async def describe_rule_page_list_async(
        self,
        request: xtee_20210910_models.DescribeRulePageListRequest,
    ) -> xtee_20210910_models.DescribeRulePageListResponse:
        """
        @summary Query the list of policies
        
        @param request: DescribeRulePageListRequest
        @return: DescribeRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_page_list_with_options_async(request, runtime)

    def describe_rule_snapshot_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleSnapshotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleSnapshotResponse:
        """
        @summary Query historical snapshots based on ruleId and version
        
        @param request: DescribeRuleSnapshotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleSnapshotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.snapshot_version):
            query['snapshotVersion'] = request.snapshot_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleSnapshot',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleSnapshotResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_snapshot_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleSnapshotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleSnapshotResponse:
        """
        @summary Query historical snapshots based on ruleId and version
        
        @param request: DescribeRuleSnapshotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleSnapshotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.snapshot_version):
            query['snapshotVersion'] = request.snapshot_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleSnapshot',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleSnapshotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_snapshot(
        self,
        request: xtee_20210910_models.DescribeRuleSnapshotRequest,
    ) -> xtee_20210910_models.DescribeRuleSnapshotResponse:
        """
        @summary Query historical snapshots based on ruleId and version
        
        @param request: DescribeRuleSnapshotRequest
        @return: DescribeRuleSnapshotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_snapshot_with_options(request, runtime)

    async def describe_rule_snapshot_async(
        self,
        request: xtee_20210910_models.DescribeRuleSnapshotRequest,
    ) -> xtee_20210910_models.DescribeRuleSnapshotResponse:
        """
        @summary Query historical snapshots based on ruleId and version
        
        @param request: DescribeRuleSnapshotRequest
        @return: DescribeRuleSnapshotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_snapshot_with_options_async(request, runtime)

    def describe_rule_version_list_with_options(
        self,
        request: xtee_20210910_models.DescribeRuleVersionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleVersionListResponse:
        """
        @summary Query Policy Version List
        
        @param request: DescribeRuleVersionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleVersionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleVersionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleVersionListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rule_version_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeRuleVersionListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeRuleVersionListResponse:
        """
        @summary Query Policy Version List
        
        @param request: DescribeRuleVersionListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRuleVersionListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRuleVersionList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeRuleVersionListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rule_version_list(
        self,
        request: xtee_20210910_models.DescribeRuleVersionListRequest,
    ) -> xtee_20210910_models.DescribeRuleVersionListResponse:
        """
        @summary Query Policy Version List
        
        @param request: DescribeRuleVersionListRequest
        @return: DescribeRuleVersionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rule_version_list_with_options(request, runtime)

    async def describe_rule_version_list_async(
        self,
        request: xtee_20210910_models.DescribeRuleVersionListRequest,
    ) -> xtee_20210910_models.DescribeRuleVersionListResponse:
        """
        @summary Query Policy Version List
        
        @param request: DescribeRuleVersionListRequest
        @return: DescribeRuleVersionListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rule_version_list_with_options_async(request, runtime)

    def describe_sdkdownload_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSDKDownloadListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSDKDownloadListResponse:
        """
        @summary SDK Download List
        
        @param request: DescribeSDKDownloadListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSDKDownloadListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.device_type):
            query['deviceType'] = request.device_type
        if not UtilClient.is_unset(request.list_type):
            query['listType'] = request.list_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSDKDownloadList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSDKDownloadListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sdkdownload_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSDKDownloadListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSDKDownloadListResponse:
        """
        @summary SDK Download List
        
        @param request: DescribeSDKDownloadListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSDKDownloadListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.device_type):
            query['deviceType'] = request.device_type
        if not UtilClient.is_unset(request.list_type):
            query['listType'] = request.list_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSDKDownloadList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSDKDownloadListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sdkdownload_list(
        self,
        request: xtee_20210910_models.DescribeSDKDownloadListRequest,
    ) -> xtee_20210910_models.DescribeSDKDownloadListResponse:
        """
        @summary SDK Download List
        
        @param request: DescribeSDKDownloadListRequest
        @return: DescribeSDKDownloadListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sdkdownload_list_with_options(request, runtime)

    async def describe_sdkdownload_list_async(
        self,
        request: xtee_20210910_models.DescribeSDKDownloadListRequest,
    ) -> xtee_20210910_models.DescribeSDKDownloadListResponse:
        """
        @summary SDK Download List
        
        @param request: DescribeSDKDownloadListRequest
        @return: DescribeSDKDownloadListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sdkdownload_list_with_options_async(request, runtime)

    def describe_saf_console_with_options(
        self,
        request: xtee_20210910_models.DescribeSafConsoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafConsoleResponse:
        """
        @param request: DescribeSafConsoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafConsoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.content):
            query['content'] = request.content
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafConsole',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafConsoleResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_console_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafConsoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafConsoleResponse:
        """
        @param request: DescribeSafConsoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafConsoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.content):
            query['content'] = request.content
        if not UtilClient.is_unset(request.service):
            query['service'] = request.service
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafConsole',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafConsoleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_console(
        self,
        request: xtee_20210910_models.DescribeSafConsoleRequest,
    ) -> xtee_20210910_models.DescribeSafConsoleResponse:
        """
        @param request: DescribeSafConsoleRequest
        @return: DescribeSafConsoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_console_with_options(request, runtime)

    async def describe_saf_console_async(
        self,
        request: xtee_20210910_models.DescribeSafConsoleRequest,
    ) -> xtee_20210910_models.DescribeSafConsoleResponse:
        """
        @param request: DescribeSafConsoleRequest
        @return: DescribeSafConsoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_console_with_options_async(request, runtime)

    def describe_saf_de_order_with_options(
        self,
        request: xtee_20210910_models.DescribeSafDeOrderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafDeOrderResponse:
        """
        @summary Query saf_de Order
        
        @param request: DescribeSafDeOrderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafDeOrderResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafDeOrder',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafDeOrderResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_de_order_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafDeOrderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafDeOrderResponse:
        """
        @summary Query saf_de Order
        
        @param request: DescribeSafDeOrderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafDeOrderResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafDeOrder',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafDeOrderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_de_order(
        self,
        request: xtee_20210910_models.DescribeSafDeOrderRequest,
    ) -> xtee_20210910_models.DescribeSafDeOrderResponse:
        """
        @summary Query saf_de Order
        
        @param request: DescribeSafDeOrderRequest
        @return: DescribeSafDeOrderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_de_order_with_options(request, runtime)

    async def describe_saf_de_order_async(
        self,
        request: xtee_20210910_models.DescribeSafDeOrderRequest,
    ) -> xtee_20210910_models.DescribeSafDeOrderResponse:
        """
        @summary Query saf_de Order
        
        @param request: DescribeSafDeOrderRequest
        @return: DescribeSafDeOrderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_de_order_with_options_async(request, runtime)

    def describe_saf_order_with_options(
        self,
        request: xtee_20210910_models.DescribeSafOrderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafOrderResponse:
        """
        @summary Query Order Information
        
        @param request: DescribeSafOrderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafOrderResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.exact_product_code):
            query['exactProductCode'] = request.exact_product_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafOrder',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafOrderResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_order_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafOrderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafOrderResponse:
        """
        @summary Query Order Information
        
        @param request: DescribeSafOrderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafOrderResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_date):
            query['endDate'] = request.end_date
        if not UtilClient.is_unset(request.exact_product_code):
            query['exactProductCode'] = request.exact_product_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_date):
            query['startDate'] = request.start_date
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafOrder',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafOrderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_order(
        self,
        request: xtee_20210910_models.DescribeSafOrderRequest,
    ) -> xtee_20210910_models.DescribeSafOrderResponse:
        """
        @summary Query Order Information
        
        @param request: DescribeSafOrderRequest
        @return: DescribeSafOrderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_order_with_options(request, runtime)

    async def describe_saf_order_async(
        self,
        request: xtee_20210910_models.DescribeSafOrderRequest,
    ) -> xtee_20210910_models.DescribeSafOrderResponse:
        """
        @summary Query Order Information
        
        @param request: DescribeSafOrderRequest
        @return: DescribeSafOrderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_order_with_options_async(request, runtime)

    def describe_saf_start_config_with_options(
        self,
        request: xtee_20210910_models.DescribeSafStartConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafStartConfigResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafStartConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafStartConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafStartConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_start_config_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafStartConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafStartConfigResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafStartConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafStartConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafStartConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_start_config(
        self,
        request: xtee_20210910_models.DescribeSafStartConfigRequest,
    ) -> xtee_20210910_models.DescribeSafStartConfigResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartConfigRequest
        @return: DescribeSafStartConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_start_config_with_options(request, runtime)

    async def describe_saf_start_config_async(
        self,
        request: xtee_20210910_models.DescribeSafStartConfigRequest,
    ) -> xtee_20210910_models.DescribeSafStartConfigResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartConfigRequest
        @return: DescribeSafStartConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_start_config_with_options_async(request, runtime)

    def describe_saf_start_steps_with_options(
        self,
        request: xtee_20210910_models.DescribeSafStartStepsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafStartStepsResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartStepsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafStartStepsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.aliyun_server):
            query['aliyunServer'] = request.aliyun_server
        if not UtilClient.is_unset(request.device_types_str):
            query['deviceTypesStr'] = request.device_types_str
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.language):
            query['language'] = request.language
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.server_region):
            query['serverRegion'] = request.server_region
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafStartSteps',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafStartStepsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_start_steps_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafStartStepsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafStartStepsResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartStepsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafStartStepsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.aliyun_server):
            query['aliyunServer'] = request.aliyun_server
        if not UtilClient.is_unset(request.device_types_str):
            query['deviceTypesStr'] = request.device_types_str
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.language):
            query['language'] = request.language
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.server_region):
            query['serverRegion'] = request.server_region
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafStartSteps',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafStartStepsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_start_steps(
        self,
        request: xtee_20210910_models.DescribeSafStartStepsRequest,
    ) -> xtee_20210910_models.DescribeSafStartStepsResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartStepsRequest
        @return: DescribeSafStartStepsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_start_steps_with_options(request, runtime)

    async def describe_saf_start_steps_async(
        self,
        request: xtee_20210910_models.DescribeSafStartStepsRequest,
    ) -> xtee_20210910_models.DescribeSafStartStepsResponse:
        """
        @summary Query Access Configuration
        
        @param request: DescribeSafStartStepsRequest
        @return: DescribeSafStartStepsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_start_steps_with_options_async(request, runtime)

    def describe_saf_tag_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSafTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafTagListResponse:
        """
        @summary Get Risk Tag List
        
        @param request: DescribeSafTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.api_id):
            query['apiId'] = request.api_id
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafTagListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_saf_tag_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSafTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSafTagListResponse:
        """
        @summary Get Risk Tag List
        
        @param request: DescribeSafTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSafTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.api_id):
            query['apiId'] = request.api_id
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSafTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSafTagListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_saf_tag_list(
        self,
        request: xtee_20210910_models.DescribeSafTagListRequest,
    ) -> xtee_20210910_models.DescribeSafTagListResponse:
        """
        @summary Get Risk Tag List
        
        @param request: DescribeSafTagListRequest
        @return: DescribeSafTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_saf_tag_list_with_options(request, runtime)

    async def describe_saf_tag_list_async(
        self,
        request: xtee_20210910_models.DescribeSafTagListRequest,
    ) -> xtee_20210910_models.DescribeSafTagListResponse:
        """
        @summary Get Risk Tag List
        
        @param request: DescribeSafTagListRequest
        @return: DescribeSafTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_saf_tag_list_with_options_async(request, runtime)

    def describe_sample_batch_oss_policy_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleBatchOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleBatchOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeSampleBatchOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleBatchOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleBatchOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleBatchOssPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_batch_oss_policy_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleBatchOssPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleBatchOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeSampleBatchOssPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleBatchOssPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleBatchOssPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleBatchOssPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_batch_oss_policy(
        self,
        request: xtee_20210910_models.DescribeSampleBatchOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeSampleBatchOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeSampleBatchOssPolicyRequest
        @return: DescribeSampleBatchOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_batch_oss_policy_with_options(request, runtime)

    async def describe_sample_batch_oss_policy_async(
        self,
        request: xtee_20210910_models.DescribeSampleBatchOssPolicyRequest,
    ) -> xtee_20210910_models.DescribeSampleBatchOssPolicyResponse:
        """
        @summary Get File Upload Credentials
        
        @param request: DescribeSampleBatchOssPolicyRequest
        @return: DescribeSampleBatchOssPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_batch_oss_policy_with_options_async(request, runtime)

    def describe_sample_data_by_batch_uuid_page_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleDataByBatchUUidPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataByBatchUUidPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataByBatchUUidPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataByBatchUUidPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_data_by_batch_uuid_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataByBatchUUidPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataByBatchUUidPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataByBatchUUidPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataByBatchUUidPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_data_by_batch_uuid_page(
        self,
        request: xtee_20210910_models.DescribeSampleDataByBatchUUidPageRequest,
    ) -> xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataByBatchUUidPageRequest
        @return: DescribeSampleDataByBatchUUidPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_data_by_batch_uuid_page_with_options(request, runtime)

    async def describe_sample_data_by_batch_uuid_page_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataByBatchUUidPageRequest,
    ) -> xtee_20210910_models.DescribeSampleDataByBatchUUidPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataByBatchUUidPageRequest
        @return: DescribeSampleDataByBatchUUidPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_data_by_batch_uuid_page_with_options_async(request, runtime)

    def describe_sample_data_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleDataListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataListResponse:
        """
        @summary Paged Query of Sample List
        
        @param request: DescribeSampleDataListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.delete_tag):
            query['deleteTag'] = request.delete_tag
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_data_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataListResponse:
        """
        @summary Paged Query of Sample List
        
        @param request: DescribeSampleDataListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.delete_tag):
            query['deleteTag'] = request.delete_tag
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_data_list(
        self,
        request: xtee_20210910_models.DescribeSampleDataListRequest,
    ) -> xtee_20210910_models.DescribeSampleDataListResponse:
        """
        @summary Paged Query of Sample List
        
        @param request: DescribeSampleDataListRequest
        @return: DescribeSampleDataListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_data_list_with_options(request, runtime)

    async def describe_sample_data_list_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataListRequest,
    ) -> xtee_20210910_models.DescribeSampleDataListResponse:
        """
        @summary Paged Query of Sample List
        
        @param request: DescribeSampleDataListRequest
        @return: DescribeSampleDataListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_data_list_with_options_async(request, runtime)

    def describe_sample_data_page_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleDataPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_data_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDataPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDataPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.update_begin_time):
            query['updateBeginTime'] = request.update_begin_time
        if not UtilClient.is_unset(request.update_end_time):
            query['updateEndTime'] = request.update_end_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDataPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDataPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_data_page(
        self,
        request: xtee_20210910_models.DescribeSampleDataPageRequest,
    ) -> xtee_20210910_models.DescribeSampleDataPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataPageRequest
        @return: DescribeSampleDataPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_data_page_with_options(request, runtime)

    async def describe_sample_data_page_async(
        self,
        request: xtee_20210910_models.DescribeSampleDataPageRequest,
    ) -> xtee_20210910_models.DescribeSampleDataPageResponse:
        """
        @summary Sample List
        
        @param request: DescribeSampleDataPageRequest
        @return: DescribeSampleDataPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_data_page_with_options_async(request, runtime)

    def describe_sample_demo_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleDemoDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse:
        """
        @summary Query Sample Example Authorization
        
        @param request: DescribeSampleDemoDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDemoDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDemoDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_demo_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleDemoDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse:
        """
        @summary Query Sample Example Authorization
        
        @param request: DescribeSampleDemoDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDemoDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDemoDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_demo_download_url(
        self,
        request: xtee_20210910_models.DescribeSampleDemoDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse:
        """
        @summary Query Sample Example Authorization
        
        @param request: DescribeSampleDemoDownloadUrlRequest
        @return: DescribeSampleDemoDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_demo_download_url_with_options(request, runtime)

    async def describe_sample_demo_download_url_async(
        self,
        request: xtee_20210910_models.DescribeSampleDemoDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeSampleDemoDownloadUrlResponse:
        """
        @summary Query Sample Example Authorization
        
        @param request: DescribeSampleDemoDownloadUrlRequest
        @return: DescribeSampleDemoDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_demo_download_url_with_options_async(request, runtime)

    def describe_sample_download_url_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDownloadUrlResponse:
        """
        @summary Query Sample Download Authorization Information
        
        @param request: DescribeSampleDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_download_url_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleDownloadUrlResponse:
        """
        @summary Query Sample Download Authorization Information
        
        @param request: DescribeSampleDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_id):
            query['sampleId'] = request.sample_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_download_url(
        self,
        request: xtee_20210910_models.DescribeSampleDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeSampleDownloadUrlResponse:
        """
        @summary Query Sample Download Authorization Information
        
        @param request: DescribeSampleDownloadUrlRequest
        @return: DescribeSampleDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_download_url_with_options(request, runtime)

    async def describe_sample_download_url_async(
        self,
        request: xtee_20210910_models.DescribeSampleDownloadUrlRequest,
    ) -> xtee_20210910_models.DescribeSampleDownloadUrlResponse:
        """
        @summary Query Sample Download Authorization Information
        
        @param request: DescribeSampleDownloadUrlRequest
        @return: DescribeSampleDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_download_url_with_options_async(request, runtime)

    def describe_sample_info_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleInfoResponse:
        """
        @summary Query Sample Details
        
        @param request: DescribeSampleInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_info_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleInfoResponse:
        """
        @summary Query Sample Details
        
        @param request: DescribeSampleInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_info(
        self,
        request: xtee_20210910_models.DescribeSampleInfoRequest,
    ) -> xtee_20210910_models.DescribeSampleInfoResponse:
        """
        @summary Query Sample Details
        
        @param request: DescribeSampleInfoRequest
        @return: DescribeSampleInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_info_with_options(request, runtime)

    async def describe_sample_info_async(
        self,
        request: xtee_20210910_models.DescribeSampleInfoRequest,
    ) -> xtee_20210910_models.DescribeSampleInfoResponse:
        """
        @summary Query Sample Details
        
        @param request: DescribeSampleInfoRequest
        @return: DescribeSampleInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_info_with_options_async(request, runtime)

    def describe_sample_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleListResponse:
        """
        @summary Query Sample List
        
        @param request: DescribeSampleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_type):
            query['sampleType'] = request.sample_type
        if not UtilClient.is_unset(request.sample_value):
            query['sampleValue'] = request.sample_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleListResponse:
        """
        @summary Query Sample List
        
        @param request: DescribeSampleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_type):
            query['sampleType'] = request.sample_type
        if not UtilClient.is_unset(request.sample_value):
            query['sampleValue'] = request.sample_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_list(
        self,
        request: xtee_20210910_models.DescribeSampleListRequest,
    ) -> xtee_20210910_models.DescribeSampleListResponse:
        """
        @summary Query Sample List
        
        @param request: DescribeSampleListRequest
        @return: DescribeSampleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_list_with_options(request, runtime)

    async def describe_sample_list_async(
        self,
        request: xtee_20210910_models.DescribeSampleListRequest,
    ) -> xtee_20210910_models.DescribeSampleListResponse:
        """
        @summary Query Sample List
        
        @param request: DescribeSampleListRequest
        @return: DescribeSampleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_list_with_options_async(request, runtime)

    def describe_sample_scene_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleSceneListResponse:
        """
        @summary Query Scene List
        
        @param request: DescribeSampleSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleSceneListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_scene_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleSceneListResponse:
        """
        @summary Query Scene List
        
        @param request: DescribeSampleSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleSceneListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_scene_list(
        self,
        request: xtee_20210910_models.DescribeSampleSceneListRequest,
    ) -> xtee_20210910_models.DescribeSampleSceneListResponse:
        """
        @summary Query Scene List
        
        @param request: DescribeSampleSceneListRequest
        @return: DescribeSampleSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_scene_list_with_options(request, runtime)

    async def describe_sample_scene_list_async(
        self,
        request: xtee_20210910_models.DescribeSampleSceneListRequest,
    ) -> xtee_20210910_models.DescribeSampleSceneListResponse:
        """
        @summary Query Scene List
        
        @param request: DescribeSampleSceneListRequest
        @return: DescribeSampleSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_scene_list_with_options_async(request, runtime)

    def describe_sample_tag_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleTagListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeSampleTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleTagListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_tag_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleTagListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeSampleTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleTagListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_tag_list(
        self,
        request: xtee_20210910_models.DescribeSampleTagListRequest,
    ) -> xtee_20210910_models.DescribeSampleTagListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeSampleTagListRequest
        @return: DescribeSampleTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_tag_list_with_options(request, runtime)

    async def describe_sample_tag_list_async(
        self,
        request: xtee_20210910_models.DescribeSampleTagListRequest,
    ) -> xtee_20210910_models.DescribeSampleTagListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeSampleTagListRequest
        @return: DescribeSampleTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_tag_list_with_options_async(request, runtime)

    def describe_sample_upload_policy_with_options(
        self,
        request: xtee_20210910_models.DescribeSampleUploadPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleUploadPolicyResponse:
        """
        @summary Query Sample Upload Authorization Information
        
        @param request: DescribeSampleUploadPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleUploadPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleUploadPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleUploadPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sample_upload_policy_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSampleUploadPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSampleUploadPolicyResponse:
        """
        @summary Query Sample Upload Authorization Information
        
        @param request: DescribeSampleUploadPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSampleUploadPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSampleUploadPolicy',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSampleUploadPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sample_upload_policy(
        self,
        request: xtee_20210910_models.DescribeSampleUploadPolicyRequest,
    ) -> xtee_20210910_models.DescribeSampleUploadPolicyResponse:
        """
        @summary Query Sample Upload Authorization Information
        
        @param request: DescribeSampleUploadPolicyRequest
        @return: DescribeSampleUploadPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sample_upload_policy_with_options(request, runtime)

    async def describe_sample_upload_policy_async(
        self,
        request: xtee_20210910_models.DescribeSampleUploadPolicyRequest,
    ) -> xtee_20210910_models.DescribeSampleUploadPolicyResponse:
        """
        @summary Query Sample Upload Authorization Information
        
        @param request: DescribeSampleUploadPolicyRequest
        @return: DescribeSampleUploadPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sample_upload_policy_with_options_async(request, runtime)

    def describe_samplebatch_page_with_options(
        self,
        request: xtee_20210910_models.DescribeSamplebatchPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSamplebatchPageResponse:
        """
        @summary Sample Batch List
        
        @param request: DescribeSamplebatchPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSamplebatchPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSamplebatchPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSamplebatchPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_samplebatch_page_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSamplebatchPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSamplebatchPageResponse:
        """
        @summary Sample Batch List
        
        @param request: DescribeSamplebatchPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSamplebatchPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.data_value):
            query['dataValue'] = request.data_value
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSamplebatchPage',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSamplebatchPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_samplebatch_page(
        self,
        request: xtee_20210910_models.DescribeSamplebatchPageRequest,
    ) -> xtee_20210910_models.DescribeSamplebatchPageResponse:
        """
        @summary Sample Batch List
        
        @param request: DescribeSamplebatchPageRequest
        @return: DescribeSamplebatchPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_samplebatch_page_with_options(request, runtime)

    async def describe_samplebatch_page_async(
        self,
        request: xtee_20210910_models.DescribeSamplebatchPageRequest,
    ) -> xtee_20210910_models.DescribeSamplebatchPageResponse:
        """
        @summary Sample Batch List
        
        @param request: DescribeSamplebatchPageRequest
        @return: DescribeSamplebatchPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_samplebatch_page_with_options_async(request, runtime)

    def describe_scene_all_event_name_code_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSceneAllEventNameCodeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse:
        """
        @summary Dropdown list for scenario-based service events
        
        @description Dropdown list for scenario-based risk control events
        
        @param request: DescribeSceneAllEventNameCodeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneAllEventNameCodeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneAllEventNameCodeList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_scene_all_event_name_code_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSceneAllEventNameCodeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse:
        """
        @summary Dropdown list for scenario-based service events
        
        @description Dropdown list for scenario-based risk control events
        
        @param request: DescribeSceneAllEventNameCodeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneAllEventNameCodeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneAllEventNameCodeList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_scene_all_event_name_code_list(
        self,
        request: xtee_20210910_models.DescribeSceneAllEventNameCodeListRequest,
    ) -> xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse:
        """
        @summary Dropdown list for scenario-based service events
        
        @description Dropdown list for scenario-based risk control events
        
        @param request: DescribeSceneAllEventNameCodeListRequest
        @return: DescribeSceneAllEventNameCodeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_scene_all_event_name_code_list_with_options(request, runtime)

    async def describe_scene_all_event_name_code_list_async(
        self,
        request: xtee_20210910_models.DescribeSceneAllEventNameCodeListRequest,
    ) -> xtee_20210910_models.DescribeSceneAllEventNameCodeListResponse:
        """
        @summary Dropdown list for scenario-based service events
        
        @description Dropdown list for scenario-based risk control events
        
        @param request: DescribeSceneAllEventNameCodeListRequest
        @return: DescribeSceneAllEventNameCodeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_scene_all_event_name_code_list_with_options_async(request, runtime)

    def describe_scene_event_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSceneEventPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneEventPageListResponse:
        """
        @summary List of Scenario-based Risk Control Events
        
        @param request: DescribeSceneEventPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneEventPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name_or_code):
            query['nameOrCode'] = request.name_or_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneEventPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneEventPageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_scene_event_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSceneEventPageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneEventPageListResponse:
        """
        @summary List of Scenario-based Risk Control Events
        
        @param request: DescribeSceneEventPageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneEventPageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.name_or_code):
            query['nameOrCode'] = request.name_or_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneEventPageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneEventPageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_scene_event_page_list(
        self,
        request: xtee_20210910_models.DescribeSceneEventPageListRequest,
    ) -> xtee_20210910_models.DescribeSceneEventPageListResponse:
        """
        @summary List of Scenario-based Risk Control Events
        
        @param request: DescribeSceneEventPageListRequest
        @return: DescribeSceneEventPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_scene_event_page_list_with_options(request, runtime)

    async def describe_scene_event_page_list_async(
        self,
        request: xtee_20210910_models.DescribeSceneEventPageListRequest,
    ) -> xtee_20210910_models.DescribeSceneEventPageListResponse:
        """
        @summary List of Scenario-based Risk Control Events
        
        @param request: DescribeSceneEventPageListRequest
        @return: DescribeSceneEventPageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_scene_event_page_list_with_options_async(request, runtime)

    def describe_scene_rule_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSceneRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneRulePageListResponse:
        """
        @summary White-boxed strategy list for risk control services
        
        @description Query the list of scenarized risk control event strategies
        
        @param request: DescribeSceneRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_auth_type):
            query['ruleAuthType'] = request.rule_auth_type
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneRulePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_scene_rule_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSceneRulePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSceneRulePageListResponse:
        """
        @summary White-boxed strategy list for risk control services
        
        @description Query the list of scenarized risk control event strategies
        
        @param request: DescribeSceneRulePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSceneRulePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_auth_type):
            query['ruleAuthType'] = request.rule_auth_type
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSceneRulePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSceneRulePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_scene_rule_page_list(
        self,
        request: xtee_20210910_models.DescribeSceneRulePageListRequest,
    ) -> xtee_20210910_models.DescribeSceneRulePageListResponse:
        """
        @summary White-boxed strategy list for risk control services
        
        @description Query the list of scenarized risk control event strategies
        
        @param request: DescribeSceneRulePageListRequest
        @return: DescribeSceneRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_scene_rule_page_list_with_options(request, runtime)

    async def describe_scene_rule_page_list_async(
        self,
        request: xtee_20210910_models.DescribeSceneRulePageListRequest,
    ) -> xtee_20210910_models.DescribeSceneRulePageListResponse:
        """
        @summary White-boxed strategy list for risk control services
        
        @description Query the list of scenarized risk control event strategies
        
        @param request: DescribeSceneRulePageListRequest
        @return: DescribeSceneRulePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_scene_rule_page_list_with_options_async(request, runtime)

    def describe_score_list_with_options(
        self,
        request: xtee_20210910_models.DescribeScoreListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreListResponse:
        """
        @summary Score Distribution
        
        @param request: DescribeScoreListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_score_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeScoreListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreListResponse:
        """
        @summary Score Distribution
        
        @param request: DescribeScoreListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_score_list(
        self,
        request: xtee_20210910_models.DescribeScoreListRequest,
    ) -> xtee_20210910_models.DescribeScoreListResponse:
        """
        @summary Score Distribution
        
        @param request: DescribeScoreListRequest
        @return: DescribeScoreListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_score_list_with_options(request, runtime)

    async def describe_score_list_async(
        self,
        request: xtee_20210910_models.DescribeScoreListRequest,
    ) -> xtee_20210910_models.DescribeScoreListResponse:
        """
        @summary Score Distribution
        
        @param request: DescribeScoreListRequest
        @return: DescribeScoreListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_score_list_with_options_async(request, runtime)

    def describe_score_section_num_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeScoreSectionNumLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionNumLineChartResponse:
        """
        @summary Score Range Quantity Analysis
        
        @param request: DescribeScoreSectionNumLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionNumLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionNumLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionNumLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_score_section_num_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionNumLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionNumLineChartResponse:
        """
        @summary Score Range Quantity Analysis
        
        @param request: DescribeScoreSectionNumLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionNumLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionNumLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionNumLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_score_section_num_line_chart(
        self,
        request: xtee_20210910_models.DescribeScoreSectionNumLineChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionNumLineChartResponse:
        """
        @summary Score Range Quantity Analysis
        
        @param request: DescribeScoreSectionNumLineChartRequest
        @return: DescribeScoreSectionNumLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_score_section_num_line_chart_with_options(request, runtime)

    async def describe_score_section_num_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionNumLineChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionNumLineChartResponse:
        """
        @summary Score Range Quantity Analysis
        
        @param request: DescribeScoreSectionNumLineChartRequest
        @return: DescribeScoreSectionNumLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_score_section_num_line_chart_with_options_async(request, runtime)

    def describe_score_section_pie_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeScoreSectionPieChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionPieChartResponse:
        """
        @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
        
        @param request: DescribeScoreSectionPieChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionPieChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionPieChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionPieChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_score_section_pie_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionPieChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionPieChartResponse:
        """
        @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
        
        @param request: DescribeScoreSectionPieChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionPieChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionPieChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionPieChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_score_section_pie_chart(
        self,
        request: xtee_20210910_models.DescribeScoreSectionPieChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionPieChartResponse:
        """
        @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
        
        @param request: DescribeScoreSectionPieChartRequest
        @return: DescribeScoreSectionPieChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_score_section_pie_chart_with_options(request, runtime)

    async def describe_score_section_pie_chart_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionPieChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionPieChartResponse:
        """
        @summary Proportion of Score Ranges for Main Events/Bypass Events/Diversion Events
        
        @param request: DescribeScoreSectionPieChartRequest
        @return: DescribeScoreSectionPieChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_score_section_pie_chart_with_options_async(request, runtime)

    def describe_score_section_ratio_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeScoreSectionRatioLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse:
        """
        @summary Score Section Ratio Analysis
        
        @param request: DescribeScoreSectionRatioLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionRatioLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionRatioLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_score_section_ratio_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionRatioLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse:
        """
        @summary Score Section Ratio Analysis
        
        @param request: DescribeScoreSectionRatioLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScoreSectionRatioLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScoreSectionRatioLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_score_section_ratio_line_chart(
        self,
        request: xtee_20210910_models.DescribeScoreSectionRatioLineChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse:
        """
        @summary Score Section Ratio Analysis
        
        @param request: DescribeScoreSectionRatioLineChartRequest
        @return: DescribeScoreSectionRatioLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_score_section_ratio_line_chart_with_options(request, runtime)

    async def describe_score_section_ratio_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeScoreSectionRatioLineChartRequest,
    ) -> xtee_20210910_models.DescribeScoreSectionRatioLineChartResponse:
        """
        @summary Score Section Ratio Analysis
        
        @param request: DescribeScoreSectionRatioLineChartRequest
        @return: DescribeScoreSectionRatioLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_score_section_ratio_line_chart_with_options_async(request, runtime)

    def describe_select_item_with_options(
        self,
        request: xtee_20210910_models.DescribeSelectItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSelectItemResponse:
        """
        @summary Query Task ID List
        
        @param request: DescribeSelectItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSelectItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSelectItem',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSelectItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_select_item_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSelectItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSelectItemResponse:
        """
        @summary Query Task ID List
        
        @param request: DescribeSelectItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSelectItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSelectItem',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSelectItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_select_item(
        self,
        request: xtee_20210910_models.DescribeSelectItemRequest,
    ) -> xtee_20210910_models.DescribeSelectItemResponse:
        """
        @summary Query Task ID List
        
        @param request: DescribeSelectItemRequest
        @return: DescribeSelectItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_select_item_with_options(request, runtime)

    async def describe_select_item_async(
        self,
        request: xtee_20210910_models.DescribeSelectItemRequest,
    ) -> xtee_20210910_models.DescribeSelectItemResponse:
        """
        @summary Query Task ID List
        
        @param request: DescribeSelectItemRequest
        @return: DescribeSelectItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_select_item_with_options_async(request, runtime)

    def describe_service_app_key_with_options(
        self,
        request: xtee_20210910_models.DescribeServiceAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceAppKeyResponse:
        """
        @summary ServiceAppkey dropdown
        
        @param request: DescribeServiceAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceAppKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_service_app_key_with_options_async(
        self,
        request: xtee_20210910_models.DescribeServiceAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceAppKeyResponse:
        """
        @summary ServiceAppkey dropdown
        
        @param request: DescribeServiceAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceAppKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_service_app_key(
        self,
        request: xtee_20210910_models.DescribeServiceAppKeyRequest,
    ) -> xtee_20210910_models.DescribeServiceAppKeyResponse:
        """
        @summary ServiceAppkey dropdown
        
        @param request: DescribeServiceAppKeyRequest
        @return: DescribeServiceAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_service_app_key_with_options(request, runtime)

    async def describe_service_app_key_async(
        self,
        request: xtee_20210910_models.DescribeServiceAppKeyRequest,
    ) -> xtee_20210910_models.DescribeServiceAppKeyResponse:
        """
        @summary ServiceAppkey dropdown
        
        @param request: DescribeServiceAppKeyRequest
        @return: DescribeServiceAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_service_app_key_with_options_async(request, runtime)

    def describe_service_code_name_with_options(
        self,
        request: xtee_20210910_models.DescribeServiceCodeNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceCodeNameResponse:
        """
        @summary ServiceCodeName Information
        
        @param request: DescribeServiceCodeNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceCodeNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceCodeName',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceCodeNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_service_code_name_with_options_async(
        self,
        request: xtee_20210910_models.DescribeServiceCodeNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceCodeNameResponse:
        """
        @summary ServiceCodeName Information
        
        @param request: DescribeServiceCodeNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceCodeNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceCodeName',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceCodeNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_service_code_name(
        self,
        request: xtee_20210910_models.DescribeServiceCodeNameRequest,
    ) -> xtee_20210910_models.DescribeServiceCodeNameResponse:
        """
        @summary ServiceCodeName Information
        
        @param request: DescribeServiceCodeNameRequest
        @return: DescribeServiceCodeNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_service_code_name_with_options(request, runtime)

    async def describe_service_code_name_async(
        self,
        request: xtee_20210910_models.DescribeServiceCodeNameRequest,
    ) -> xtee_20210910_models.DescribeServiceCodeNameResponse:
        """
        @summary ServiceCodeName Information
        
        @param request: DescribeServiceCodeNameRequest
        @return: DescribeServiceCodeNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_service_code_name_with_options_async(request, runtime)

    def describe_service_list_with_options(
        self,
        request: xtee_20210910_models.DescribeServiceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceListResponse:
        """
        @summary Get Service List
        
        @param request: DescribeServiceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_service_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeServiceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeServiceListResponse:
        """
        @summary Get Service List
        
        @param request: DescribeServiceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeServiceListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_service_list(
        self,
        request: xtee_20210910_models.DescribeServiceListRequest,
    ) -> xtee_20210910_models.DescribeServiceListResponse:
        """
        @summary Get Service List
        
        @param request: DescribeServiceListRequest
        @return: DescribeServiceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_service_list_with_options(request, runtime)

    async def describe_service_list_async(
        self,
        request: xtee_20210910_models.DescribeServiceListRequest,
    ) -> xtee_20210910_models.DescribeServiceListResponse:
        """
        @summary Get Service List
        
        @param request: DescribeServiceListRequest
        @return: DescribeServiceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_service_list_with_options_async(request, runtime)

    def describe_simulation_predit_info_with_options(
        self,
        request: xtee_20210910_models.DescribeSimulationPreditInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationPreditInfoResponse:
        """
        @summary Estimate Call Information
        
        @param request: DescribeSimulationPreditInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationPreditInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rules_str):
            query['rulesStr'] = request.rules_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationPreditInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationPreditInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_simulation_predit_info_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSimulationPreditInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationPreditInfoResponse:
        """
        @summary Estimate Call Information
        
        @param request: DescribeSimulationPreditInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationPreditInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rules_str):
            query['rulesStr'] = request.rules_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationPreditInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationPreditInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_simulation_predit_info(
        self,
        request: xtee_20210910_models.DescribeSimulationPreditInfoRequest,
    ) -> xtee_20210910_models.DescribeSimulationPreditInfoResponse:
        """
        @summary Estimate Call Information
        
        @param request: DescribeSimulationPreditInfoRequest
        @return: DescribeSimulationPreditInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_simulation_predit_info_with_options(request, runtime)

    async def describe_simulation_predit_info_async(
        self,
        request: xtee_20210910_models.DescribeSimulationPreditInfoRequest,
    ) -> xtee_20210910_models.DescribeSimulationPreditInfoResponse:
        """
        @summary Estimate Call Information
        
        @param request: DescribeSimulationPreditInfoRequest
        @return: DescribeSimulationPreditInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_simulation_predit_info_with_options_async(request, runtime)

    def describe_simulation_task_count_with_options(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationTaskCountResponse:
        """
        @summary Query Task Record Count
        
        @param request: DescribeSimulationTaskCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationTaskCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_config):
            query['dataSourceConfig'] = request.data_source_config
        if not UtilClient.is_unset(request.data_source_type):
            query['dataSourceType'] = request.data_source_type
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.filters_str):
            query['filtersStr'] = request.filters_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_time):
            query['startTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationTaskCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationTaskCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_simulation_task_count_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationTaskCountResponse:
        """
        @summary Query Task Record Count
        
        @param request: DescribeSimulationTaskCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationTaskCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_config):
            query['dataSourceConfig'] = request.data_source_config
        if not UtilClient.is_unset(request.data_source_type):
            query['dataSourceType'] = request.data_source_type
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.filters_str):
            query['filtersStr'] = request.filters_str
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.start_time):
            query['startTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationTaskCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationTaskCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_simulation_task_count(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskCountRequest,
    ) -> xtee_20210910_models.DescribeSimulationTaskCountResponse:
        """
        @summary Query Task Record Count
        
        @param request: DescribeSimulationTaskCountRequest
        @return: DescribeSimulationTaskCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_simulation_task_count_with_options(request, runtime)

    async def describe_simulation_task_count_async(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskCountRequest,
    ) -> xtee_20210910_models.DescribeSimulationTaskCountResponse:
        """
        @summary Query Task Record Count
        
        @param request: DescribeSimulationTaskCountRequest
        @return: DescribeSimulationTaskCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_simulation_task_count_with_options_async(request, runtime)

    def describe_simulation_task_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeSimulationTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_simulation_task_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSimulationTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeSimulationTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimulationTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimulationTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSimulationTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_simulation_task_list(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskListRequest,
    ) -> xtee_20210910_models.DescribeSimulationTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeSimulationTaskListRequest
        @return: DescribeSimulationTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_simulation_task_list_with_options(request, runtime)

    async def describe_simulation_task_list_async(
        self,
        request: xtee_20210910_models.DescribeSimulationTaskListRequest,
    ) -> xtee_20210910_models.DescribeSimulationTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeSimulationTaskListRequest
        @return: DescribeSimulationTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_simulation_task_list_with_options_async(request, runtime)

    def describe_sls_url_config_with_options(
        self,
        request: xtee_20210910_models.DescribeSlsUrlConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSlsUrlConfigResponse:
        """
        @summary Get Project Configuration
        
        @param request: DescribeSlsUrlConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSlsUrlConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSlsUrlConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSlsUrlConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sls_url_config_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSlsUrlConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSlsUrlConfigResponse:
        """
        @summary Get Project Configuration
        
        @param request: DescribeSlsUrlConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSlsUrlConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSlsUrlConfig',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSlsUrlConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sls_url_config(
        self,
        request: xtee_20210910_models.DescribeSlsUrlConfigRequest,
    ) -> xtee_20210910_models.DescribeSlsUrlConfigResponse:
        """
        @summary Get Project Configuration
        
        @param request: DescribeSlsUrlConfigRequest
        @return: DescribeSlsUrlConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sls_url_config_with_options(request, runtime)

    async def describe_sls_url_config_async(
        self,
        request: xtee_20210910_models.DescribeSlsUrlConfigRequest,
    ) -> xtee_20210910_models.DescribeSlsUrlConfigResponse:
        """
        @summary Get Project Configuration
        
        @param request: DescribeSlsUrlConfigRequest
        @return: DescribeSlsUrlConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sls_url_config_with_options_async(request, runtime)

    def describe_support_rule_list_with_options(
        self,
        request: xtee_20210910_models.DescribeSupportRuleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSupportRuleListResponse:
        """
        @summary Query List of Policies Supporting Simulation
        
        @param request: DescribeSupportRuleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupportRuleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSupportRuleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSupportRuleListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_support_rule_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeSupportRuleListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeSupportRuleListResponse:
        """
        @summary Query List of Policies Supporting Simulation
        
        @param request: DescribeSupportRuleListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupportRuleListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSupportRuleList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeSupportRuleListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_support_rule_list(
        self,
        request: xtee_20210910_models.DescribeSupportRuleListRequest,
    ) -> xtee_20210910_models.DescribeSupportRuleListResponse:
        """
        @summary Query List of Policies Supporting Simulation
        
        @param request: DescribeSupportRuleListRequest
        @return: DescribeSupportRuleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_support_rule_list_with_options(request, runtime)

    async def describe_support_rule_list_async(
        self,
        request: xtee_20210910_models.DescribeSupportRuleListRequest,
    ) -> xtee_20210910_models.DescribeSupportRuleListResponse:
        """
        @summary Query List of Policies Supporting Simulation
        
        @param request: DescribeSupportRuleListRequest
        @return: DescribeSupportRuleListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_support_rule_list_with_options_async(request, runtime)

    def describe_tag_list_with_options(
        self,
        request: xtee_20210910_models.DescribeTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagListResponse:
        """
        @summary Tag List
        
        @param request: DescribeTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tag_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagListResponse:
        """
        @summary Tag List
        
        @param request: DescribeTagListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tag_list(
        self,
        request: xtee_20210910_models.DescribeTagListRequest,
    ) -> xtee_20210910_models.DescribeTagListResponse:
        """
        @summary Tag List
        
        @param request: DescribeTagListRequest
        @return: DescribeTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tag_list_with_options(request, runtime)

    async def describe_tag_list_async(
        self,
        request: xtee_20210910_models.DescribeTagListRequest,
    ) -> xtee_20210910_models.DescribeTagListResponse:
        """
        @summary Tag List
        
        @param request: DescribeTagListRequest
        @return: DescribeTagListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tag_list_with_options_async(request, runtime)

    def describe_tags_bar_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsBarChartResponse:
        """
        @summary Tag Overview List
        
        @param request: DescribeTagsBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.result):
            query['result'] = request.result
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsBarChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_bar_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsBarChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsBarChartResponse:
        """
        @summary Tag Overview List
        
        @param request: DescribeTagsBarChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsBarChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.result):
            query['result'] = request.result
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsBarChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsBarChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_bar_chart(
        self,
        request: xtee_20210910_models.DescribeTagsBarChartRequest,
    ) -> xtee_20210910_models.DescribeTagsBarChartResponse:
        """
        @summary Tag Overview List
        
        @param request: DescribeTagsBarChartRequest
        @return: DescribeTagsBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_bar_chart_with_options(request, runtime)

    async def describe_tags_bar_chart_async(
        self,
        request: xtee_20210910_models.DescribeTagsBarChartRequest,
    ) -> xtee_20210910_models.DescribeTagsBarChartResponse:
        """
        @summary Tag Overview List
        
        @param request: DescribeTagsBarChartRequest
        @return: DescribeTagsBarChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_bar_chart_with_options_async(request, runtime)

    def describe_tags_fluctuation_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsFluctuationResponse:
        """
        @summary Tag Fluctuation Detection
        
        @param request: DescribeTagsFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsFluctuationResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_fluctuation_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsFluctuationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsFluctuationResponse:
        """
        @summary Tag Fluctuation Detection
        
        @param request: DescribeTagsFluctuationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsFluctuationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsFluctuation',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsFluctuationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_fluctuation(
        self,
        request: xtee_20210910_models.DescribeTagsFluctuationRequest,
    ) -> xtee_20210910_models.DescribeTagsFluctuationResponse:
        """
        @summary Tag Fluctuation Detection
        
        @param request: DescribeTagsFluctuationRequest
        @return: DescribeTagsFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_fluctuation_with_options(request, runtime)

    async def describe_tags_fluctuation_async(
        self,
        request: xtee_20210910_models.DescribeTagsFluctuationRequest,
    ) -> xtee_20210910_models.DescribeTagsFluctuationResponse:
        """
        @summary Tag Fluctuation Detection
        
        @param request: DescribeTagsFluctuationRequest
        @return: DescribeTagsFluctuationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_fluctuation_with_options_async(request, runtime)

    def describe_tags_list_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeTagsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeTagsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_list(
        self,
        request: xtee_20210910_models.DescribeTagsListRequest,
    ) -> xtee_20210910_models.DescribeTagsListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeTagsListRequest
        @return: DescribeTagsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_list_with_options(request, runtime)

    async def describe_tags_list_async(
        self,
        request: xtee_20210910_models.DescribeTagsListRequest,
    ) -> xtee_20210910_models.DescribeTagsListResponse:
        """
        @summary Get Tag List
        
        @param request: DescribeTagsListRequest
        @return: DescribeTagsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_list_with_options_async(request, runtime)

    def describe_tags_num_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsNumLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsNumLineChartResponse:
        """
        @summary Tag Hit Count Analysis
        
        @param request: DescribeTagsNumLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsNumLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsNumLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsNumLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_num_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsNumLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsNumLineChartResponse:
        """
        @summary Tag Hit Count Analysis
        
        @param request: DescribeTagsNumLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsNumLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsNumLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsNumLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_num_line_chart(
        self,
        request: xtee_20210910_models.DescribeTagsNumLineChartRequest,
    ) -> xtee_20210910_models.DescribeTagsNumLineChartResponse:
        """
        @summary Tag Hit Count Analysis
        
        @param request: DescribeTagsNumLineChartRequest
        @return: DescribeTagsNumLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_num_line_chart_with_options(request, runtime)

    async def describe_tags_num_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeTagsNumLineChartRequest,
    ) -> xtee_20210910_models.DescribeTagsNumLineChartResponse:
        """
        @summary Tag Hit Count Analysis
        
        @param request: DescribeTagsNumLineChartRequest
        @return: DescribeTagsNumLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_num_line_chart_with_options_async(request, runtime)

    def describe_tags_ratio_line_chart_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsRatioLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsRatioLineChartResponse:
        """
        @summary Tag Hit Ratio Analysis
        
        @param request: DescribeTagsRatioLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsRatioLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsRatioLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsRatioLineChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_ratio_line_chart_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsRatioLineChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsRatioLineChartResponse:
        """
        @summary Tag Hit Ratio Analysis
        
        @param request: DescribeTagsRatioLineChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsRatioLineChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.by_pass_event_codes):
            query['byPassEventCodes'] = request.by_pass_event_codes
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.main_event_codes):
            query['mainEventCodes'] = request.main_event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.shunt_event_codes):
            query['shuntEventCodes'] = request.shunt_event_codes
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsRatioLineChart',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsRatioLineChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_ratio_line_chart(
        self,
        request: xtee_20210910_models.DescribeTagsRatioLineChartRequest,
    ) -> xtee_20210910_models.DescribeTagsRatioLineChartResponse:
        """
        @summary Tag Hit Ratio Analysis
        
        @param request: DescribeTagsRatioLineChartRequest
        @return: DescribeTagsRatioLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_ratio_line_chart_with_options(request, runtime)

    async def describe_tags_ratio_line_chart_async(
        self,
        request: xtee_20210910_models.DescribeTagsRatioLineChartRequest,
    ) -> xtee_20210910_models.DescribeTagsRatioLineChartResponse:
        """
        @summary Tag Hit Ratio Analysis
        
        @param request: DescribeTagsRatioLineChartRequest
        @return: DescribeTagsRatioLineChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_ratio_line_chart_with_options_async(request, runtime)

    def describe_tags_trend_with_options(
        self,
        request: xtee_20210910_models.DescribeTagsTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsTrendResponse:
        """
        @summary Tag Hit Trend
        
        @param request: DescribeTagsTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.result):
            query['result'] = request.result
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_tags_trend_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTagsTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTagsTrendResponse:
        """
        @summary Tag Hit Trend
        
        @param request: DescribeTagsTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTagsTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.begin_time):
            query['beginTime'] = request.begin_time
        if not UtilClient.is_unset(request.end_time):
            query['endTime'] = request.end_time
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.result):
            query['result'] = request.result
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTagsTrend',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTagsTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_tags_trend(
        self,
        request: xtee_20210910_models.DescribeTagsTrendRequest,
    ) -> xtee_20210910_models.DescribeTagsTrendResponse:
        """
        @summary Tag Hit Trend
        
        @param request: DescribeTagsTrendRequest
        @return: DescribeTagsTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_tags_trend_with_options(request, runtime)

    async def describe_tags_trend_async(
        self,
        request: xtee_20210910_models.DescribeTagsTrendRequest,
    ) -> xtee_20210910_models.DescribeTagsTrendResponse:
        """
        @summary Tag Hit Trend
        
        @param request: DescribeTagsTrendRequest
        @return: DescribeTagsTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_tags_trend_with_options_async(request, runtime)

    def describe_task_list_with_options(
        self,
        request: xtee_20210910_models.DescribeTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_page):
            query['IsPage'] = request.is_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_task_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_page):
            query['IsPage'] = request.is_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_task_list(
        self,
        request: xtee_20210910_models.DescribeTaskListRequest,
    ) -> xtee_20210910_models.DescribeTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeTaskListRequest
        @return: DescribeTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_task_list_with_options(request, runtime)

    async def describe_task_list_async(
        self,
        request: xtee_20210910_models.DescribeTaskListRequest,
    ) -> xtee_20210910_models.DescribeTaskListResponse:
        """
        @summary Task List
        
        @param request: DescribeTaskListRequest
        @return: DescribeTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_task_list_with_options_async(request, runtime)

    def describe_task_log_list_with_options(
        self,
        request: xtee_20210910_models.DescribeTaskLogListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTaskLogListResponse:
        """
        @summary Task Log List
        
        @param request: DescribeTaskLogListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskLogListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_page):
            query['IsPage'] = request.is_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_log_id):
            query['TaskLogId'] = request.task_log_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskLogList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTaskLogListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_task_log_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTaskLogListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTaskLogListResponse:
        """
        @summary Task Log List
        
        @param request: DescribeTaskLogListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskLogListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_page):
            query['IsPage'] = request.is_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_log_id):
            query['TaskLogId'] = request.task_log_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskLogList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTaskLogListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_task_log_list(
        self,
        request: xtee_20210910_models.DescribeTaskLogListRequest,
    ) -> xtee_20210910_models.DescribeTaskLogListResponse:
        """
        @summary Task Log List
        
        @param request: DescribeTaskLogListRequest
        @return: DescribeTaskLogListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_task_log_list_with_options(request, runtime)

    async def describe_task_log_list_async(
        self,
        request: xtee_20210910_models.DescribeTaskLogListRequest,
    ) -> xtee_20210910_models.DescribeTaskLogListResponse:
        """
        @summary Task Log List
        
        @param request: DescribeTaskLogListRequest
        @return: DescribeTaskLogListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_task_log_list_with_options_async(request, runtime)

    def describe_template_count_with_options(
        self,
        request: xtee_20210910_models.DescribeTemplateCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplateCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeTemplateCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplateCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplateCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplateCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_template_count_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTemplateCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplateCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeTemplateCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplateCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplateCount',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplateCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_template_count(
        self,
        request: xtee_20210910_models.DescribeTemplateCountRequest,
    ) -> xtee_20210910_models.DescribeTemplateCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeTemplateCountRequest
        @return: DescribeTemplateCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_template_count_with_options(request, runtime)

    async def describe_template_count_async(
        self,
        request: xtee_20210910_models.DescribeTemplateCountRequest,
    ) -> xtee_20210910_models.DescribeTemplateCountResponse:
        """
        @summary Query Total Event Count
        
        @param request: DescribeTemplateCountRequest
        @return: DescribeTemplateCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_template_count_with_options_async(request, runtime)

    def describe_template_download_with_options(
        self,
        request: xtee_20210910_models.DescribeTemplateDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplateDownloadResponse:
        """
        @summary Template Download
        
        @param request: DescribeTemplateDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplateDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplateDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplateDownloadResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_template_download_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTemplateDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplateDownloadResponse:
        """
        @summary Template Download
        
        @param request: DescribeTemplateDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplateDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplateDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplateDownloadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_template_download(
        self,
        request: xtee_20210910_models.DescribeTemplateDownloadRequest,
    ) -> xtee_20210910_models.DescribeTemplateDownloadResponse:
        """
        @summary Template Download
        
        @param request: DescribeTemplateDownloadRequest
        @return: DescribeTemplateDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_template_download_with_options(request, runtime)

    async def describe_template_download_async(
        self,
        request: xtee_20210910_models.DescribeTemplateDownloadRequest,
    ) -> xtee_20210910_models.DescribeTemplateDownloadResponse:
        """
        @summary Template Download
        
        @param request: DescribeTemplateDownloadRequest
        @return: DescribeTemplateDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_template_download_with_options_async(request, runtime)

    def describe_template_page_list_with_options(
        self,
        request: xtee_20210910_models.DescribeTemplatePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplatePageListResponse:
        """
        @summary Query Event List by Event Name
        
        @param request: DescribeTemplatePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplatePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_name):
            query['templateName'] = request.template_name
        if not UtilClient.is_unset(request.template_search_item):
            query['templateSearchItem'] = request.template_search_item
        if not UtilClient.is_unset(request.template_status):
            query['templateStatus'] = request.template_status
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplatePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplatePageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_template_page_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeTemplatePageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeTemplatePageListResponse:
        """
        @summary Query Event List by Event Name
        
        @param request: DescribeTemplatePageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTemplatePageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_name):
            query['templateName'] = request.template_name
        if not UtilClient.is_unset(request.template_search_item):
            query['templateSearchItem'] = request.template_search_item
        if not UtilClient.is_unset(request.template_status):
            query['templateStatus'] = request.template_status
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTemplatePageList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeTemplatePageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_template_page_list(
        self,
        request: xtee_20210910_models.DescribeTemplatePageListRequest,
    ) -> xtee_20210910_models.DescribeTemplatePageListResponse:
        """
        @summary Query Event List by Event Name
        
        @param request: DescribeTemplatePageListRequest
        @return: DescribeTemplatePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_template_page_list_with_options(request, runtime)

    async def describe_template_page_list_async(
        self,
        request: xtee_20210910_models.DescribeTemplatePageListRequest,
    ) -> xtee_20210910_models.DescribeTemplatePageListResponse:
        """
        @summary Query Event List by Event Name
        
        @param request: DescribeTemplatePageListRequest
        @return: DescribeTemplatePageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_template_page_list_with_options_async(request, runtime)

    def describe_used_service_with_options(
        self,
        request: xtee_20210910_models.DescribeUsedServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeUsedServiceResponse:
        """
        @summary Get List of Services Used by User
        
        @param request: DescribeUsedServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUsedServiceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUsedService',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeUsedServiceResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_used_service_with_options_async(
        self,
        request: xtee_20210910_models.DescribeUsedServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeUsedServiceResponse:
        """
        @summary Get List of Services Used by User
        
        @param request: DescribeUsedServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUsedServiceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUsedService',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeUsedServiceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_used_service(
        self,
        request: xtee_20210910_models.DescribeUsedServiceRequest,
    ) -> xtee_20210910_models.DescribeUsedServiceResponse:
        """
        @summary Get List of Services Used by User
        
        @param request: DescribeUsedServiceRequest
        @return: DescribeUsedServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_used_service_with_options(request, runtime)

    async def describe_used_service_async(
        self,
        request: xtee_20210910_models.DescribeUsedServiceRequest,
    ) -> xtee_20210910_models.DescribeUsedServiceResponse:
        """
        @summary Get List of Services Used by User
        
        @param request: DescribeUsedServiceRequest
        @return: DescribeUsedServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_used_service_with_options_async(request, runtime)

    def describe_user_info_with_options(
        self,
        request: xtee_20210910_models.DescribeUserInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeUserInfoResponse:
        """
        @summary Get Current Logged-in User Information
        
        @param request: DescribeUserInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeUserInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_user_info_with_options_async(
        self,
        request: xtee_20210910_models.DescribeUserInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeUserInfoResponse:
        """
        @summary Get Current Logged-in User Information
        
        @param request: DescribeUserInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserInfo',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeUserInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_user_info(
        self,
        request: xtee_20210910_models.DescribeUserInfoRequest,
    ) -> xtee_20210910_models.DescribeUserInfoResponse:
        """
        @summary Get Current Logged-in User Information
        
        @param request: DescribeUserInfoRequest
        @return: DescribeUserInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_user_info_with_options(request, runtime)

    async def describe_user_info_async(
        self,
        request: xtee_20210910_models.DescribeUserInfoRequest,
    ) -> xtee_20210910_models.DescribeUserInfoResponse:
        """
        @summary Get Current Logged-in User Information
        
        @param request: DescribeUserInfoRequest
        @return: DescribeUserInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_user_info_with_options_async(request, runtime)

    def describe_variable_bind_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableBindDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableBindDetailResponse:
        """
        @summary Query Variable Binding Information
        
        @param request: DescribeVariableBindDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableBindDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.define_id):
            query['defineId'] = request.define_id
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableBindDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableBindDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_bind_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableBindDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableBindDetailResponse:
        """
        @summary Query Variable Binding Information
        
        @param request: DescribeVariableBindDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableBindDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.define_id):
            query['defineId'] = request.define_id
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableBindDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableBindDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_bind_detail(
        self,
        request: xtee_20210910_models.DescribeVariableBindDetailRequest,
    ) -> xtee_20210910_models.DescribeVariableBindDetailResponse:
        """
        @summary Query Variable Binding Information
        
        @param request: DescribeVariableBindDetailRequest
        @return: DescribeVariableBindDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_bind_detail_with_options(request, runtime)

    async def describe_variable_bind_detail_async(
        self,
        request: xtee_20210910_models.DescribeVariableBindDetailRequest,
    ) -> xtee_20210910_models.DescribeVariableBindDetailResponse:
        """
        @summary Query Variable Binding Information
        
        @param request: DescribeVariableBindDetailRequest
        @return: DescribeVariableBindDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_bind_detail_with_options_async(request, runtime)

    def describe_variable_detail_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableDetailResponse:
        """
        @summary Query variable details
        
        @param request: DescribeVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_detail_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableDetailResponse:
        """
        @summary Query variable details
        
        @param request: DescribeVariableDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableDetail',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_detail(
        self,
        request: xtee_20210910_models.DescribeVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeVariableDetailResponse:
        """
        @summary Query variable details
        
        @param request: DescribeVariableDetailRequest
        @return: DescribeVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_detail_with_options(request, runtime)

    async def describe_variable_detail_async(
        self,
        request: xtee_20210910_models.DescribeVariableDetailRequest,
    ) -> xtee_20210910_models.DescribeVariableDetailResponse:
        """
        @summary Query variable details
        
        @param request: DescribeVariableDetailRequest
        @return: DescribeVariableDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_detail_with_options_async(request, runtime)

    def describe_variable_fee_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableFeeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableFeeResponse:
        """
        @summary Query Variable Fee Information
        
        @param request: DescribeVariableFeeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableFeeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableFee',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableFeeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_fee_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableFeeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableFeeResponse:
        """
        @summary Query Variable Fee Information
        
        @param request: DescribeVariableFeeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableFeeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableFee',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableFeeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_fee(
        self,
        request: xtee_20210910_models.DescribeVariableFeeRequest,
    ) -> xtee_20210910_models.DescribeVariableFeeResponse:
        """
        @summary Query Variable Fee Information
        
        @param request: DescribeVariableFeeRequest
        @return: DescribeVariableFeeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_fee_with_options(request, runtime)

    async def describe_variable_fee_async(
        self,
        request: xtee_20210910_models.DescribeVariableFeeRequest,
    ) -> xtee_20210910_models.DescribeVariableFeeResponse:
        """
        @summary Query Variable Fee Information
        
        @param request: DescribeVariableFeeRequest
        @return: DescribeVariableFeeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_fee_with_options_async(request, runtime)

    def describe_variable_list_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableListResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.ref_obj_id):
            query['refObjId'] = request.ref_obj_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source_type):
            query['sourceType'] = request.source_type
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        if not UtilClient.is_unset(request.types_str):
            query['typesStr'] = request.types_str
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableListResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeVariableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.ref_obj_id):
            query['refObjId'] = request.ref_obj_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source_type):
            query['sourceType'] = request.source_type
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        if not UtilClient.is_unset(request.types_str):
            query['typesStr'] = request.types_str
        if not UtilClient.is_unset(request.value):
            query['value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_list(
        self,
        request: xtee_20210910_models.DescribeVariableListRequest,
    ) -> xtee_20210910_models.DescribeVariableListResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeVariableListRequest
        @return: DescribeVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_list_with_options(request, runtime)

    async def describe_variable_list_async(
        self,
        request: xtee_20210910_models.DescribeVariableListRequest,
    ) -> xtee_20210910_models.DescribeVariableListResponse:
        """
        @summary Query Variable Details
        
        @param request: DescribeVariableListRequest
        @return: DescribeVariableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_list_with_options_async(request, runtime)

    def describe_variable_market_list_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableMarketListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableMarketListResponse:
        """
        @summary Query Variable Definitions
        
        @param request: DescribeVariableMarketListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableMarketListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.charging_mode):
            query['chargingMode'] = request.charging_mode
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scenes_str):
            query['scenesStr'] = request.scenes_str
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableMarketList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableMarketListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_market_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableMarketListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableMarketListResponse:
        """
        @summary Query Variable Definitions
        
        @param request: DescribeVariableMarketListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableMarketListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.charging_mode):
            query['chargingMode'] = request.charging_mode
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scenes_str):
            query['scenesStr'] = request.scenes_str
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableMarketList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableMarketListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_market_list(
        self,
        request: xtee_20210910_models.DescribeVariableMarketListRequest,
    ) -> xtee_20210910_models.DescribeVariableMarketListResponse:
        """
        @summary Query Variable Definitions
        
        @param request: DescribeVariableMarketListRequest
        @return: DescribeVariableMarketListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_market_list_with_options(request, runtime)

    async def describe_variable_market_list_async(
        self,
        request: xtee_20210910_models.DescribeVariableMarketListRequest,
    ) -> xtee_20210910_models.DescribeVariableMarketListResponse:
        """
        @summary Query Variable Definitions
        
        @param request: DescribeVariableMarketListRequest
        @return: DescribeVariableMarketListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_market_list_with_options_async(request, runtime)

    def describe_variable_scene_list_with_options(
        self,
        request: xtee_20210910_models.DescribeVariableSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableSceneListResponse:
        """
        @summary Query Configuration Information
        
        @param request: DescribeVariableSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_type):
            query['bizType'] = request.biz_type
        if not UtilClient.is_unset(request.config_key):
            query['configKey'] = request.config_key
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableSceneListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_variable_scene_list_with_options_async(
        self,
        request: xtee_20210910_models.DescribeVariableSceneListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DescribeVariableSceneListResponse:
        """
        @summary Query Configuration Information
        
        @param request: DescribeVariableSceneListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVariableSceneListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_type):
            query['bizType'] = request.biz_type
        if not UtilClient.is_unset(request.config_key):
            query['configKey'] = request.config_key
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVariableSceneList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DescribeVariableSceneListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_variable_scene_list(
        self,
        request: xtee_20210910_models.DescribeVariableSceneListRequest,
    ) -> xtee_20210910_models.DescribeVariableSceneListResponse:
        """
        @summary Query Configuration Information
        
        @param request: DescribeVariableSceneListRequest
        @return: DescribeVariableSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_variable_scene_list_with_options(request, runtime)

    async def describe_variable_scene_list_async(
        self,
        request: xtee_20210910_models.DescribeVariableSceneListRequest,
    ) -> xtee_20210910_models.DescribeVariableSceneListResponse:
        """
        @summary Query Configuration Information
        
        @param request: DescribeVariableSceneListRequest
        @return: DescribeVariableSceneListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_variable_scene_list_with_options_async(request, runtime)

    def download_smaple_batch_with_options(
        self,
        request: xtee_20210910_models.DownloadSmapleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DownloadSmapleBatchResponse:
        """
        @summary Sample List Data Download
        
        @param request: DownloadSmapleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DownloadSmapleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DownloadSmapleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DownloadSmapleBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def download_smaple_batch_with_options_async(
        self,
        request: xtee_20210910_models.DownloadSmapleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.DownloadSmapleBatchResponse:
        """
        @summary Sample List Data Download
        
        @param request: DownloadSmapleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DownloadSmapleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_uuid):
            query['batchUuid'] = request.batch_uuid
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DownloadSmapleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.DownloadSmapleBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def download_smaple_batch(
        self,
        request: xtee_20210910_models.DownloadSmapleBatchRequest,
    ) -> xtee_20210910_models.DownloadSmapleBatchResponse:
        """
        @summary Sample List Data Download
        
        @param request: DownloadSmapleBatchRequest
        @return: DownloadSmapleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.download_smaple_batch_with_options(request, runtime)

    async def download_smaple_batch_async(
        self,
        request: xtee_20210910_models.DownloadSmapleBatchRequest,
    ) -> xtee_20210910_models.DownloadSmapleBatchResponse:
        """
        @summary Sample List Data Download
        
        @param request: DownloadSmapleBatchRequest
        @return: DownloadSmapleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.download_smaple_batch_with_options_async(request, runtime)

    def expression_test_with_options(
        self,
        request: xtee_20210910_models.ExpressionTestRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ExpressionTestResponse:
        """
        @summary Custom Variable Test
        
        @param request: ExpressionTestRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExpressionTestResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.expression_variable_ids):
            query['expressionVariableIds'] = request.expression_variable_ids
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExpressionTest',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ExpressionTestResponse(),
            self.call_api(params, req, runtime)
        )

    async def expression_test_with_options_async(
        self,
        request: xtee_20210910_models.ExpressionTestRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ExpressionTestResponse:
        """
        @summary Custom Variable Test
        
        @param request: ExpressionTestRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExpressionTestResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.expression_variable_ids):
            query['expressionVariableIds'] = request.expression_variable_ids
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExpressionTest',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ExpressionTestResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def expression_test(
        self,
        request: xtee_20210910_models.ExpressionTestRequest,
    ) -> xtee_20210910_models.ExpressionTestResponse:
        """
        @summary Custom Variable Test
        
        @param request: ExpressionTestRequest
        @return: ExpressionTestResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.expression_test_with_options(request, runtime)

    async def expression_test_async(
        self,
        request: xtee_20210910_models.ExpressionTestRequest,
    ) -> xtee_20210910_models.ExpressionTestResponse:
        """
        @summary Custom Variable Test
        
        @param request: ExpressionTestRequest
        @return: ExpressionTestResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.expression_test_with_options_async(request, runtime)

    def file_upload_with_options(
        self,
        request: xtee_20210910_models.FileUploadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.FileUploadResponse:
        """
        @summary File Upload
        
        @param request: FileUploadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FileUploadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FileUpload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.FileUploadResponse(),
            self.call_api(params, req, runtime)
        )

    async def file_upload_with_options_async(
        self,
        request: xtee_20210910_models.FileUploadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.FileUploadResponse:
        """
        @summary File Upload
        
        @param request: FileUploadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FileUploadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FileUpload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.FileUploadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def file_upload(
        self,
        request: xtee_20210910_models.FileUploadRequest,
    ) -> xtee_20210910_models.FileUploadResponse:
        """
        @summary File Upload
        
        @param request: FileUploadRequest
        @return: FileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.file_upload_with_options(request, runtime)

    async def file_upload_async(
        self,
        request: xtee_20210910_models.FileUploadRequest,
    ) -> xtee_20210910_models.FileUploadResponse:
        """
        @summary File Upload
        
        @param request: FileUploadRequest
        @return: FileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.file_upload_with_options_async(request, runtime)

    def import_field_with_options(
        self,
        request: xtee_20210910_models.ImportFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportFieldResponse:
        """
        @summary Batch Import
        
        @param request: ImportFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def import_field_with_options_async(
        self,
        request: xtee_20210910_models.ImportFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportFieldResponse:
        """
        @summary Batch Import
        
        @param request: ImportFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_url):
            query['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def import_field(
        self,
        request: xtee_20210910_models.ImportFieldRequest,
    ) -> xtee_20210910_models.ImportFieldResponse:
        """
        @summary Batch Import
        
        @param request: ImportFieldRequest
        @return: ImportFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.import_field_with_options(request, runtime)

    async def import_field_async(
        self,
        request: xtee_20210910_models.ImportFieldRequest,
    ) -> xtee_20210910_models.ImportFieldResponse:
        """
        @summary Batch Import
        
        @param request: ImportFieldRequest
        @return: ImportFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.import_field_with_options_async(request, runtime)

    def import_name_list_with_options(
        self,
        request: xtee_20210910_models.ImportNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportNameListResponse:
        """
        @summary Create or Import Name List
        
        @param request: ImportNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.data):
            query['data'] = request.data
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.import_type):
            query['importType'] = request.import_type
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.name_list_type):
            query['nameListType'] = request.name_list_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportNameListResponse(),
            self.call_api(params, req, runtime)
        )

    async def import_name_list_with_options_async(
        self,
        request: xtee_20210910_models.ImportNameListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportNameListResponse:
        """
        @summary Create or Import Name List
        
        @param request: ImportNameListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportNameListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.data):
            query['data'] = request.data
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.import_type):
            query['importType'] = request.import_type
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.name_list_type):
            query['nameListType'] = request.name_list_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.variable_id):
            query['variableId'] = request.variable_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportNameList',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportNameListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def import_name_list(
        self,
        request: xtee_20210910_models.ImportNameListRequest,
    ) -> xtee_20210910_models.ImportNameListResponse:
        """
        @summary Create or Import Name List
        
        @param request: ImportNameListRequest
        @return: ImportNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.import_name_list_with_options(request, runtime)

    async def import_name_list_async(
        self,
        request: xtee_20210910_models.ImportNameListRequest,
    ) -> xtee_20210910_models.ImportNameListResponse:
        """
        @summary Create or Import Name List
        
        @param request: ImportNameListRequest
        @return: ImportNameListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.import_name_list_with_options_async(request, runtime)

    def import_template_event_with_options(
        self,
        request: xtee_20210910_models.ImportTemplateEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportTemplateEventResponse:
        """
        @summary Import Template Event
        
        @param request: ImportTemplateEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportTemplateEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_template_ids):
            query['eventTemplateIds'] = request.event_template_ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportTemplateEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportTemplateEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def import_template_event_with_options_async(
        self,
        request: xtee_20210910_models.ImportTemplateEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ImportTemplateEventResponse:
        """
        @summary Import Template Event
        
        @param request: ImportTemplateEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportTemplateEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_template_ids):
            query['eventTemplateIds'] = request.event_template_ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportTemplateEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ImportTemplateEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def import_template_event(
        self,
        request: xtee_20210910_models.ImportTemplateEventRequest,
    ) -> xtee_20210910_models.ImportTemplateEventResponse:
        """
        @summary Import Template Event
        
        @param request: ImportTemplateEventRequest
        @return: ImportTemplateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.import_template_event_with_options(request, runtime)

    async def import_template_event_async(
        self,
        request: xtee_20210910_models.ImportTemplateEventRequest,
    ) -> xtee_20210910_models.ImportTemplateEventResponse:
        """
        @summary Import Template Event
        
        @param request: ImportTemplateEventRequest
        @return: ImportTemplateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.import_template_event_with_options_async(request, runtime)

    def list_variable_define_with_options(
        self,
        request: xtee_20210910_models.ListVariableDefineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ListVariableDefineResponse:
        """
        @summary Query Variable Definition
        
        @param request: ListVariableDefineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVariableDefineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.allow_bind):
            query['allowBind'] = request.allow_bind
        if not UtilClient.is_unset(request.charging_mode):
            query['chargingMode'] = request.charging_mode
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.role_type):
            query['roleType'] = request.role_type
        if not UtilClient.is_unset(request.scenes_str):
            query['scenesStr'] = request.scenes_str
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.types_str):
            query['typesStr'] = request.types_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVariableDefine',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ListVariableDefineResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_variable_define_with_options_async(
        self,
        request: xtee_20210910_models.ListVariableDefineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ListVariableDefineResponse:
        """
        @summary Query Variable Definition
        
        @param request: ListVariableDefineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVariableDefineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.allow_bind):
            query['allowBind'] = request.allow_bind
        if not UtilClient.is_unset(request.charging_mode):
            query['chargingMode'] = request.charging_mode
        if not UtilClient.is_unset(request.current_page):
            query['currentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['pageSize'] = request.page_size
        if not UtilClient.is_unset(request.paging):
            query['paging'] = request.paging
        if not UtilClient.is_unset(request.query_content):
            query['queryContent'] = request.query_content
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.role_type):
            query['roleType'] = request.role_type
        if not UtilClient.is_unset(request.scenes_str):
            query['scenesStr'] = request.scenes_str
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        if not UtilClient.is_unset(request.types_str):
            query['typesStr'] = request.types_str
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVariableDefine',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ListVariableDefineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_variable_define(
        self,
        request: xtee_20210910_models.ListVariableDefineRequest,
    ) -> xtee_20210910_models.ListVariableDefineResponse:
        """
        @summary Query Variable Definition
        
        @param request: ListVariableDefineRequest
        @return: ListVariableDefineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_variable_define_with_options(request, runtime)

    async def list_variable_define_async(
        self,
        request: xtee_20210910_models.ListVariableDefineRequest,
    ) -> xtee_20210910_models.ListVariableDefineResponse:
        """
        @summary Query Variable Definition
        
        @param request: ListVariableDefineRequest
        @return: ListVariableDefineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_variable_define_with_options_async(request, runtime)

    def model_delete_with_options(
        self,
        request: xtee_20210910_models.ModelDeleteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelDeleteResponse:
        """
        @summary Delete
        
        @param request: ModelDeleteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelDeleteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelDelete',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelDeleteResponse(),
            self.call_api(params, req, runtime)
        )

    async def model_delete_with_options_async(
        self,
        request: xtee_20210910_models.ModelDeleteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelDeleteResponse:
        """
        @summary Delete
        
        @param request: ModelDeleteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelDeleteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelDelete',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelDeleteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def model_delete(
        self,
        request: xtee_20210910_models.ModelDeleteRequest,
    ) -> xtee_20210910_models.ModelDeleteResponse:
        """
        @summary Delete
        
        @param request: ModelDeleteRequest
        @return: ModelDeleteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.model_delete_with_options(request, runtime)

    async def model_delete_async(
        self,
        request: xtee_20210910_models.ModelDeleteRequest,
    ) -> xtee_20210910_models.ModelDeleteResponse:
        """
        @summary Delete
        
        @param request: ModelDeleteRequest
        @return: ModelDeleteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.model_delete_with_options_async(request, runtime)

    def model_file_upload_with_options(
        self,
        request: xtee_20210910_models.ModelFileUploadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelFileUploadResponse:
        """
        @summary File Upload
        
        @param request: ModelFileUploadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelFileUploadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.object_name):
            query['ObjectName'] = request.object_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelFileUpload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelFileUploadResponse(),
            self.call_api(params, req, runtime)
        )

    async def model_file_upload_with_options_async(
        self,
        request: xtee_20210910_models.ModelFileUploadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelFileUploadResponse:
        """
        @summary File Upload
        
        @param request: ModelFileUploadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelFileUploadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.object_name):
            query['ObjectName'] = request.object_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelFileUpload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelFileUploadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def model_file_upload(
        self,
        request: xtee_20210910_models.ModelFileUploadRequest,
    ) -> xtee_20210910_models.ModelFileUploadResponse:
        """
        @summary File Upload
        
        @param request: ModelFileUploadRequest
        @return: ModelFileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.model_file_upload_with_options(request, runtime)

    async def model_file_upload_async(
        self,
        request: xtee_20210910_models.ModelFileUploadRequest,
    ) -> xtee_20210910_models.ModelFileUploadResponse:
        """
        @summary File Upload
        
        @param request: ModelFileUploadRequest
        @return: ModelFileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.model_file_upload_with_options_async(request, runtime)

    def model_is_using_with_options(
        self,
        request: xtee_20210910_models.ModelIsUsingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelIsUsingResponse:
        """
        @summary Enable, Disable
        
        @param request: ModelIsUsingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelIsUsingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_code):
            query['ModelCode'] = request.model_code
        if not UtilClient.is_unset(request.model_id):
            query['ModelId'] = request.model_id
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelIsUsing',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelIsUsingResponse(),
            self.call_api(params, req, runtime)
        )

    async def model_is_using_with_options_async(
        self,
        request: xtee_20210910_models.ModelIsUsingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelIsUsingResponse:
        """
        @summary Enable, Disable
        
        @param request: ModelIsUsingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelIsUsingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_code):
            query['ModelCode'] = request.model_code
        if not UtilClient.is_unset(request.model_id):
            query['ModelId'] = request.model_id
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelIsUsing',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelIsUsingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def model_is_using(
        self,
        request: xtee_20210910_models.ModelIsUsingRequest,
    ) -> xtee_20210910_models.ModelIsUsingResponse:
        """
        @summary Enable, Disable
        
        @param request: ModelIsUsingRequest
        @return: ModelIsUsingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.model_is_using_with_options(request, runtime)

    async def model_is_using_async(
        self,
        request: xtee_20210910_models.ModelIsUsingRequest,
    ) -> xtee_20210910_models.ModelIsUsingResponse:
        """
        @summary Enable, Disable
        
        @param request: ModelIsUsingRequest
        @return: ModelIsUsingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.model_is_using_with_options_async(request, runtime)

    def model_name_is_duplication_with_options(
        self,
        request: xtee_20210910_models.ModelNameIsDuplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelNameIsDuplicationResponse:
        """
        @summary Is Model Name Duplicated
        
        @param request: ModelNameIsDuplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelNameIsDuplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelNameIsDuplication',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelNameIsDuplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def model_name_is_duplication_with_options_async(
        self,
        request: xtee_20210910_models.ModelNameIsDuplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelNameIsDuplicationResponse:
        """
        @summary Is Model Name Duplicated
        
        @param request: ModelNameIsDuplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelNameIsDuplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.model_name):
            query['ModelName'] = request.model_name
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelNameIsDuplication',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelNameIsDuplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def model_name_is_duplication(
        self,
        request: xtee_20210910_models.ModelNameIsDuplicationRequest,
    ) -> xtee_20210910_models.ModelNameIsDuplicationResponse:
        """
        @summary Is Model Name Duplicated
        
        @param request: ModelNameIsDuplicationRequest
        @return: ModelNameIsDuplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.model_name_is_duplication_with_options(request, runtime)

    async def model_name_is_duplication_async(
        self,
        request: xtee_20210910_models.ModelNameIsDuplicationRequest,
    ) -> xtee_20210910_models.ModelNameIsDuplicationResponse:
        """
        @summary Is Model Name Duplicated
        
        @param request: ModelNameIsDuplicationRequest
        @return: ModelNameIsDuplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.model_name_is_duplication_with_options_async(request, runtime)

    def model_sample_download_with_options(
        self,
        request: xtee_20210910_models.ModelSampleDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelSampleDownloadResponse:
        """
        @summary Template Download
        
        @param request: ModelSampleDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelSampleDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelSampleDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelSampleDownloadResponse(),
            self.call_api(params, req, runtime)
        )

    async def model_sample_download_with_options_async(
        self,
        request: xtee_20210910_models.ModelSampleDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModelSampleDownloadResponse:
        """
        @summary Template Download
        
        @param request: ModelSampleDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModelSampleDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModelSampleDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModelSampleDownloadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def model_sample_download(
        self,
        request: xtee_20210910_models.ModelSampleDownloadRequest,
    ) -> xtee_20210910_models.ModelSampleDownloadResponse:
        """
        @summary Template Download
        
        @param request: ModelSampleDownloadRequest
        @return: ModelSampleDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.model_sample_download_with_options(request, runtime)

    async def model_sample_download_async(
        self,
        request: xtee_20210910_models.ModelSampleDownloadRequest,
    ) -> xtee_20210910_models.ModelSampleDownloadResponse:
        """
        @summary Template Download
        
        @param request: ModelSampleDownloadRequest
        @return: ModelSampleDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.model_sample_download_with_options_async(request, runtime)

    def modify_app_key_with_options(
        self,
        request: xtee_20210910_models.ModifyAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyAppKeyResponse:
        """
        @summary Update Memo
        
        @param request: ModifyAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyAppKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_app_key_with_options_async(
        self,
        request: xtee_20210910_models.ModifyAppKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyAppKeyResponse:
        """
        @summary Update Memo
        
        @param request: ModifyAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAppKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.app_key):
            query['appKey'] = request.app_key
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAppKey',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyAppKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_app_key(
        self,
        request: xtee_20210910_models.ModifyAppKeyRequest,
    ) -> xtee_20210910_models.ModifyAppKeyResponse:
        """
        @summary Update Memo
        
        @param request: ModifyAppKeyRequest
        @return: ModifyAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_app_key_with_options(request, runtime)

    async def modify_app_key_async(
        self,
        request: xtee_20210910_models.ModifyAppKeyRequest,
    ) -> xtee_20210910_models.ModifyAppKeyResponse:
        """
        @summary Update Memo
        
        @param request: ModifyAppKeyRequest
        @return: ModifyAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_app_key_with_options_async(request, runtime)

    def modify_cust_variable_with_options(
        self,
        request: xtee_20210910_models.ModifyCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyCustVariableResponse:
        """
        @summary Edit Accumulated Variable
        
        @param request: ModifyCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyCustVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_cust_variable_with_options_async(
        self,
        request: xtee_20210910_models.ModifyCustVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyCustVariableResponse:
        """
        @summary Edit Accumulated Variable
        
        @param request: ModifyCustVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCustVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_codes):
            query['eventCodes'] = request.event_codes
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCustVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyCustVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_cust_variable(
        self,
        request: xtee_20210910_models.ModifyCustVariableRequest,
    ) -> xtee_20210910_models.ModifyCustVariableResponse:
        """
        @summary Edit Accumulated Variable
        
        @param request: ModifyCustVariableRequest
        @return: ModifyCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_cust_variable_with_options(request, runtime)

    async def modify_cust_variable_async(
        self,
        request: xtee_20210910_models.ModifyCustVariableRequest,
    ) -> xtee_20210910_models.ModifyCustVariableResponse:
        """
        @summary Edit Accumulated Variable
        
        @param request: ModifyCustVariableRequest
        @return: ModifyCustVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_cust_variable_with_options_async(request, runtime)

    def modify_event_with_options(
        self,
        request: xtee_20210910_models.ModifyEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyEventResponse:
        """
        @summary Edit Event
        
        @param request: ModifyEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_version):
            query['bizVersion'] = request.biz_version
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.input_fields_str):
            query['inputFieldsStr'] = request.input_fields_str
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_event_with_options_async(
        self,
        request: xtee_20210910_models.ModifyEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyEventResponse:
        """
        @summary Edit Event
        
        @param request: ModifyEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.biz_version):
            query['bizVersion'] = request.biz_version
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.input_fields_str):
            query['inputFieldsStr'] = request.input_fields_str
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_type):
            query['templateType'] = request.template_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_event(
        self,
        request: xtee_20210910_models.ModifyEventRequest,
    ) -> xtee_20210910_models.ModifyEventResponse:
        """
        @summary Edit Event
        
        @param request: ModifyEventRequest
        @return: ModifyEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_event_with_options(request, runtime)

    async def modify_event_async(
        self,
        request: xtee_20210910_models.ModifyEventRequest,
    ) -> xtee_20210910_models.ModifyEventResponse:
        """
        @summary Edit Event
        
        @param request: ModifyEventRequest
        @return: ModifyEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_event_with_options_async(request, runtime)

    def modify_event_status_with_options(
        self,
        request: xtee_20210910_models.ModifyEventStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyEventStatusResponse:
        """
        @summary Modify Event Status
        
        @param request: ModifyEventStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEventStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.from_event_satus):
            query['fromEventSatus'] = request.from_event_satus
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.to_event_satus):
            query['toEventSatus'] = request.to_event_satus
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEventStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyEventStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_event_status_with_options_async(
        self,
        request: xtee_20210910_models.ModifyEventStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyEventStatusResponse:
        """
        @summary Modify Event Status
        
        @param request: ModifyEventStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEventStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.from_event_satus):
            query['fromEventSatus'] = request.from_event_satus
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.to_event_satus):
            query['toEventSatus'] = request.to_event_satus
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEventStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyEventStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_event_status(
        self,
        request: xtee_20210910_models.ModifyEventStatusRequest,
    ) -> xtee_20210910_models.ModifyEventStatusResponse:
        """
        @summary Modify Event Status
        
        @param request: ModifyEventStatusRequest
        @return: ModifyEventStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_event_status_with_options(request, runtime)

    async def modify_event_status_async(
        self,
        request: xtee_20210910_models.ModifyEventStatusRequest,
    ) -> xtee_20210910_models.ModifyEventStatusResponse:
        """
        @summary Modify Event Status
        
        @param request: ModifyEventStatusRequest
        @return: ModifyEventStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_event_status_with_options_async(request, runtime)

    def modify_expression_variable_with_options(
        self,
        request: xtee_20210910_models.ModifyExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyExpressionVariableResponse:
        """
        @summary Edit Custom Variable
        
        @param request: ModifyExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyExpressionVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_expression_variable_with_options_async(
        self,
        request: xtee_20210910_models.ModifyExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyExpressionVariableResponse:
        """
        @summary Edit Custom Variable
        
        @param request: ModifyExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyExpressionVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_expression_variable(
        self,
        request: xtee_20210910_models.ModifyExpressionVariableRequest,
    ) -> xtee_20210910_models.ModifyExpressionVariableResponse:
        """
        @summary Edit Custom Variable
        
        @param request: ModifyExpressionVariableRequest
        @return: ModifyExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_expression_variable_with_options(request, runtime)

    async def modify_expression_variable_async(
        self,
        request: xtee_20210910_models.ModifyExpressionVariableRequest,
    ) -> xtee_20210910_models.ModifyExpressionVariableResponse:
        """
        @summary Edit Custom Variable
        
        @param request: ModifyExpressionVariableRequest
        @return: ModifyExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_expression_variable_with_options_async(request, runtime)

    def modify_field_with_options(
        self,
        request: xtee_20210910_models.ModifyFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyFieldResponse:
        """
        @summary Modify Field
        
        @param request: ModifyFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.enum_data):
            query['enumData'] = request.enum_data
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_field_with_options_async(
        self,
        request: xtee_20210910_models.ModifyFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyFieldResponse:
        """
        @summary Modify Field
        
        @param request: ModifyFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.classify):
            query['classify'] = request.classify
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.enum_data):
            query['enumData'] = request.enum_data
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_field(
        self,
        request: xtee_20210910_models.ModifyFieldRequest,
    ) -> xtee_20210910_models.ModifyFieldResponse:
        """
        @summary Modify Field
        
        @param request: ModifyFieldRequest
        @return: ModifyFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_field_with_options(request, runtime)

    async def modify_field_async(
        self,
        request: xtee_20210910_models.ModifyFieldRequest,
    ) -> xtee_20210910_models.ModifyFieldResponse:
        """
        @summary Modify Field
        
        @param request: ModifyFieldRequest
        @return: ModifyFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_field_with_options_async(request, runtime)

    def modify_rule_priority_with_options(
        self,
        request: xtee_20210910_models.ModifyRulePriorityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyRulePriorityResponse:
        """
        @summary Modify Policy Priority
        
        @param request: ModifyRulePriorityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRulePriorityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.priority):
            query['priority'] = request.priority
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRulePriority',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyRulePriorityResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_rule_priority_with_options_async(
        self,
        request: xtee_20210910_models.ModifyRulePriorityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyRulePriorityResponse:
        """
        @summary Modify Policy Priority
        
        @param request: ModifyRulePriorityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRulePriorityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.priority):
            query['priority'] = request.priority
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRulePriority',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyRulePriorityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_rule_priority(
        self,
        request: xtee_20210910_models.ModifyRulePriorityRequest,
    ) -> xtee_20210910_models.ModifyRulePriorityResponse:
        """
        @summary Modify Policy Priority
        
        @param request: ModifyRulePriorityRequest
        @return: ModifyRulePriorityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_rule_priority_with_options(request, runtime)

    async def modify_rule_priority_async(
        self,
        request: xtee_20210910_models.ModifyRulePriorityRequest,
    ) -> xtee_20210910_models.ModifyRulePriorityResponse:
        """
        @summary Modify Policy Priority
        
        @param request: ModifyRulePriorityRequest
        @return: ModifyRulePriorityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_rule_priority_with_options_async(request, runtime)

    def modify_rule_status_with_options(
        self,
        request: xtee_20210910_models.ModifyRuleStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyRuleStatusResponse:
        """
        @summary Change the status of a policy version application
        
        @param request: ModifyRuleStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRuleStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.apply_user_id):
            query['applyUserId'] = request.apply_user_id
        if not UtilClient.is_unset(request.apply_user_name):
            query['applyUserName'] = request.apply_user_name
        if not UtilClient.is_unset(request.audit_remark):
            query['auditRemark'] = request.audit_remark
        if not UtilClient.is_unset(request.audit_user_id):
            query['auditUserId'] = request.audit_user_id
        if not UtilClient.is_unset(request.audit_user_name):
            query['auditUserName'] = request.audit_user_name
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_audit_type):
            query['ruleAuditType'] = request.rule_audit_type
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRuleStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyRuleStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_rule_status_with_options_async(
        self,
        request: xtee_20210910_models.ModifyRuleStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.ModifyRuleStatusResponse:
        """
        @summary Change the status of a policy version application
        
        @param request: ModifyRuleStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRuleStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.apply_user_id):
            query['applyUserId'] = request.apply_user_id
        if not UtilClient.is_unset(request.apply_user_name):
            query['applyUserName'] = request.apply_user_name
        if not UtilClient.is_unset(request.audit_remark):
            query['auditRemark'] = request.audit_remark
        if not UtilClient.is_unset(request.audit_user_id):
            query['auditUserId'] = request.audit_user_id
        if not UtilClient.is_unset(request.audit_user_name):
            query['auditUserName'] = request.audit_user_name
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_audit_type):
            query['ruleAuditType'] = request.rule_audit_type
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRuleStatus',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.ModifyRuleStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_rule_status(
        self,
        request: xtee_20210910_models.ModifyRuleStatusRequest,
    ) -> xtee_20210910_models.ModifyRuleStatusResponse:
        """
        @summary Change the status of a policy version application
        
        @param request: ModifyRuleStatusRequest
        @return: ModifyRuleStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_rule_status_with_options(request, runtime)

    async def modify_rule_status_async(
        self,
        request: xtee_20210910_models.ModifyRuleStatusRequest,
    ) -> xtee_20210910_models.ModifyRuleStatusResponse:
        """
        @summary Change the status of a policy version application
        
        @param request: ModifyRuleStatusRequest
        @return: ModifyRuleStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_rule_status_with_options_async(request, runtime)

    def open_console_sls_with_options(
        self,
        request: xtee_20210910_models.OpenConsoleSlsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.OpenConsoleSlsResponse:
        """
        @summary Activate Service
        
        @param request: OpenConsoleSlsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenConsoleSlsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenConsoleSls',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.OpenConsoleSlsResponse(),
            self.call_api(params, req, runtime)
        )

    async def open_console_sls_with_options_async(
        self,
        request: xtee_20210910_models.OpenConsoleSlsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.OpenConsoleSlsResponse:
        """
        @summary Activate Service
        
        @param request: OpenConsoleSlsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenConsoleSlsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.scene):
            query['scene'] = request.scene
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenConsoleSls',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.OpenConsoleSlsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def open_console_sls(
        self,
        request: xtee_20210910_models.OpenConsoleSlsRequest,
    ) -> xtee_20210910_models.OpenConsoleSlsResponse:
        """
        @summary Activate Service
        
        @param request: OpenConsoleSlsRequest
        @return: OpenConsoleSlsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.open_console_sls_with_options(request, runtime)

    async def open_console_sls_async(
        self,
        request: xtee_20210910_models.OpenConsoleSlsRequest,
    ) -> xtee_20210910_models.OpenConsoleSlsResponse:
        """
        @summary Activate Service
        
        @param request: OpenConsoleSlsRequest
        @return: OpenConsoleSlsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.open_console_sls_with_options_async(request, runtime)

    def operate_favorite_variable_with_options(
        self,
        request: xtee_20210910_models.OperateFavoriteVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.OperateFavoriteVariableResponse:
        """
        @summary Operate Favorites
        
        @param request: OperateFavoriteVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateFavoriteVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.operate):
            query['operate'] = request.operate
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateFavoriteVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.OperateFavoriteVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_favorite_variable_with_options_async(
        self,
        request: xtee_20210910_models.OperateFavoriteVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.OperateFavoriteVariableResponse:
        """
        @summary Operate Favorites
        
        @param request: OperateFavoriteVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateFavoriteVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.operate):
            query['operate'] = request.operate
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateFavoriteVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.OperateFavoriteVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_favorite_variable(
        self,
        request: xtee_20210910_models.OperateFavoriteVariableRequest,
    ) -> xtee_20210910_models.OperateFavoriteVariableResponse:
        """
        @summary Operate Favorites
        
        @param request: OperateFavoriteVariableRequest
        @return: OperateFavoriteVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_favorite_variable_with_options(request, runtime)

    async def operate_favorite_variable_async(
        self,
        request: xtee_20210910_models.OperateFavoriteVariableRequest,
    ) -> xtee_20210910_models.OperateFavoriteVariableResponse:
        """
        @summary Operate Favorites
        
        @param request: OperateFavoriteVariableRequest
        @return: OperateFavoriteVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_favorite_variable_with_options_async(request, runtime)

    def permission_check_with_options(
        self,
        request: xtee_20210910_models.PermissionCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PermissionCheckResponse:
        """
        @summary Enterprise Verification
        
        @param request: PermissionCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PermissionCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PermissionCheck',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PermissionCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def permission_check_with_options_async(
        self,
        request: xtee_20210910_models.PermissionCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PermissionCheckResponse:
        """
        @summary Enterprise Verification
        
        @param request: PermissionCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PermissionCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PermissionCheck',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PermissionCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def permission_check(
        self,
        request: xtee_20210910_models.PermissionCheckRequest,
    ) -> xtee_20210910_models.PermissionCheckResponse:
        """
        @summary Enterprise Verification
        
        @param request: PermissionCheckRequest
        @return: PermissionCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.permission_check_with_options(request, runtime)

    async def permission_check_async(
        self,
        request: xtee_20210910_models.PermissionCheckRequest,
    ) -> xtee_20210910_models.PermissionCheckResponse:
        """
        @summary Enterprise Verification
        
        @param request: PermissionCheckRequest
        @return: PermissionCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.permission_check_with_options_async(request, runtime)

    def poc_create_task_with_options(
        self,
        request: xtee_20210910_models.PocCreateTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocCreateTaskResponse:
        """
        @summary createTask
        
        @param request: PocCreateTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocCreateTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.date_format):
            query['DateFormat'] = request.date_format
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocCreateTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocCreateTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def poc_create_task_with_options_async(
        self,
        request: xtee_20210910_models.PocCreateTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocCreateTaskResponse:
        """
        @summary createTask
        
        @param request: PocCreateTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocCreateTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.date_format):
            query['DateFormat'] = request.date_format
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocCreateTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocCreateTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def poc_create_task(
        self,
        request: xtee_20210910_models.PocCreateTaskRequest,
    ) -> xtee_20210910_models.PocCreateTaskResponse:
        """
        @summary createTask
        
        @param request: PocCreateTaskRequest
        @return: PocCreateTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.poc_create_task_with_options(request, runtime)

    async def poc_create_task_async(
        self,
        request: xtee_20210910_models.PocCreateTaskRequest,
    ) -> xtee_20210910_models.PocCreateTaskResponse:
        """
        @summary createTask
        
        @param request: PocCreateTaskRequest
        @return: PocCreateTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.poc_create_task_with_options_async(request, runtime)

    def poc_get_download_url_with_options(
        self,
        request: xtee_20210910_models.PocGetDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocGetDownloadUrlResponse:
        """
        @summary PocGetDownloadUrl
        
        @param request: PocGetDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocGetDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocGetDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocGetDownloadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def poc_get_download_url_with_options_async(
        self,
        request: xtee_20210910_models.PocGetDownloadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocGetDownloadUrlResponse:
        """
        @summary PocGetDownloadUrl
        
        @param request: PocGetDownloadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocGetDownloadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocGetDownloadUrl',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocGetDownloadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def poc_get_download_url(
        self,
        request: xtee_20210910_models.PocGetDownloadUrlRequest,
    ) -> xtee_20210910_models.PocGetDownloadUrlResponse:
        """
        @summary PocGetDownloadUrl
        
        @param request: PocGetDownloadUrlRequest
        @return: PocGetDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.poc_get_download_url_with_options(request, runtime)

    async def poc_get_download_url_async(
        self,
        request: xtee_20210910_models.PocGetDownloadUrlRequest,
    ) -> xtee_20210910_models.PocGetDownloadUrlResponse:
        """
        @summary PocGetDownloadUrl
        
        @param request: PocGetDownloadUrlRequest
        @return: PocGetDownloadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.poc_get_download_url_with_options_async(request, runtime)

    def poc_get_token_with_options(
        self,
        request: xtee_20210910_models.PocGetTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocGetTokenResponse:
        """
        @summary getToken
        
        @param request: PocGetTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocGetTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.service_code):
            query['ServiceCode'] = request.service_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocGetToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocGetTokenResponse(),
            self.call_api(params, req, runtime)
        )

    async def poc_get_token_with_options_async(
        self,
        request: xtee_20210910_models.PocGetTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocGetTokenResponse:
        """
        @summary getToken
        
        @param request: PocGetTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocGetTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.service_code):
            query['ServiceCode'] = request.service_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocGetToken',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocGetTokenResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def poc_get_token(
        self,
        request: xtee_20210910_models.PocGetTokenRequest,
    ) -> xtee_20210910_models.PocGetTokenResponse:
        """
        @summary getToken
        
        @param request: PocGetTokenRequest
        @return: PocGetTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.poc_get_token_with_options(request, runtime)

    async def poc_get_token_async(
        self,
        request: xtee_20210910_models.PocGetTokenRequest,
    ) -> xtee_20210910_models.PocGetTokenResponse:
        """
        @summary getToken
        
        @param request: PocGetTokenRequest
        @return: PocGetTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.poc_get_token_with_options_async(request, runtime)

    def poc_send_data_with_options(
        self,
        request: xtee_20210910_models.PocSendDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocSendDataResponse:
        """
        @summary sendData
        
        @param request: PocSendDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocSendDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_no):
            query['BatchNo'] = request.batch_no
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.params_list):
            query['ParamsList'] = request.params_list
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocSendData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocSendDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def poc_send_data_with_options_async(
        self,
        request: xtee_20210910_models.PocSendDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.PocSendDataResponse:
        """
        @summary sendData
        
        @param request: PocSendDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PocSendDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_no):
            query['BatchNo'] = request.batch_no
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.params_list):
            query['ParamsList'] = request.params_list
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.token):
            query['Token'] = request.token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PocSendData',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.PocSendDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def poc_send_data(
        self,
        request: xtee_20210910_models.PocSendDataRequest,
    ) -> xtee_20210910_models.PocSendDataResponse:
        """
        @summary sendData
        
        @param request: PocSendDataRequest
        @return: PocSendDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.poc_send_data_with_options(request, runtime)

    async def poc_send_data_async(
        self,
        request: xtee_20210910_models.PocSendDataRequest,
    ) -> xtee_20210910_models.PocSendDataResponse:
        """
        @summary sendData
        
        @param request: PocSendDataRequest
        @return: PocSendDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.poc_send_data_with_options_async(request, runtime)

    def query_auth_rule_detail_by_rule_id_with_options(
        self,
        request: xtee_20210910_models.QueryAuthRuleDetailByRuleIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse:
        """
        @summary Query White-box Strategy Details
        
        @param request: QueryAuthRuleDetailByRuleIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryAuthRuleDetailByRuleIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryAuthRuleDetailByRuleId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_auth_rule_detail_by_rule_id_with_options_async(
        self,
        request: xtee_20210910_models.QueryAuthRuleDetailByRuleIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse:
        """
        @summary Query White-box Strategy Details
        
        @param request: QueryAuthRuleDetailByRuleIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryAuthRuleDetailByRuleIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryAuthRuleDetailByRuleId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_auth_rule_detail_by_rule_id(
        self,
        request: xtee_20210910_models.QueryAuthRuleDetailByRuleIdRequest,
    ) -> xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse:
        """
        @summary Query White-box Strategy Details
        
        @param request: QueryAuthRuleDetailByRuleIdRequest
        @return: QueryAuthRuleDetailByRuleIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_auth_rule_detail_by_rule_id_with_options(request, runtime)

    async def query_auth_rule_detail_by_rule_id_async(
        self,
        request: xtee_20210910_models.QueryAuthRuleDetailByRuleIdRequest,
    ) -> xtee_20210910_models.QueryAuthRuleDetailByRuleIdResponse:
        """
        @summary Query White-box Strategy Details
        
        @param request: QueryAuthRuleDetailByRuleIdRequest
        @return: QueryAuthRuleDetailByRuleIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_auth_rule_detail_by_rule_id_with_options_async(request, runtime)

    def recall_rule_audit_with_options(
        self,
        request: xtee_20210910_models.RecallRuleAuditRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.RecallRuleAuditResponse:
        """
        @summary Recall.
        
        @param request: RecallRuleAuditRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RecallRuleAuditResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RecallRuleAudit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.RecallRuleAuditResponse(),
            self.call_api(params, req, runtime)
        )

    async def recall_rule_audit_with_options_async(
        self,
        request: xtee_20210910_models.RecallRuleAuditRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.RecallRuleAuditResponse:
        """
        @summary Recall.
        
        @param request: RecallRuleAuditRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RecallRuleAuditResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RecallRuleAudit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.RecallRuleAuditResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def recall_rule_audit(
        self,
        request: xtee_20210910_models.RecallRuleAuditRequest,
    ) -> xtee_20210910_models.RecallRuleAuditResponse:
        """
        @summary Recall.
        
        @param request: RecallRuleAuditRequest
        @return: RecallRuleAuditResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.recall_rule_audit_with_options(request, runtime)

    async def recall_rule_audit_async(
        self,
        request: xtee_20210910_models.RecallRuleAuditRequest,
    ) -> xtee_20210910_models.RecallRuleAuditResponse:
        """
        @summary Recall.
        
        @param request: RecallRuleAuditRequest
        @return: RecallRuleAuditResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.recall_rule_audit_with_options_async(request, runtime)

    def remove_event_with_options(
        self,
        request: xtee_20210910_models.RemoveEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.RemoveEventResponse:
        """
        @summary Delete Event
        
        @param request: RemoveEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.RemoveEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_event_with_options_async(
        self,
        request: xtee_20210910_models.RemoveEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.RemoveEventResponse:
        """
        @summary Delete Event
        
        @param request: RemoveEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.create_type):
            query['createType'] = request.create_type
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.template_code):
            query['templateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.RemoveEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_event(
        self,
        request: xtee_20210910_models.RemoveEventRequest,
    ) -> xtee_20210910_models.RemoveEventResponse:
        """
        @summary Delete Event
        
        @param request: RemoveEventRequest
        @return: RemoveEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.remove_event_with_options(request, runtime)

    async def remove_event_async(
        self,
        request: xtee_20210910_models.RemoveEventRequest,
    ) -> xtee_20210910_models.RemoveEventResponse:
        """
        @summary Delete Event
        
        @param request: RemoveEventRequest
        @return: RemoveEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.remove_event_with_options_async(request, runtime)

    def sample_file_download_with_options(
        self,
        request: xtee_20210910_models.SampleFileDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SampleFileDownloadResponse:
        """
        @summary Template Download
        
        @param request: SampleFileDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SampleFileDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SampleFileDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SampleFileDownloadResponse(),
            self.call_api(params, req, runtime)
        )

    async def sample_file_download_with_options_async(
        self,
        request: xtee_20210910_models.SampleFileDownloadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SampleFileDownloadResponse:
        """
        @summary Template Download
        
        @param request: SampleFileDownloadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SampleFileDownloadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.tab):
            query['Tab'] = request.tab
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SampleFileDownload',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SampleFileDownloadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def sample_file_download(
        self,
        request: xtee_20210910_models.SampleFileDownloadRequest,
    ) -> xtee_20210910_models.SampleFileDownloadResponse:
        """
        @summary Template Download
        
        @param request: SampleFileDownloadRequest
        @return: SampleFileDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.sample_file_download_with_options(request, runtime)

    async def sample_file_download_async(
        self,
        request: xtee_20210910_models.SampleFileDownloadRequest,
    ) -> xtee_20210910_models.SampleFileDownloadResponse:
        """
        @summary Template Download
        
        @param request: SampleFileDownloadRequest
        @return: SampleFileDownloadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.sample_file_download_with_options_async(request, runtime)

    def save_analysis_column_with_options(
        self,
        request: xtee_20210910_models.SaveAnalysisColumnRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SaveAnalysisColumnResponse:
        """
        @summary Save Custom Columns
        
        @param request: SaveAnalysisColumnRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveAnalysisColumnResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.columns):
            query['columns'] = request.columns
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveAnalysisColumn',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SaveAnalysisColumnResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_analysis_column_with_options_async(
        self,
        request: xtee_20210910_models.SaveAnalysisColumnRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SaveAnalysisColumnResponse:
        """
        @summary Save Custom Columns
        
        @param request: SaveAnalysisColumnRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveAnalysisColumnResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.columns):
            query['columns'] = request.columns
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveAnalysisColumn',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SaveAnalysisColumnResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_analysis_column(
        self,
        request: xtee_20210910_models.SaveAnalysisColumnRequest,
    ) -> xtee_20210910_models.SaveAnalysisColumnResponse:
        """
        @summary Save Custom Columns
        
        @param request: SaveAnalysisColumnRequest
        @return: SaveAnalysisColumnResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_analysis_column_with_options(request, runtime)

    async def save_analysis_column_async(
        self,
        request: xtee_20210910_models.SaveAnalysisColumnRequest,
    ) -> xtee_20210910_models.SaveAnalysisColumnResponse:
        """
        @summary Save Custom Columns
        
        @param request: SaveAnalysisColumnRequest
        @return: SaveAnalysisColumnResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_analysis_column_with_options_async(request, runtime)

    def save_by_pass_or_shunt_event_with_options(
        self,
        request: xtee_20210910_models.SaveByPassOrShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SaveByPassOrShuntEventResponse:
        """
        @summary Bypass/Shunt Configuration
        
        @param request: SaveByPassOrShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveByPassOrShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveByPassOrShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SaveByPassOrShuntEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_by_pass_or_shunt_event_with_options_async(
        self,
        request: xtee_20210910_models.SaveByPassOrShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SaveByPassOrShuntEventResponse:
        """
        @summary Bypass/Shunt Configuration
        
        @param request: SaveByPassOrShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveByPassOrShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['eventType'] = request.event_type
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveByPassOrShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SaveByPassOrShuntEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_by_pass_or_shunt_event(
        self,
        request: xtee_20210910_models.SaveByPassOrShuntEventRequest,
    ) -> xtee_20210910_models.SaveByPassOrShuntEventResponse:
        """
        @summary Bypass/Shunt Configuration
        
        @param request: SaveByPassOrShuntEventRequest
        @return: SaveByPassOrShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_by_pass_or_shunt_event_with_options(request, runtime)

    async def save_by_pass_or_shunt_event_async(
        self,
        request: xtee_20210910_models.SaveByPassOrShuntEventRequest,
    ) -> xtee_20210910_models.SaveByPassOrShuntEventResponse:
        """
        @summary Bypass/Shunt Configuration
        
        @param request: SaveByPassOrShuntEventRequest
        @return: SaveByPassOrShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_by_pass_or_shunt_event_with_options_async(request, runtime)

    def start_or_stop_by_pass_shunt_event_with_options(
        self,
        request: xtee_20210910_models.StartOrStopByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StartOrStopByPassShuntEventResponse:
        """
        @summary Start/Stop Bypass Event
        
        @param request: StartOrStopByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartOrStopByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartOrStopByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StartOrStopByPassShuntEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_or_stop_by_pass_shunt_event_with_options_async(
        self,
        request: xtee_20210910_models.StartOrStopByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StartOrStopByPassShuntEventResponse:
        """
        @summary Start/Stop Bypass Event
        
        @param request: StartOrStopByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartOrStopByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartOrStopByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StartOrStopByPassShuntEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_or_stop_by_pass_shunt_event(
        self,
        request: xtee_20210910_models.StartOrStopByPassShuntEventRequest,
    ) -> xtee_20210910_models.StartOrStopByPassShuntEventResponse:
        """
        @summary Start/Stop Bypass Event
        
        @param request: StartOrStopByPassShuntEventRequest
        @return: StartOrStopByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_or_stop_by_pass_shunt_event_with_options(request, runtime)

    async def start_or_stop_by_pass_shunt_event_async(
        self,
        request: xtee_20210910_models.StartOrStopByPassShuntEventRequest,
    ) -> xtee_20210910_models.StartOrStopByPassShuntEventResponse:
        """
        @summary Start/Stop Bypass Event
        
        @param request: StartOrStopByPassShuntEventRequest
        @return: StartOrStopByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_or_stop_by_pass_shunt_event_with_options_async(request, runtime)

    def start_simulation_task_with_options(
        self,
        request: xtee_20210910_models.StartSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StartSimulationTaskResponse:
        """
        @summary Start Task Execution
        
        @param request: StartSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StartSimulationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_simulation_task_with_options_async(
        self,
        request: xtee_20210910_models.StartSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StartSimulationTaskResponse:
        """
        @summary Start Task Execution
        
        @param request: StartSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StartSimulationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_simulation_task(
        self,
        request: xtee_20210910_models.StartSimulationTaskRequest,
    ) -> xtee_20210910_models.StartSimulationTaskResponse:
        """
        @summary Start Task Execution
        
        @param request: StartSimulationTaskRequest
        @return: StartSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_simulation_task_with_options(request, runtime)

    async def start_simulation_task_async(
        self,
        request: xtee_20210910_models.StartSimulationTaskRequest,
    ) -> xtee_20210910_models.StartSimulationTaskResponse:
        """
        @summary Start Task Execution
        
        @param request: StartSimulationTaskRequest
        @return: StartSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_simulation_task_with_options_async(request, runtime)

    def stop_simulation_task_with_options(
        self,
        request: xtee_20210910_models.StopSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StopSimulationTaskResponse:
        """
        @summary Stop Task
        
        @param request: StopSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StopSimulationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_simulation_task_with_options_async(
        self,
        request: xtee_20210910_models.StopSimulationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.StopSimulationTaskResponse:
        """
        @summary Stop Task
        
        @param request: StopSimulationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopSimulationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopSimulationTask',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.StopSimulationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_simulation_task(
        self,
        request: xtee_20210910_models.StopSimulationTaskRequest,
    ) -> xtee_20210910_models.StopSimulationTaskResponse:
        """
        @summary Stop Task
        
        @param request: StopSimulationTaskRequest
        @return: StopSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_simulation_task_with_options(request, runtime)

    async def stop_simulation_task_async(
        self,
        request: xtee_20210910_models.StopSimulationTaskRequest,
    ) -> xtee_20210910_models.StopSimulationTaskResponse:
        """
        @summary Stop Task
        
        @param request: StopSimulationTaskRequest
        @return: StopSimulationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_simulation_task_with_options_async(request, runtime)

    def switch_expression_variable_with_options(
        self,
        request: xtee_20210910_models.SwitchExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchExpressionVariableResponse:
        """
        @summary Custom Variable Switch
        
        @param request: SwitchExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchExpressionVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_expression_variable_with_options_async(
        self,
        request: xtee_20210910_models.SwitchExpressionVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchExpressionVariableResponse:
        """
        @summary Custom Variable Switch
        
        @param request: SwitchExpressionVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchExpressionVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchExpressionVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchExpressionVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_expression_variable(
        self,
        request: xtee_20210910_models.SwitchExpressionVariableRequest,
    ) -> xtee_20210910_models.SwitchExpressionVariableResponse:
        """
        @summary Custom Variable Switch
        
        @param request: SwitchExpressionVariableRequest
        @return: SwitchExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.switch_expression_variable_with_options(request, runtime)

    async def switch_expression_variable_async(
        self,
        request: xtee_20210910_models.SwitchExpressionVariableRequest,
    ) -> xtee_20210910_models.SwitchExpressionVariableResponse:
        """
        @summary Custom Variable Switch
        
        @param request: SwitchExpressionVariableRequest
        @return: SwitchExpressionVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.switch_expression_variable_with_options_async(request, runtime)

    def switch_field_with_options(
        self,
        request: xtee_20210910_models.SwitchFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchFieldResponse:
        """
        @summary Field Switch
        
        @param request: SwitchFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_field_with_options_async(
        self,
        request: xtee_20210910_models.SwitchFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchFieldResponse:
        """
        @summary Field Switch
        
        @param request: SwitchFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchFieldResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.source):
            query['source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchField',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_field(
        self,
        request: xtee_20210910_models.SwitchFieldRequest,
    ) -> xtee_20210910_models.SwitchFieldResponse:
        """
        @summary Field Switch
        
        @param request: SwitchFieldRequest
        @return: SwitchFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.switch_field_with_options(request, runtime)

    async def switch_field_async(
        self,
        request: xtee_20210910_models.SwitchFieldRequest,
    ) -> xtee_20210910_models.SwitchFieldResponse:
        """
        @summary Field Switch
        
        @param request: SwitchFieldRequest
        @return: SwitchFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.switch_field_with_options_async(request, runtime)

    def switch_query_variable_with_options(
        self,
        request: xtee_20210910_models.SwitchQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchQueryVariableResponse:
        """
        @summary Query Variable Enable/Disable
        
        @param request: SwitchQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchQueryVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_query_variable_with_options_async(
        self,
        request: xtee_20210910_models.SwitchQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchQueryVariableResponse:
        """
        @summary Query Variable Enable/Disable
        
        @param request: SwitchQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchQueryVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_query_variable(
        self,
        request: xtee_20210910_models.SwitchQueryVariableRequest,
    ) -> xtee_20210910_models.SwitchQueryVariableResponse:
        """
        @summary Query Variable Enable/Disable
        
        @param request: SwitchQueryVariableRequest
        @return: SwitchQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.switch_query_variable_with_options(request, runtime)

    async def switch_query_variable_async(
        self,
        request: xtee_20210910_models.SwitchQueryVariableRequest,
    ) -> xtee_20210910_models.SwitchQueryVariableResponse:
        """
        @summary Query Variable Enable/Disable
        
        @param request: SwitchQueryVariableRequest
        @return: SwitchQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.switch_query_variable_with_options_async(request, runtime)

    def switch_to_online_with_options(
        self,
        request: xtee_20210910_models.SwitchToOnlineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchToOnlineResponse:
        """
        @summary One-click switch online
        
        @param request: SwitchToOnlineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchToOnlineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchToOnline',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchToOnlineResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_to_online_with_options_async(
        self,
        request: xtee_20210910_models.SwitchToOnlineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchToOnlineResponse:
        """
        @summary One-click switch online
        
        @param request: SwitchToOnlineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchToOnlineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchToOnline',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchToOnlineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_to_online(
        self,
        request: xtee_20210910_models.SwitchToOnlineRequest,
    ) -> xtee_20210910_models.SwitchToOnlineResponse:
        """
        @summary One-click switch online
        
        @param request: SwitchToOnlineRequest
        @return: SwitchToOnlineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.switch_to_online_with_options(request, runtime)

    async def switch_to_online_async(
        self,
        request: xtee_20210910_models.SwitchToOnlineRequest,
    ) -> xtee_20210910_models.SwitchToOnlineResponse:
        """
        @summary One-click switch online
        
        @param request: SwitchToOnlineRequest
        @return: SwitchToOnlineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.switch_to_online_with_options_async(request, runtime)

    def switch_variable_with_options(
        self,
        request: xtee_20210910_models.SwitchVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchVariableResponse:
        """
        @summary Cumulative Variable Switch
        
        @param request: SwitchVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_variable_with_options_async(
        self,
        request: xtee_20210910_models.SwitchVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.SwitchVariableResponse:
        """
        @summary Cumulative Variable Switch
        
        @param request: SwitchVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_version):
            query['dataVersion'] = request.data_version
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.status):
            query['status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SwitchVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.SwitchVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_variable(
        self,
        request: xtee_20210910_models.SwitchVariableRequest,
    ) -> xtee_20210910_models.SwitchVariableResponse:
        """
        @summary Cumulative Variable Switch
        
        @param request: SwitchVariableRequest
        @return: SwitchVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.switch_variable_with_options(request, runtime)

    async def switch_variable_async(
        self,
        request: xtee_20210910_models.SwitchVariableRequest,
    ) -> xtee_20210910_models.SwitchVariableResponse:
        """
        @summary Cumulative Variable Switch
        
        @param request: SwitchVariableRequest
        @return: SwitchVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.switch_variable_with_options_async(request, runtime)

    def task_name_by_user_id_with_options(
        self,
        request: xtee_20210910_models.TaskNameByUserIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.TaskNameByUserIdResponse:
        """
        @summary Determine if the task name is duplicated
        
        @param request: TaskNameByUserIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TaskNameByUserIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TaskNameByUserId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.TaskNameByUserIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def task_name_by_user_id_with_options_async(
        self,
        request: xtee_20210910_models.TaskNameByUserIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.TaskNameByUserIdResponse:
        """
        @summary Determine if the task name is duplicated
        
        @param request: TaskNameByUserIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TaskNameByUserIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reg_id):
            query['RegId'] = request.reg_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TaskNameByUserId',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.TaskNameByUserIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def task_name_by_user_id(
        self,
        request: xtee_20210910_models.TaskNameByUserIdRequest,
    ) -> xtee_20210910_models.TaskNameByUserIdResponse:
        """
        @summary Determine if the task name is duplicated
        
        @param request: TaskNameByUserIdRequest
        @return: TaskNameByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.task_name_by_user_id_with_options(request, runtime)

    async def task_name_by_user_id_async(
        self,
        request: xtee_20210910_models.TaskNameByUserIdRequest,
    ) -> xtee_20210910_models.TaskNameByUserIdResponse:
        """
        @summary Determine if the task name is duplicated
        
        @param request: TaskNameByUserIdRequest
        @return: TaskNameByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.task_name_by_user_id_with_options_async(request, runtime)

    def update_analysis_condition_favorite_with_options(
        self,
        request: xtee_20210910_models.UpdateAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse:
        """
        @summary Modify Query Conditions
        
        @param request: UpdateAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_analysis_condition_favorite_with_options_async(
        self,
        request: xtee_20210910_models.UpdateAnalysisConditionFavoriteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse:
        """
        @summary Modify Query Conditions
        
        @param request: UpdateAnalysisConditionFavoriteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAnalysisConditionFavoriteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.condition):
            query['condition'] = request.condition
        if not UtilClient.is_unset(request.event_begin_time):
            query['eventBeginTime'] = request.event_begin_time
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.event_end_time):
            query['eventEndTime'] = request.event_end_time
        if not UtilClient.is_unset(request.field_name):
            query['fieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['fieldValue'] = request.field_value
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAnalysisConditionFavorite',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_analysis_condition_favorite(
        self,
        request: xtee_20210910_models.UpdateAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse:
        """
        @summary Modify Query Conditions
        
        @param request: UpdateAnalysisConditionFavoriteRequest
        @return: UpdateAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_analysis_condition_favorite_with_options(request, runtime)

    async def update_analysis_condition_favorite_async(
        self,
        request: xtee_20210910_models.UpdateAnalysisConditionFavoriteRequest,
    ) -> xtee_20210910_models.UpdateAnalysisConditionFavoriteResponse:
        """
        @summary Modify Query Conditions
        
        @param request: UpdateAnalysisConditionFavoriteRequest
        @return: UpdateAnalysisConditionFavoriteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_analysis_condition_favorite_with_options_async(request, runtime)

    def update_audit_with_options(
        self,
        request: xtee_20210910_models.UpdateAuditRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAuditResponse:
        """
        @summary Approval
        
        @param request: UpdateAuditRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAuditResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_msg):
            query['auditMsg'] = request.audit_msg
        if not UtilClient.is_unset(request.audit_relation_type):
            query['auditRelationType'] = request.audit_relation_type
        if not UtilClient.is_unset(request.audit_status):
            query['auditStatus'] = request.audit_status
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAudit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAuditResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_audit_with_options_async(
        self,
        request: xtee_20210910_models.UpdateAuditRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAuditResponse:
        """
        @summary Approval
        
        @param request: UpdateAuditRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAuditResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.audit_msg):
            query['auditMsg'] = request.audit_msg
        if not UtilClient.is_unset(request.audit_relation_type):
            query['auditRelationType'] = request.audit_relation_type
        if not UtilClient.is_unset(request.audit_status):
            query['auditStatus'] = request.audit_status
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAudit',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAuditResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_audit(
        self,
        request: xtee_20210910_models.UpdateAuditRequest,
    ) -> xtee_20210910_models.UpdateAuditResponse:
        """
        @summary Approval
        
        @param request: UpdateAuditRequest
        @return: UpdateAuditResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_audit_with_options(request, runtime)

    async def update_audit_async(
        self,
        request: xtee_20210910_models.UpdateAuditRequest,
    ) -> xtee_20210910_models.UpdateAuditResponse:
        """
        @summary Approval
        
        @param request: UpdateAuditRequest
        @return: UpdateAuditResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_audit_with_options_async(request, runtime)

    def update_auth_rule_with_options(
        self,
        request: xtee_20210910_models.UpdateAuthRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAuthRuleResponse:
        """
        @summary Modify Authorization Policy
        
        @param request: UpdateAuthRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAuthRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAuthRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAuthRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_auth_rule_with_options_async(
        self,
        request: xtee_20210910_models.UpdateAuthRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateAuthRuleResponse:
        """
        @summary Modify Authorization Policy
        
        @param request: UpdateAuthRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAuthRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAuthRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateAuthRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_auth_rule(
        self,
        request: xtee_20210910_models.UpdateAuthRuleRequest,
    ) -> xtee_20210910_models.UpdateAuthRuleResponse:
        """
        @summary Modify Authorization Policy
        
        @param request: UpdateAuthRuleRequest
        @return: UpdateAuthRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_auth_rule_with_options(request, runtime)

    async def update_auth_rule_async(
        self,
        request: xtee_20210910_models.UpdateAuthRuleRequest,
    ) -> xtee_20210910_models.UpdateAuthRuleResponse:
        """
        @summary Modify Authorization Policy
        
        @param request: UpdateAuthRuleRequest
        @return: UpdateAuthRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_auth_rule_with_options_async(request, runtime)

    def update_by_pass_shunt_event_with_options(
        self,
        request: xtee_20210910_models.UpdateByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateByPassShuntEventResponse:
        """
        @summary Edit Bypass Event
        
        @param request: UpdateByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateByPassShuntEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_by_pass_shunt_event_with_options_async(
        self,
        request: xtee_20210910_models.UpdateByPassShuntEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateByPassShuntEventResponse:
        """
        @summary Edit Bypass Event
        
        @param request: UpdateByPassShuntEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateByPassShuntEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.event_id):
            query['eventId'] = request.event_id
        if not UtilClient.is_unset(request.event_name):
            query['eventName'] = request.event_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateByPassShuntEvent',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateByPassShuntEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_by_pass_shunt_event(
        self,
        request: xtee_20210910_models.UpdateByPassShuntEventRequest,
    ) -> xtee_20210910_models.UpdateByPassShuntEventResponse:
        """
        @summary Edit Bypass Event
        
        @param request: UpdateByPassShuntEventRequest
        @return: UpdateByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_by_pass_shunt_event_with_options(request, runtime)

    async def update_by_pass_shunt_event_async(
        self,
        request: xtee_20210910_models.UpdateByPassShuntEventRequest,
    ) -> xtee_20210910_models.UpdateByPassShuntEventResponse:
        """
        @summary Edit Bypass Event
        
        @param request: UpdateByPassShuntEventRequest
        @return: UpdateByPassShuntEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_by_pass_shunt_event_with_options_async(request, runtime)

    def update_data_source_with_options(
        self,
        request: xtee_20210910_models.UpdateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateDataSourceResponse:
        """
        @summary Modify Data Source
        
        @param request: UpdateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.oss_key):
            query['ossKey'] = request.oss_key
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_source_with_options_async(
        self,
        request: xtee_20210910_models.UpdateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateDataSourceResponse:
        """
        @summary Modify Data Source
        
        @param request: UpdateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['name'] = request.name
        if not UtilClient.is_unset(request.oss_key):
            query['ossKey'] = request.oss_key
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.type):
            query['type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataSource',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_source(
        self,
        request: xtee_20210910_models.UpdateDataSourceRequest,
    ) -> xtee_20210910_models.UpdateDataSourceResponse:
        """
        @summary Modify Data Source
        
        @param request: UpdateDataSourceRequest
        @return: UpdateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_source_with_options(request, runtime)

    async def update_data_source_async(
        self,
        request: xtee_20210910_models.UpdateDataSourceRequest,
    ) -> xtee_20210910_models.UpdateDataSourceResponse:
        """
        @summary Modify Data Source
        
        @param request: UpdateDataSourceRequest
        @return: UpdateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_source_with_options_async(request, runtime)

    def update_query_variable_with_options(
        self,
        request: xtee_20210910_models.UpdateQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateQueryVariableResponse:
        """
        @summary Modify Custom Query Variable
        
        @param request: UpdateQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateQueryVariableResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_query_variable_with_options_async(
        self,
        request: xtee_20210910_models.UpdateQueryVariableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateQueryVariableResponse:
        """
        @summary Modify Custom Query Variable
        
        @param request: UpdateQueryVariableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateQueryVariableResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.data_source_code):
            query['dataSourceCode'] = request.data_source_code
        if not UtilClient.is_unset(request.description):
            query['description'] = request.description
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.expression):
            query['expression'] = request.expression
        if not UtilClient.is_unset(request.expression_title):
            query['expressionTitle'] = request.expression_title
        if not UtilClient.is_unset(request.expression_variable):
            query['expressionVariable'] = request.expression_variable
        if not UtilClient.is_unset(request.id):
            query['id'] = request.id
        if not UtilClient.is_unset(request.outlier):
            query['outlier'] = request.outlier
        if not UtilClient.is_unset(request.outputs):
            query['outputs'] = request.outputs
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.title):
            query['title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateQueryVariable',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateQueryVariableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_query_variable(
        self,
        request: xtee_20210910_models.UpdateQueryVariableRequest,
    ) -> xtee_20210910_models.UpdateQueryVariableResponse:
        """
        @summary Modify Custom Query Variable
        
        @param request: UpdateQueryVariableRequest
        @return: UpdateQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_query_variable_with_options(request, runtime)

    async def update_query_variable_async(
        self,
        request: xtee_20210910_models.UpdateQueryVariableRequest,
    ) -> xtee_20210910_models.UpdateQueryVariableResponse:
        """
        @summary Modify Custom Query Variable
        
        @param request: UpdateQueryVariableRequest
        @return: UpdateQueryVariableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_query_variable_with_options_async(request, runtime)

    def update_rule_with_options(
        self,
        request: xtee_20210910_models.UpdateRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateRuleResponse:
        """
        @summary Update Policy
        
        @param request: UpdateRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.logic_expression):
            query['logicExpression'] = request.logic_expression
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_body):
            query['ruleBody'] = request.rule_body
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.rule_type):
            query['ruleType'] = request.rule_type
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_rule_with_options_async(
        self,
        request: xtee_20210910_models.UpdateRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateRuleResponse:
        """
        @summary Update Policy
        
        @param request: UpdateRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.logic_expression):
            query['logicExpression'] = request.logic_expression
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_actions):
            query['ruleActions'] = request.rule_actions
        if not UtilClient.is_unset(request.rule_body):
            query['ruleBody'] = request.rule_body
        if not UtilClient.is_unset(request.rule_expressions):
            query['ruleExpressions'] = request.rule_expressions
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_status):
            query['ruleStatus'] = request.rule_status
        if not UtilClient.is_unset(request.rule_type):
            query['ruleType'] = request.rule_type
        if not UtilClient.is_unset(request.rule_version_id):
            query['ruleVersionId'] = request.rule_version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRule',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_rule(
        self,
        request: xtee_20210910_models.UpdateRuleRequest,
    ) -> xtee_20210910_models.UpdateRuleResponse:
        """
        @summary Update Policy
        
        @param request: UpdateRuleRequest
        @return: UpdateRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_rule_with_options(request, runtime)

    async def update_rule_async(
        self,
        request: xtee_20210910_models.UpdateRuleRequest,
    ) -> xtee_20210910_models.UpdateRuleResponse:
        """
        @summary Update Policy
        
        @param request: UpdateRuleRequest
        @return: UpdateRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_rule_with_options_async(request, runtime)

    def update_rule_base_with_options(
        self,
        request: xtee_20210910_models.UpdateRuleBaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateRuleBaseResponse:
        """
        @summary Update Basic Policy Information
        
        @param request: UpdateRuleBaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRuleBaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRuleBase',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateRuleBaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_rule_base_with_options_async(
        self,
        request: xtee_20210910_models.UpdateRuleBaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateRuleBaseResponse:
        """
        @summary Update Basic Policy Information
        
        @param request: UpdateRuleBaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRuleBaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.console_rule_id):
            query['consoleRuleId'] = request.console_rule_id
        if not UtilClient.is_unset(request.event_code):
            query['eventCode'] = request.event_code
        if not UtilClient.is_unset(request.memo):
            query['memo'] = request.memo
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.rule_id):
            query['ruleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['ruleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRuleBase',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateRuleBaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_rule_base(
        self,
        request: xtee_20210910_models.UpdateRuleBaseRequest,
    ) -> xtee_20210910_models.UpdateRuleBaseResponse:
        """
        @summary Update Basic Policy Information
        
        @param request: UpdateRuleBaseRequest
        @return: UpdateRuleBaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_rule_base_with_options(request, runtime)

    async def update_rule_base_async(
        self,
        request: xtee_20210910_models.UpdateRuleBaseRequest,
    ) -> xtee_20210910_models.UpdateRuleBaseResponse:
        """
        @summary Update Basic Policy Information
        
        @param request: UpdateRuleBaseRequest
        @return: UpdateRuleBaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_rule_base_with_options_async(request, runtime)

    def update_sample_batch_with_options(
        self,
        request: xtee_20210910_models.UpdateSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateSampleBatchResponse:
        """
        @summary Batch Update Samples
        
        @param request: UpdateSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.tags):
            query['tags'] = request.tags
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateSampleBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_sample_batch_with_options_async(
        self,
        request: xtee_20210910_models.UpdateSampleBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UpdateSampleBatchResponse:
        """
        @summary Batch Update Samples
        
        @param request: UpdateSampleBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSampleBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ids):
            query['ids'] = request.ids
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.tags):
            query['tags'] = request.tags
        if not UtilClient.is_unset(request.versions):
            query['versions'] = request.versions
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSampleBatch',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UpdateSampleBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_sample_batch(
        self,
        request: xtee_20210910_models.UpdateSampleBatchRequest,
    ) -> xtee_20210910_models.UpdateSampleBatchResponse:
        """
        @summary Batch Update Samples
        
        @param request: UpdateSampleBatchRequest
        @return: UpdateSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_sample_batch_with_options(request, runtime)

    async def update_sample_batch_async(
        self,
        request: xtee_20210910_models.UpdateSampleBatchRequest,
    ) -> xtee_20210910_models.UpdateSampleBatchResponse:
        """
        @summary Batch Update Samples
        
        @param request: UpdateSampleBatchRequest
        @return: UpdateSampleBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_sample_batch_with_options_async(request, runtime)

    def upload_file_check_with_options(
        self,
        request: xtee_20210910_models.UploadFileCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UploadFileCheckResponse:
        """
        @summary Sample Inspection
        
        @param request: UploadFileCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadFileCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.data_type):
            query['dataType'] = request.data_type
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_tag_type):
            query['sampleTagType'] = request.sample_tag_type
        if not UtilClient.is_unset(request.service_list):
            query['serviceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadFileCheck',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UploadFileCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_file_check_with_options_async(
        self,
        request: xtee_20210910_models.UploadFileCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> xtee_20210910_models.UploadFileCheckResponse:
        """
        @summary Sample Inspection
        
        @param request: UploadFileCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadFileCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.batch_name):
            query['batchName'] = request.batch_name
        if not UtilClient.is_unset(request.data_type):
            query['dataType'] = request.data_type
        if not UtilClient.is_unset(request.oss_file_name):
            query['ossFileName'] = request.oss_file_name
        if not UtilClient.is_unset(request.reg_id):
            query['regId'] = request.reg_id
        if not UtilClient.is_unset(request.sample_tag_type):
            query['sampleTagType'] = request.sample_tag_type
        if not UtilClient.is_unset(request.service_list):
            query['serviceList'] = request.service_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadFileCheck',
            version='2021-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            xtee_20210910_models.UploadFileCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_file_check(
        self,
        request: xtee_20210910_models.UploadFileCheckRequest,
    ) -> xtee_20210910_models.UploadFileCheckResponse:
        """
        @summary Sample Inspection
        
        @param request: UploadFileCheckRequest
        @return: UploadFileCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_file_check_with_options(request, runtime)

    async def upload_file_check_async(
        self,
        request: xtee_20210910_models.UploadFileCheckRequest,
    ) -> xtee_20210910_models.UploadFileCheckResponse:
        """
        @summary Sample Inspection
        
        @param request: UploadFileCheckRequest
        @return: UploadFileCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_file_check_with_options_async(request, runtime)
